/* The following code was generated by JFlex 1.4.1 on 11/28/19 5:15 PM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
// Electrum -- Copyright (c) 2015-present, Nuno Macedo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

// @modified: Nuno Macedo // [HASLab] electrum-features


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/28/19 5:15 PM from the specification file
 * <tt>src/main/java/edu/mit/csail/sdg/parser/Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\121\1\123\1\110\1\0\1\123\1\122\16\121\4\0\1\123\1\1"+
    "\1\106\1\2\1\120\1\0\1\3\1\111\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\112\1\115\10\116\1\15\1\0\1\16"+
    "\1\17\1\12\1\0\1\20\6\114\2\120\1\56\11\120\1\61\7\120"+
    "\1\21\1\107\1\22\1\23\1\113\1\0\1\30\1\31\1\35\1\40"+
    "\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50\1\37"+
    "\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\62\1\51"+
    "\1\52\1\120\1\24\1\25\1\26\1\27\41\121\2\0\4\117\4\0"+
    "\1\117\2\0\1\121\7\0\1\117\4\0\1\117\5\0\27\117\1\0"+
    "\37\117\1\0\u01ca\117\4\0\14\117\16\0\5\117\7\0\1\117\1\0"+
    "\1\117\21\0\160\121\5\117\1\0\2\117\2\0\4\117\10\0\1\117"+
    "\1\0\3\117\1\0\1\117\1\0\24\117\1\0\123\117\1\0\213\117"+
    "\1\0\5\121\2\0\236\117\11\0\46\117\2\0\1\117\7\0\47\117"+
    "\7\0\1\117\1\0\55\121\1\0\1\121\1\0\2\121\1\0\2\121"+
    "\1\0\1\121\10\0\33\117\5\0\3\117\15\0\5\121\6\0\1\117"+
    "\4\0\13\121\5\0\53\117\37\121\4\0\2\117\1\121\143\117\1\0"+
    "\1\117\10\121\1\0\6\121\2\117\2\121\1\0\4\121\2\117\12\121"+
    "\3\117\2\0\1\117\17\0\1\121\1\117\1\121\36\117\33\121\2\0"+
    "\131\117\13\121\1\117\16\0\12\121\41\117\11\121\2\117\4\0\1\117"+
    "\5\0\26\117\4\121\1\117\11\121\1\117\3\121\1\117\5\121\22\0"+
    "\31\117\3\121\104\0\1\117\1\0\13\117\67\0\33\121\1\0\4\121"+
    "\66\117\3\121\1\117\22\121\1\117\7\121\12\117\2\121\2\0\12\121"+
    "\1\0\7\117\1\0\7\117\1\0\3\121\1\0\10\117\2\0\2\117"+
    "\2\0\26\117\1\0\7\117\1\0\1\117\3\0\4\117\2\0\1\121"+
    "\1\117\7\121\2\0\2\121\2\0\3\121\1\117\10\0\1\121\4\0"+
    "\2\117\1\0\3\117\2\121\2\0\12\121\4\117\7\0\1\117\5\0"+
    "\3\121\1\0\6\117\4\0\2\117\2\0\26\117\1\0\7\117\1\0"+
    "\2\117\1\0\2\117\1\0\2\117\2\0\1\121\1\0\5\121\4\0"+
    "\2\121\2\0\3\121\3\0\1\121\7\0\4\117\1\0\1\117\7\0"+
    "\14\121\3\117\1\121\13\0\3\121\1\0\11\117\1\0\3\117\1\0"+
    "\26\117\1\0\7\117\1\0\2\117\1\0\5\117\2\0\1\121\1\117"+
    "\10\121\1\0\3\121\1\0\3\121\2\0\1\117\17\0\2\117\2\121"+
    "\2\0\12\121\1\0\1\117\17\0\3\121\1\0\10\117\2\0\2\117"+
    "\2\0\26\117\1\0\7\117\1\0\2\117\1\0\5\117\2\0\1\121"+
    "\1\117\7\121\2\0\2\121\2\0\3\121\10\0\2\121\4\0\2\117"+
    "\1\0\3\117\2\121\2\0\12\121\1\0\1\117\20\0\1\121\1\117"+
    "\1\0\6\117\3\0\3\117\1\0\4\117\3\0\2\117\1\0\1\117"+
    "\1\0\2\117\3\0\2\117\3\0\3\117\3\0\14\117\4\0\5\121"+
    "\3\0\3\121\1\0\4\121\2\0\1\117\6\0\1\121\16\0\12\121"+
    "\11\0\1\117\7\0\3\121\1\0\10\117\1\0\3\117\1\0\27\117"+
    "\1\0\12\117\1\0\5\117\3\0\1\117\7\121\1\0\3\121\1\0"+
    "\4\121\7\0\2\121\1\0\2\117\6\0\2\117\2\121\2\0\12\121"+
    "\22\0\2\121\1\0\10\117\1\0\3\117\1\0\27\117\1\0\12\117"+
    "\1\0\5\117\2\0\1\121\1\117\7\121\1\0\3\121\1\0\4\121"+
    "\7\0\2\121\7\0\1\117\1\0\2\117\2\121\2\0\12\121\1\0"+
    "\2\117\17\0\2\121\1\0\10\117\1\0\3\117\1\0\51\117\2\0"+
    "\1\117\7\121\1\0\3\121\1\0\4\121\1\117\10\0\1\121\10\0"+
    "\2\117\2\121\2\0\12\121\12\0\6\117\2\0\2\121\1\0\22\117"+
    "\3\0\30\117\1\0\11\117\1\0\1\117\2\0\7\117\3\0\1\121"+
    "\4\0\6\121\1\0\1\121\1\0\10\121\22\0\2\121\15\0\60\117"+
    "\1\121\2\117\7\121\4\0\10\117\10\121\1\0\12\121\47\0\2\117"+
    "\1\0\1\117\2\0\2\117\1\0\1\117\2\0\1\117\6\0\4\117"+
    "\1\0\7\117\1\0\3\117\1\0\1\117\1\0\1\117\2\0\2\117"+
    "\1\0\4\117\1\121\2\117\6\121\1\0\2\121\1\117\2\0\5\117"+
    "\1\0\1\117\1\0\6\121\2\0\12\121\2\0\4\117\40\0\1\117"+
    "\27\0\2\121\6\0\12\121\13\0\1\121\1\0\1\121\1\0\1\121"+
    "\4\0\2\121\10\117\1\0\44\117\4\0\24\121\1\0\2\121\5\117"+
    "\13\121\1\0\44\121\11\0\1\121\71\0\53\117\24\121\1\117\12\121"+
    "\6\0\6\117\4\121\4\117\3\121\1\117\3\121\2\117\7\121\3\117"+
    "\4\121\15\117\14\121\1\117\17\121\2\0\46\117\1\0\1\117\5\0"+
    "\1\117\2\0\53\117\1\0\u014d\117\1\0\4\117\2\0\7\117\1\0"+
    "\1\117\1\0\4\117\2\0\51\117\1\0\4\117\2\0\41\117\1\0"+
    "\4\117\2\0\7\117\1\0\1\117\1\0\4\117\2\0\17\117\1\0"+
    "\71\117\1\0\4\117\2\0\103\117\2\0\3\121\40\0\20\117\20\0"+
    "\125\117\14\0\u026c\117\2\0\21\117\1\0\32\117\5\0\113\117\3\0"+
    "\3\117\17\0\15\117\1\0\4\117\3\121\13\0\22\117\3\121\13\0"+
    "\22\117\2\121\14\0\15\117\1\0\3\117\1\0\2\121\14\0\64\117"+
    "\40\121\3\0\1\117\3\0\2\117\1\121\2\0\12\121\41\0\3\121"+
    "\2\0\12\121\6\0\130\117\10\0\51\117\1\121\1\117\5\0\106\117"+
    "\12\0\35\117\3\0\14\121\4\0\14\121\12\0\12\121\36\117\2\0"+
    "\5\117\13\0\54\117\4\0\21\121\7\117\2\121\6\0\12\121\46\0"+
    "\27\117\5\121\4\0\65\117\12\121\1\0\35\121\2\0\13\121\6\0"+
    "\12\121\15\0\1\117\130\0\5\121\57\117\21\121\7\117\4\0\12\121"+
    "\21\0\11\121\14\0\3\121\36\117\15\121\2\117\12\121\54\117\16\121"+
    "\14\0\44\117\24\121\10\0\12\121\3\0\3\117\12\121\44\117\122\0"+
    "\3\121\1\0\25\121\4\117\1\121\4\117\3\121\2\117\11\0\300\117"+
    "\47\121\25\0\4\121\u0116\117\2\0\6\117\2\0\46\117\2\0\6\117"+
    "\2\0\10\117\1\0\1\117\1\0\1\117\1\0\1\117\1\0\37\117"+
    "\2\0\65\117\1\0\7\117\1\0\1\117\3\0\3\117\1\0\7\117"+
    "\3\0\4\117\2\0\6\117\4\0\15\117\5\0\3\117\1\0\7\117"+
    "\16\0\5\121\32\0\5\121\20\0\2\117\23\0\1\117\13\0\5\121"+
    "\5\0\6\121\1\0\1\117\15\0\1\117\20\0\15\117\3\0\33\117"+
    "\25\0\15\121\4\0\1\121\3\0\14\121\21\0\1\117\4\0\1\117"+
    "\2\0\12\117\1\0\1\117\3\0\5\117\6\0\1\117\1\0\1\117"+
    "\1\0\1\117\1\0\4\117\1\0\13\117\2\0\4\117\5\0\5\117"+
    "\4\0\1\117\21\0\51\117\u0361\0\1\74\u0295\0\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\0\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\u046d\0\57\117\1\0\57\117"+
    "\1\0\205\117\6\0\4\117\3\121\2\117\14\0\46\117\1\0\1\117"+
    "\5\0\1\117\2\0\70\117\7\0\1\117\17\0\1\121\27\117\11\0"+
    "\7\117\1\0\7\117\1\0\7\117\1\0\7\117\1\0\7\117\1\0"+
    "\7\117\1\0\7\117\1\0\7\117\1\0\40\121\57\0\1\117\u01d5\0"+
    "\3\117\31\0\11\117\6\121\1\0\5\117\2\0\5\117\4\0\126\117"+
    "\2\0\2\121\2\0\3\117\1\0\132\117\1\0\4\117\5\0\51\117"+
    "\3\0\136\117\21\0\33\117\65\0\20\117\u0200\0\u19b6\117\112\0\u51cd\117"+
    "\63\0\u048d\117\103\0\56\117\2\0\u010d\117\3\0\20\117\12\121\2\117"+
    "\24\0\57\117\1\121\4\0\12\121\1\0\31\117\7\0\1\121\120\117"+
    "\2\121\45\0\11\117\2\0\147\117\2\0\4\117\1\0\4\117\14\0"+
    "\13\117\115\0\12\117\1\121\3\117\1\121\4\117\1\121\27\117\5\121"+
    "\20\0\1\117\7\0\64\117\14\0\2\121\62\117\21\121\13\0\12\121"+
    "\6\0\22\121\6\117\3\0\1\117\4\0\12\121\34\117\10\121\2\0"+
    "\27\117\15\121\14\0\35\117\3\0\4\121\57\117\16\121\16\0\1\117"+
    "\12\121\46\0\51\117\16\121\11\0\3\117\1\121\10\117\2\121\2\0"+
    "\12\121\6\0\27\117\3\0\1\117\1\121\4\0\60\117\1\121\1\117"+
    "\3\121\2\117\2\121\5\117\2\121\1\117\1\121\1\117\30\0\3\117"+
    "\2\0\13\117\5\121\2\0\3\117\2\121\12\0\6\117\2\0\6\117"+
    "\2\0\6\117\11\0\7\117\1\0\7\117\221\0\43\117\10\121\1\0"+
    "\2\121\2\0\12\121\6\0\u2ba4\117\14\0\27\117\4\0\61\117\u2104\0"+
    "\u016e\117\2\0\152\117\46\0\7\117\14\0\5\117\5\0\1\117\1\121"+
    "\12\117\1\0\15\117\1\0\5\117\1\0\1\117\1\0\2\117\1\0"+
    "\2\117\1\0\154\117\41\0\u016b\117\22\0\100\117\2\0\66\117\50\0"+
    "\15\117\3\0\20\121\20\0\7\121\14\0\2\117\30\0\3\117\31\0"+
    "\1\117\6\0\5\117\1\0\207\117\2\0\1\121\4\0\1\117\13\0"+
    "\12\121\7\0\32\117\4\0\1\117\1\0\32\117\13\0\131\117\3\0"+
    "\6\117\2\0\6\117\2\0\6\117\2\0\3\117\3\0\2\117\3\0"+
    "\2\117\22\0\3\121\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\24\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\2\57"+
    "\1\60\1\61\1\56\1\62\1\63\1\64\1\0\1\65"+
    "\1\66\1\67\1\70\1\71\1\70\1\72\1\31\1\73"+
    "\14\31\1\74\5\31\1\75\3\31\1\72\13\31\1\76"+
    "\1\0\3\77\1\100\2\0\1\101\2\31\1\102\1\60"+
    "\1\103\1\104\1\105\1\106\1\107\2\31\1\110\1\31"+
    "\1\111\1\31\1\2\6\31\1\112\2\31\1\113\2\31"+
    "\1\101\1\114\6\31\1\115\1\116\1\117\2\31\1\120"+
    "\1\121\1\77\1\122\1\0\1\56\2\31\1\123\1\124"+
    "\1\31\1\125\1\126\1\127\1\130\1\131\4\31\1\132"+
    "\1\133\1\31\1\134\1\31\1\135\1\136\1\31\1\137"+
    "\1\31\1\140\2\31\1\141\13\31\1\142\4\31\1\143"+
    "\1\31\1\144\2\31\1\145\2\31\1\146\1\147\1\31"+
    "\1\71\1\31\1\150\1\151\1\127\3\31\1\135\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\124\0\124\0\250\0\124\0\124\0\124"+
    "\0\374\0\124\0\u0150\0\u01a4\0\124\0\u01f8\0\u024c\0\u02a0"+
    "\0\u02f4\0\124\0\124\0\124\0\124\0\124\0\u0348\0\124"+
    "\0\124\0\u039c\0\u03f0\0\u0444\0\u0498\0\u04ec\0\u0540\0\u0594"+
    "\0\u05e8\0\u063c\0\u0690\0\u06e4\0\u0738\0\u078c\0\u07e0\0\u0834"+
    "\0\u0888\0\u08dc\0\u0930\0\u0984\0\u09d8\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\u0a2c\0\124\0\u0a80\0\u0ad4\0\124\0\124\0\u0b28\0\124"+
    "\0\u0b7c\0\124\0\u0bd0\0\124\0\124\0\124\0\u0c24\0\124"+
    "\0\124\0\124\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c"+
    "\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc"+
    "\0\u1110\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c"+
    "\0\u13b0\0\u1404\0\u0738\0\u1458\0\u14ac\0\u1500\0\u1554\0\u15a8"+
    "\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4\0\u1848"+
    "\0\u189c\0\u18f0\0\u1944\0\124\0\u1998\0\u19ec\0\124\0\u1a40"+
    "\0\u1a94\0\u0738\0\u0738\0\u0738\0\u0738\0\u0738\0\u0738\0\u0738"+
    "\0\u1ae8\0\u1b3c\0\u0738\0\u1b90\0\u0738\0\u1be4\0\u0738\0\u1c38"+
    "\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8"+
    "\0\u0738\0\u1f2c\0\u1f80\0\u0738\0\u0738\0\u1fd4\0\u2028\0\u207c"+
    "\0\u20d0\0\u2124\0\u2178\0\u0738\0\u0738\0\u0738\0\u21cc\0\u2220"+
    "\0\u17f4\0\u18f0\0\u2274\0\u1944\0\u22c8\0\u1998\0\u231c\0\u2370"+
    "\0\u0738\0\u0738\0\u23c4\0\u0738\0\u0738\0\u2418\0\u0738\0\u0738"+
    "\0\u246c\0\u24c0\0\u2514\0\u2568\0\u0738\0\u0738\0\u25bc\0\u0738"+
    "\0\u2610\0\u2664\0\u0738\0\u26b8\0\u0738\0\u270c\0\u0738\0\u2760"+
    "\0\u27b4\0\u0738\0\u2808\0\u285c\0\u28b0\0\u2904\0\u2958\0\u29ac"+
    "\0\u2a00\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u0738\0\u2ba4\0\u2bf8"+
    "\0\u2c4c\0\u2ca0\0\u0738\0\u2cf4\0\u0738\0\u2d48\0\u2d9c\0\u0738"+
    "\0\u2df0\0\u2e44\0\u0738\0\u0738\0\u2e98\0\u0738\0\u2eec\0\u0738"+
    "\0\u0738\0\u0738\0\u2f40\0\u2f94\0\u2fe8\0\u0738\0\u0738";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\1\45\1\47\1\50"+
    "\3\45\1\51\1\52\1\53\2\45\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\2\1\102\1\2\1\103\2\45"+
    "\2\104\2\45\1\2\2\102\127\0\1\105\127\0\1\106"+
    "\125\0\1\107\1\110\123\0\1\111\4\0\1\112\112\0"+
    "\1\113\5\0\1\107\121\0\1\114\2\0\1\15\123\0"+
    "\1\115\1\116\1\117\116\0\1\120\3\0\1\121\132\0"+
    "\1\122\126\0\1\45\1\123\1\124\3\45\1\125\1\126"+
    "\23\45\23\0\1\45\2\0\11\45\32\0\12\45\1\127"+
    "\20\45\23\0\1\45\2\0\11\45\32\0\11\45\1\130"+
    "\1\131\2\45\1\132\1\45\1\133\13\45\23\0\1\45"+
    "\2\0\11\45\32\0\13\45\1\134\17\45\23\0\1\45"+
    "\2\0\11\45\32\0\12\45\1\135\20\45\23\0\1\45"+
    "\2\0\11\45\32\0\13\45\1\136\17\45\23\0\1\45"+
    "\2\0\11\45\32\0\11\45\1\137\5\45\1\140\13\45"+
    "\23\0\1\45\2\0\11\45\32\0\17\45\1\141\13\45"+
    "\23\0\1\45\2\0\11\45\32\0\15\45\1\142\15\45"+
    "\23\0\1\45\2\0\11\45\32\0\6\45\1\143\1\144"+
    "\11\45\1\145\11\45\23\0\1\45\2\0\11\45\32\0"+
    "\7\45\1\146\23\45\23\0\1\45\2\0\11\45\32\0"+
    "\33\45\23\0\1\45\2\0\11\45\32\0\7\45\1\147"+
    "\1\150\7\45\1\151\4\45\1\152\5\45\23\0\1\45"+
    "\2\0\11\45\32\0\4\45\1\153\2\45\1\154\14\45"+
    "\1\155\6\45\23\0\1\45\2\0\11\45\32\0\17\45"+
    "\1\156\13\45\23\0\1\45\2\0\11\45\32\0\1\157"+
    "\3\45\1\160\26\45\23\0\1\45\2\0\11\45\32\0"+
    "\1\161\11\45\1\162\4\45\1\163\13\45\23\0\1\45"+
    "\2\0\11\45\32\0\7\45\1\164\23\45\23\0\1\45"+
    "\2\0\11\45\32\0\3\45\1\165\27\45\23\0\1\45"+
    "\2\0\11\45\32\0\15\45\1\166\15\45\23\0\1\45"+
    "\2\0\11\45\2\0\106\101\1\167\1\170\14\101\30\0"+
    "\1\171\1\172\17\171\1\173\11\171\23\0\1\171\2\0"+
    "\1\171\1\104\2\171\2\104\1\0\1\171\33\0\33\171"+
    "\23\0\1\171\2\0\1\171\1\104\2\171\2\104\1\0"+
    "\1\171\3\0\110\107\1\102\11\107\1\102\1\107\12\0"+
    "\1\174\111\0\6\175\1\176\115\175\12\0\1\177\141\0"+
    "\2\45\1\200\30\45\23\0\1\45\2\0\11\45\32\0"+
    "\2\45\1\201\30\45\23\0\1\45\2\0\11\45\32\0"+
    "\6\45\1\202\24\45\23\0\1\45\2\0\11\45\32\0"+
    "\10\45\1\203\22\45\23\0\1\45\2\0\11\45\32\0"+
    "\3\45\1\204\27\45\23\0\1\45\2\0\11\45\32\0"+
    "\3\45\1\205\23\45\1\206\3\45\23\0\1\45\2\0"+
    "\11\45\32\0\20\45\1\207\12\45\23\0\1\45\2\0"+
    "\11\45\32\0\30\45\1\210\2\45\23\0\1\45\2\0"+
    "\11\45\32\0\20\45\1\211\12\45\23\0\1\45\2\0"+
    "\11\45\32\0\15\45\1\212\15\45\23\0\1\45\2\0"+
    "\11\45\32\0\7\45\1\213\23\45\23\0\1\45\2\0"+
    "\11\45\32\0\11\45\1\214\21\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\215\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\7\45\1\216\23\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\217\3\45\1\220\23\45\23\0"+
    "\1\45\2\0\11\45\32\0\2\45\1\221\30\45\23\0"+
    "\1\45\2\0\11\45\32\0\2\45\1\222\30\45\23\0"+
    "\1\45\2\0\11\45\32\0\12\45\1\223\20\45\23\0"+
    "\1\45\2\0\11\45\32\0\1\224\2\45\1\225\7\45"+
    "\1\226\10\45\1\227\6\45\23\0\1\45\2\0\11\45"+
    "\32\0\15\45\1\230\15\45\23\0\1\45\2\0\11\45"+
    "\32\0\3\45\1\231\27\45\23\0\1\45\2\0\11\45"+
    "\32\0\11\45\1\232\21\45\23\0\1\45\2\0\11\45"+
    "\32\0\24\45\1\233\6\45\23\0\1\45\2\0\11\45"+
    "\32\0\25\45\1\234\5\45\23\0\1\45\2\0\11\45"+
    "\32\0\11\45\1\235\21\45\23\0\1\45\2\0\11\45"+
    "\32\0\11\45\1\236\21\45\23\0\1\45\2\0\11\45"+
    "\32\0\10\45\1\237\22\45\23\0\1\45\2\0\11\45"+
    "\32\0\4\45\1\240\26\45\23\0\1\45\2\0\11\45"+
    "\32\0\11\45\1\241\3\45\1\242\15\45\23\0\1\45"+
    "\2\0\11\45\32\0\5\45\1\243\25\45\23\0\1\45"+
    "\2\0\11\45\32\0\7\45\1\244\23\45\23\0\1\45"+
    "\2\0\11\45\32\0\4\45\1\245\26\45\23\0\1\45"+
    "\2\0\11\45\32\0\3\45\1\246\27\45\23\0\1\45"+
    "\2\0\11\45\32\0\4\45\1\247\26\45\23\0\1\45"+
    "\2\0\11\45\32\0\3\45\1\250\27\45\23\0\1\45"+
    "\2\0\11\45\32\0\33\251\23\0\1\251\2\0\6\251"+
    "\1\0\1\251\3\0\110\101\1\0\13\101\30\0\33\171"+
    "\23\0\1\171\2\0\6\171\1\0\1\171\33\0\33\171"+
    "\23\0\1\171\2\0\1\171\2\252\1\171\1\252\1\171"+
    "\1\0\1\171\33\0\2\253\3\171\1\253\2\171\2\253"+
    "\13\171\1\253\5\171\23\0\1\171\2\0\1\171\1\253"+
    "\1\254\3\253\1\0\1\171\3\0\6\175\1\255\123\175"+
    "\1\255\5\175\1\256\107\175\30\0\3\45\1\257\27\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\260\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\261\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\2\45\1\262\30\45"+
    "\23\0\1\45\2\0\11\45\32\0\5\45\1\263\25\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\264\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\265\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\16\45\1\266\14\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\267\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\20\45\1\270\12\45"+
    "\23\0\1\45\2\0\11\45\32\0\5\45\1\271\25\45"+
    "\23\0\1\45\2\0\11\45\32\0\11\45\1\272\21\45"+
    "\23\0\1\45\2\0\11\45\32\0\1\273\32\45\23\0"+
    "\1\45\2\0\11\45\32\0\11\45\1\274\21\45\23\0"+
    "\1\45\2\0\11\45\32\0\23\45\1\275\7\45\23\0"+
    "\1\45\2\0\11\45\32\0\7\45\1\276\23\45\23\0"+
    "\1\45\2\0\11\45\32\0\6\45\1\277\24\45\23\0"+
    "\1\45\2\0\11\45\32\0\7\45\1\300\23\45\23\0"+
    "\1\45\2\0\11\45\32\0\12\45\1\301\20\45\23\0"+
    "\1\45\2\0\11\45\32\0\3\45\1\302\27\45\23\0"+
    "\1\45\2\0\11\45\32\0\10\45\1\303\22\45\23\0"+
    "\1\45\2\0\11\45\32\0\23\45\1\304\7\45\23\0"+
    "\1\45\2\0\11\45\32\0\3\45\1\305\27\45\23\0"+
    "\1\45\2\0\11\45\32\0\15\45\1\306\15\45\23\0"+
    "\1\45\2\0\11\45\32\0\13\45\1\307\17\45\23\0"+
    "\1\45\2\0\11\45\32\0\2\254\3\171\1\254\2\171"+
    "\2\254\13\171\1\254\5\171\23\0\1\171\2\0\1\171"+
    "\1\254\1\171\3\254\1\0\1\171\3\0\6\175\1\255"+
    "\5\175\1\102\107\175\30\0\4\45\1\310\26\45\23\0"+
    "\1\45\2\0\11\45\32\0\4\45\1\311\26\45\23\0"+
    "\1\45\2\0\11\45\32\0\14\45\1\312\16\45\23\0"+
    "\1\45\2\0\11\45\32\0\17\45\1\313\13\45\23\0"+
    "\1\45\2\0\11\45\32\0\3\45\1\314\27\45\23\0"+
    "\1\45\2\0\11\45\32\0\7\45\1\315\23\45\23\0"+
    "\1\45\2\0\11\45\32\0\12\45\1\316\20\45\23\0"+
    "\1\45\2\0\11\45\32\0\5\45\1\317\25\45\23\0"+
    "\1\45\2\0\11\45\32\0\15\45\1\320\15\45\23\0"+
    "\1\45\2\0\11\45\32\0\6\45\1\321\24\45\23\0"+
    "\1\45\2\0\11\45\32\0\15\45\1\322\15\45\23\0"+
    "\1\45\2\0\11\45\32\0\1\323\32\45\23\0\1\45"+
    "\2\0\11\45\32\0\7\45\1\324\23\45\23\0\1\45"+
    "\2\0\11\45\32\0\1\325\32\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\326\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\15\45\1\327\15\45\23\0\1\45\2\0"+
    "\11\45\32\0\6\45\1\330\24\45\23\0\1\45\2\0"+
    "\11\45\32\0\10\45\1\331\22\45\23\0\1\45\2\0"+
    "\11\45\32\0\2\45\1\332\30\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\333\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\11\45\1\334\21\45\23\0\1\45\2\0"+
    "\11\45\32\0\11\45\1\335\21\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\336\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\337\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\30\45\1\340\2\45\23\0\1\45\2\0"+
    "\11\45\32\0\5\45\1\341\25\45\23\0\1\45\2\0"+
    "\11\45\32\0\7\45\1\342\23\45\23\0\1\45\2\0"+
    "\11\45\32\0\22\45\1\343\10\45\23\0\1\45\2\0"+
    "\11\45\32\0\2\45\1\344\30\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\345\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\2\45\1\346\30\45\23\0\1\45\2\0"+
    "\11\45\32\0\15\45\1\347\15\45\23\0\1\45\2\0"+
    "\11\45\32\0\11\45\1\350\21\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\351\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\3\45\1\352\27\45\23\0\1\45\2\0"+
    "\11\45\32\0\15\45\1\353\15\45\23\0\1\45\2\0"+
    "\11\45\32\0\17\45\1\354\13\45\23\0\1\45\2\0"+
    "\11\45\32\0\23\45\1\355\7\45\23\0\1\45\2\0"+
    "\11\45\32\0\7\45\1\356\23\45\23\0\1\45\2\0"+
    "\11\45\32\0\11\45\1\357\21\45\23\0\1\45\2\0"+
    "\11\45\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12348];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\24\1\23\11\1\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\1\3\11\45\1\1\0\3\1\1\11\2\0\1\11"+
    "\55\1\1\0\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\'' && c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nfour escape sequences: \\\\, \\n, \\\', and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2308) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 106: break;
        case 81: 
          { return alloy_binarynum (yytext());
          }
        case 107: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 108: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 109: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 110: break;
        case 102: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 111: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 112: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 113: break;
        case 27: 
          { return alloy_sym(yytext(), CompSym.PFEAT2      );
          }
        case 114: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 115: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 116: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 117: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.PFEAT0      );
          }
        case 118: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 119: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 120: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 121: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 122: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 123: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.NFEAT8      );
          }
        case 124: break;
        case 101: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 125: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 126: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 127: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 128: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 129: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 130: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 131: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 132: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 133: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 134: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 135: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.NFEAT6      );
          }
        case 136: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 137: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 138: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.NFEAT4      );
          }
        case 139: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 140: break;
        case 62: 
          { return alloy_string(yytext());
          }
        case 141: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.PFEAT9      );
          }
        case 142: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 143: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.NFEAT2      );
          }
        case 144: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 145: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.PFEAT7      );
          }
        case 146: break;
        case 30: 
          { return alloy_sym(yytext(), CompSym.PFEAT5      );
          }
        case 147: break;
        case 64: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 148: break;
        case 104: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 149: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 150: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 151: break;
        case 96: 
          { return alloy_sym(yytext(), CompSym.WITH        );
          }
        case 152: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 153: break;
        case 65: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 154: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 155: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 156: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 157: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 158: break;
        case 99: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 159: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 160: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 161: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 162: break;
        case 28: 
          { return alloy_sym(yytext(), CompSym.PFEAT3      );
          }
        case 163: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 164: break;
        case 82: 
          { return alloy_hexnum (yytext());
          }
        case 165: break;
        case 26: 
          { return alloy_sym(yytext(), CompSym.PFEAT1      );
          }
        case 166: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 167: break;
        case 100: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 168: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 169: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 170: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 171: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 172: break;
        case 103: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 173: break;
        case 45: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 174: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 175: break;
        case 47: 
          { return alloy_num (yytext());
          }
        case 176: break;
        case 44: 
          { return alloy_sym(yytext(), CompSym.NFEAT9      );
          }
        case 177: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 178: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 179: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.NFEAT7      );
          }
        case 180: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 181: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 182: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 183: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 184: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 185: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 186: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 187: break;
        case 97: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 188: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 189: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.NFEAT5      );
          }
        case 190: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 191: break;
        case 95: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 192: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.NFEAT3      );
          }
        case 193: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 194: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 195: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 196: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 197: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 198: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 199: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.PFEAT8      );
          }
        case 200: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 201: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.NFEAT1      );
          }
        case 202: break;
        case 105: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 203: break;
        case 98: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 204: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.PFEAT6      );
          }
        case 205: break;
        case 80: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 206: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 207: break;
        case 29: 
          { return alloy_sym(yytext(), CompSym.PFEAT4      );
          }
        case 208: break;
        case 46: 
          { 
          }
        case 209: break;
        case 63: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
