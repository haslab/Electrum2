/* The following code was generated by JFlex 1.4.1 on 11/27/19 1:49 PM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
// Electrum -- Copyright (c) 2015-present, Nuno Macedo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

// @modified: Nuno Macedo // [HASLab] electrum-temporal, electrum-features


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 11/27/19 1:49 PM from the specification file
 * <tt>src/main/java/edu/mit/csail/sdg/parser/Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\123\1\125\1\113\1\0\1\125\1\124\16\123\4\0\1\125\1\1"+
    "\1\111\1\2\1\114\1\0\1\3\1\65\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\115\1\120\10\121\1\15\1\63\1\16"+
    "\1\17\1\12\1\0\1\20\6\117\2\114\1\56\11\114\1\61\1\64"+
    "\6\114\1\21\1\112\1\22\1\23\1\116\1\0\1\30\1\31\1\35"+
    "\1\40\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50"+
    "\1\37\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\62"+
    "\1\51\1\52\1\114\1\24\1\25\1\26\1\27\41\123\2\0\4\122"+
    "\4\0\1\122\2\0\1\123\7\0\1\122\4\0\1\122\5\0\27\122"+
    "\1\0\37\122\1\0\u01ca\122\4\0\14\122\16\0\5\122\7\0\1\122"+
    "\1\0\1\122\21\0\160\123\5\122\1\0\2\122\2\0\4\122\10\0"+
    "\1\122\1\0\3\122\1\0\1\122\1\0\24\122\1\0\123\122\1\0"+
    "\213\122\1\0\5\123\2\0\236\122\11\0\46\122\2\0\1\122\7\0"+
    "\47\122\7\0\1\122\1\0\55\123\1\0\1\123\1\0\2\123\1\0"+
    "\2\123\1\0\1\123\10\0\33\122\5\0\3\122\15\0\5\123\6\0"+
    "\1\122\4\0\13\123\5\0\53\122\37\123\4\0\2\122\1\123\143\122"+
    "\1\0\1\122\10\123\1\0\6\123\2\122\2\123\1\0\4\123\2\122"+
    "\12\123\3\122\2\0\1\122\17\0\1\123\1\122\1\123\36\122\33\123"+
    "\2\0\131\122\13\123\1\122\16\0\12\123\41\122\11\123\2\122\4\0"+
    "\1\122\5\0\26\122\4\123\1\122\11\123\1\122\3\123\1\122\5\123"+
    "\22\0\31\122\3\123\104\0\1\122\1\0\13\122\67\0\33\123\1\0"+
    "\4\123\66\122\3\123\1\122\22\123\1\122\7\123\12\122\2\123\2\0"+
    "\12\123\1\0\7\122\1\0\7\122\1\0\3\123\1\0\10\122\2\0"+
    "\2\122\2\0\26\122\1\0\7\122\1\0\1\122\3\0\4\122\2\0"+
    "\1\123\1\122\7\123\2\0\2\123\2\0\3\123\1\122\10\0\1\123"+
    "\4\0\2\122\1\0\3\122\2\123\2\0\12\123\4\122\7\0\1\122"+
    "\5\0\3\123\1\0\6\122\4\0\2\122\2\0\26\122\1\0\7\122"+
    "\1\0\2\122\1\0\2\122\1\0\2\122\2\0\1\123\1\0\5\123"+
    "\4\0\2\123\2\0\3\123\3\0\1\123\7\0\4\122\1\0\1\122"+
    "\7\0\14\123\3\122\1\123\13\0\3\123\1\0\11\122\1\0\3\122"+
    "\1\0\26\122\1\0\7\122\1\0\2\122\1\0\5\122\2\0\1\123"+
    "\1\122\10\123\1\0\3\123\1\0\3\123\2\0\1\122\17\0\2\122"+
    "\2\123\2\0\12\123\1\0\1\122\17\0\3\123\1\0\10\122\2\0"+
    "\2\122\2\0\26\122\1\0\7\122\1\0\2\122\1\0\5\122\2\0"+
    "\1\123\1\122\7\123\2\0\2\123\2\0\3\123\10\0\2\123\4\0"+
    "\2\122\1\0\3\122\2\123\2\0\12\123\1\0\1\122\20\0\1\123"+
    "\1\122\1\0\6\122\3\0\3\122\1\0\4\122\3\0\2\122\1\0"+
    "\1\122\1\0\2\122\3\0\2\122\3\0\3\122\3\0\14\122\4\0"+
    "\5\123\3\0\3\123\1\0\4\123\2\0\1\122\6\0\1\123\16\0"+
    "\12\123\11\0\1\122\7\0\3\123\1\0\10\122\1\0\3\122\1\0"+
    "\27\122\1\0\12\122\1\0\5\122\3\0\1\122\7\123\1\0\3\123"+
    "\1\0\4\123\7\0\2\123\1\0\2\122\6\0\2\122\2\123\2\0"+
    "\12\123\22\0\2\123\1\0\10\122\1\0\3\122\1\0\27\122\1\0"+
    "\12\122\1\0\5\122\2\0\1\123\1\122\7\123\1\0\3\123\1\0"+
    "\4\123\7\0\2\123\7\0\1\122\1\0\2\122\2\123\2\0\12\123"+
    "\1\0\2\122\17\0\2\123\1\0\10\122\1\0\3\122\1\0\51\122"+
    "\2\0\1\122\7\123\1\0\3\123\1\0\4\123\1\122\10\0\1\123"+
    "\10\0\2\122\2\123\2\0\12\123\12\0\6\122\2\0\2\123\1\0"+
    "\22\122\3\0\30\122\1\0\11\122\1\0\1\122\2\0\7\122\3\0"+
    "\1\123\4\0\6\123\1\0\1\123\1\0\10\123\22\0\2\123\15\0"+
    "\60\122\1\123\2\122\7\123\4\0\10\122\10\123\1\0\12\123\47\0"+
    "\2\122\1\0\1\122\2\0\2\122\1\0\1\122\2\0\1\122\6\0"+
    "\4\122\1\0\7\122\1\0\3\122\1\0\1\122\1\0\1\122\2\0"+
    "\2\122\1\0\4\122\1\123\2\122\6\123\1\0\2\123\1\122\2\0"+
    "\5\122\1\0\1\122\1\0\6\123\2\0\12\123\2\0\4\122\40\0"+
    "\1\122\27\0\2\123\6\0\12\123\13\0\1\123\1\0\1\123\1\0"+
    "\1\123\4\0\2\123\10\122\1\0\44\122\4\0\24\123\1\0\2\123"+
    "\5\122\13\123\1\0\44\123\11\0\1\123\71\0\53\122\24\123\1\122"+
    "\12\123\6\0\6\122\4\123\4\122\3\123\1\122\3\123\2\122\7\123"+
    "\3\122\4\123\15\122\14\123\1\122\17\123\2\0\46\122\1\0\1\122"+
    "\5\0\1\122\2\0\53\122\1\0\u014d\122\1\0\4\122\2\0\7\122"+
    "\1\0\1\122\1\0\4\122\2\0\51\122\1\0\4\122\2\0\41\122"+
    "\1\0\4\122\2\0\7\122\1\0\1\122\1\0\4\122\2\0\17\122"+
    "\1\0\71\122\1\0\4\122\2\0\103\122\2\0\3\123\40\0\20\122"+
    "\20\0\125\122\14\0\u026c\122\2\0\21\122\1\0\32\122\5\0\113\122"+
    "\3\0\3\122\17\0\15\122\1\0\4\122\3\123\13\0\22\122\3\123"+
    "\13\0\22\122\2\123\14\0\15\122\1\0\3\122\1\0\2\123\14\0"+
    "\64\122\40\123\3\0\1\122\3\0\2\122\1\123\2\0\12\123\41\0"+
    "\3\123\2\0\12\123\6\0\130\122\10\0\51\122\1\123\1\122\5\0"+
    "\106\122\12\0\35\122\3\0\14\123\4\0\14\123\12\0\12\123\36\122"+
    "\2\0\5\122\13\0\54\122\4\0\21\123\7\122\2\123\6\0\12\123"+
    "\46\0\27\122\5\123\4\0\65\122\12\123\1\0\35\123\2\0\13\123"+
    "\6\0\12\123\15\0\1\122\130\0\5\123\57\122\21\123\7\122\4\0"+
    "\12\123\21\0\11\123\14\0\3\123\36\122\15\123\2\122\12\123\54\122"+
    "\16\123\14\0\44\122\24\123\10\0\12\123\3\0\3\122\12\123\44\122"+
    "\122\0\3\123\1\0\25\123\4\122\1\123\4\122\3\123\2\122\11\0"+
    "\300\122\47\123\25\0\4\123\u0116\122\2\0\6\122\2\0\46\122\2\0"+
    "\6\122\2\0\10\122\1\0\1\122\1\0\1\122\1\0\1\122\1\0"+
    "\37\122\2\0\65\122\1\0\7\122\1\0\1\122\3\0\3\122\1\0"+
    "\7\122\3\0\4\122\2\0\6\122\4\0\15\122\5\0\3\122\1\0"+
    "\7\122\16\0\5\123\32\0\5\123\20\0\2\122\23\0\1\122\13\0"+
    "\5\123\5\0\6\123\1\0\1\122\15\0\1\122\20\0\15\122\3\0"+
    "\33\122\25\0\15\123\4\0\1\123\3\0\14\123\21\0\1\122\4\0"+
    "\1\122\2\0\12\122\1\0\1\122\3\0\5\122\6\0\1\122\1\0"+
    "\1\122\1\0\1\122\1\0\4\122\1\0\13\122\2\0\4\122\5\0"+
    "\5\122\4\0\1\122\21\0\51\122\u0361\0\1\77\u0295\0\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\0\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\u046d\0\57\122\1\0"+
    "\57\122\1\0\205\122\6\0\4\122\3\123\2\122\14\0\46\122\1\0"+
    "\1\122\5\0\1\122\2\0\70\122\7\0\1\122\17\0\1\123\27\122"+
    "\11\0\7\122\1\0\7\122\1\0\7\122\1\0\7\122\1\0\7\122"+
    "\1\0\7\122\1\0\7\122\1\0\7\122\1\0\40\123\57\0\1\122"+
    "\u01d5\0\3\122\31\0\11\122\6\123\1\0\5\122\2\0\5\122\4\0"+
    "\126\122\2\0\2\123\2\0\3\122\1\0\132\122\1\0\4\122\5\0"+
    "\51\122\3\0\136\122\21\0\33\122\65\0\20\122\u0200\0\u19b6\122\112\0"+
    "\u51cd\122\63\0\u048d\122\103\0\56\122\2\0\u010d\122\3\0\20\122\12\123"+
    "\2\122\24\0\57\122\1\123\4\0\12\123\1\0\31\122\7\0\1\123"+
    "\120\122\2\123\45\0\11\122\2\0\147\122\2\0\4\122\1\0\4\122"+
    "\14\0\13\122\115\0\12\122\1\123\3\122\1\123\4\122\1\123\27\122"+
    "\5\123\20\0\1\122\7\0\64\122\14\0\2\123\62\122\21\123\13\0"+
    "\12\123\6\0\22\123\6\122\3\0\1\122\4\0\12\123\34\122\10\123"+
    "\2\0\27\122\15\123\14\0\35\122\3\0\4\123\57\122\16\123\16\0"+
    "\1\122\12\123\46\0\51\122\16\123\11\0\3\122\1\123\10\122\2\123"+
    "\2\0\12\123\6\0\27\122\3\0\1\122\1\123\4\0\60\122\1\123"+
    "\1\122\3\123\2\122\2\123\5\122\2\123\1\122\1\123\1\122\30\0"+
    "\3\122\2\0\13\122\5\123\2\0\3\122\2\123\12\0\6\122\2\0"+
    "\6\122\2\0\6\122\11\0\7\122\1\0\7\122\221\0\43\122\10\123"+
    "\1\0\2\123\2\0\12\123\6\0\u2ba4\122\14\0\27\122\4\0\61\122"+
    "\u2104\0\u016e\122\2\0\152\122\46\0\7\122\14\0\5\122\5\0\1\122"+
    "\1\123\12\122\1\0\15\122\1\0\5\122\1\0\1\122\1\0\2\122"+
    "\1\0\2\122\1\0\154\122\41\0\u016b\122\22\0\100\122\2\0\66\122"+
    "\50\0\15\122\3\0\20\123\20\0\7\123\14\0\2\122\30\0\3\122"+
    "\31\0\1\122\6\0\5\122\1\0\207\122\2\0\1\123\4\0\1\122"+
    "\13\0\12\123\7\0\32\122\4\0\1\122\1\0\32\122\13\0\131\122"+
    "\3\0\6\122\2\0\6\122\2\0\6\122\2\0\3\122\3\0\2\122"+
    "\3\0\2\122\22\0\3\123\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\26\31\1\32\1\31\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\61\1\62\1\63\1\60\1\64\1\65"+
    "\1\66\1\0\1\67\1\70\1\71\1\72\1\73\1\72"+
    "\1\74\1\31\1\75\20\31\1\76\7\31\1\77\3\31"+
    "\1\74\15\31\1\100\1\0\3\101\1\102\2\0\1\103"+
    "\2\31\1\104\1\31\1\62\2\31\1\105\1\106\1\107"+
    "\1\110\1\31\1\111\4\31\1\112\1\31\1\113\1\31"+
    "\1\2\6\31\1\114\5\31\1\115\2\31\1\103\1\31"+
    "\1\116\2\31\1\117\4\31\1\120\1\121\1\122\3\31"+
    "\1\123\1\124\1\101\1\125\1\0\1\60\6\31\1\126"+
    "\1\31\1\127\2\31\1\130\1\131\1\132\1\133\1\134"+
    "\6\31\1\135\1\31\1\136\1\31\1\137\1\140\1\31"+
    "\1\141\1\142\1\31\1\143\1\31\1\144\1\145\3\31"+
    "\1\146\1\31\1\147\2\31\1\150\6\31\1\151\7\31"+
    "\1\152\1\153\1\154\6\31\1\155\3\31\1\156\2\31"+
    "\1\157\4\31\1\160\1\161\3\31\1\73\1\31\1\162"+
    "\1\163\1\31\1\164\1\132\4\31\1\165\3\31\1\141"+
    "\1\114\1\166\2\31\1\167";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\126\0\126\0\254\0\126\0\126\0\126"+
    "\0\u0102\0\126\0\u0158\0\u01ae\0\126\0\u0204\0\u025a\0\u02b0"+
    "\0\u0306\0\126\0\126\0\126\0\126\0\126\0\u035c\0\126"+
    "\0\126\0\u03b2\0\u0408\0\u045e\0\u04b4\0\u050a\0\u0560\0\u05b6"+
    "\0\u060c\0\u0662\0\u06b8\0\u070e\0\u0764\0\u07ba\0\u0810\0\u0866"+
    "\0\u08bc\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\126"+
    "\0\u0b16\0\126\0\126\0\126\0\126\0\126\0\126\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\126\0\126\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\u0b6c\0\126\0\u0bc2"+
    "\0\u0c18\0\126\0\126\0\u0c6e\0\126\0\u0cc4\0\126\0\u0d1a"+
    "\0\126\0\126\0\126\0\u0d70\0\126\0\126\0\126\0\u0dc6"+
    "\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076"+
    "\0\u10cc\0\u1122\0\u1178\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326"+
    "\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6"+
    "\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784\0\u07ba\0\u17da\0\u1830"+
    "\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u1ae0"+
    "\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90"+
    "\0\126\0\u1de6\0\u1e3c\0\126\0\u1e92\0\u1ee8\0\u07ba\0\u1f3e"+
    "\0\u07ba\0\u1f94\0\u1fea\0\u07ba\0\u07ba\0\u07ba\0\u07ba\0\u2040"+
    "\0\u07ba\0\u2096\0\u20ec\0\u2142\0\u2198\0\u07ba\0\u21ee\0\u07ba"+
    "\0\u2244\0\u07ba\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448"+
    "\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u07ba\0\u26a2"+
    "\0\u26f8\0\u07ba\0\u274e\0\u07ba\0\u27a4\0\u27fa\0\u07ba\0\u2850"+
    "\0\u28a6\0\u28fc\0\u2952\0\u07ba\0\u07ba\0\u07ba\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u1c38\0\u1d3a\0\u2aaa\0\u1d90\0\u2b00\0\u1de6\0\u2b56"+
    "\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u07ba\0\u2d5a\0\u07ba"+
    "\0\u2db0\0\u2e06\0\u07ba\0\u07ba\0\u2e5c\0\u07ba\0\u07ba\0\u2eb2"+
    "\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u07ba\0\u30b6\0\u07ba"+
    "\0\u310c\0\u07ba\0\u07ba\0\u3162\0\u31b8\0\u07ba\0\u320e\0\u07ba"+
    "\0\u3264\0\u07ba\0\u07ba\0\u32ba\0\u3310\0\u3366\0\u07ba\0\u33bc"+
    "\0\u07ba\0\u3412\0\u3468\0\u07ba\0\u34be\0\u3514\0\u356a\0\u35c0"+
    "\0\u3616\0\u366c\0\u07ba\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a"+
    "\0\u3870\0\u38c6\0\u07ba\0\u07ba\0\u07ba\0\u391c\0\u3972\0\u39c8"+
    "\0\u3a1e\0\u3a74\0\u3aca\0\u07ba\0\u3b20\0\u3b76\0\u3bcc\0\u07ba"+
    "\0\u3c22\0\u3c78\0\u07ba\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u07ba"+
    "\0\u07ba\0\u3e26\0\u3e7c\0\u3ed2\0\u07ba\0\u3f28\0\u07ba\0\u07ba"+
    "\0\u3f7e\0\u07ba\0\u07ba\0\u3fd4\0\u402a\0\u4080\0\u40d6\0\u07ba"+
    "\0\u412c\0\u4182\0\u41d8\0\u07ba\0\u07ba\0\u07ba\0\u422e\0\u4284"+
    "\0\u07ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\46\1\50"+
    "\1\51\2\46\1\52\1\53\1\54\1\55\2\46\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\2\1\107\1\46\1\110\2\46\2\111\1\46\1\2"+
    "\2\107\131\0\1\112\131\0\1\113\127\0\1\114\1\115"+
    "\125\0\1\116\4\0\1\117\114\0\1\120\5\0\1\114"+
    "\123\0\1\121\2\0\1\15\125\0\1\122\1\123\1\124"+
    "\120\0\1\125\3\0\1\126\134\0\1\127\130\0\1\46"+
    "\1\130\1\131\3\46\1\132\1\133\15\46\1\134\5\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\135\1\136\20\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\137\1\140\2\46\1\141\1\46"+
    "\1\142\13\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\4\46\1\143\6\46\1\144\17\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\11\46\1\145\1\146"+
    "\20\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\13\46\1\147\17\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\150\5\46\1\151\13\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\17\46\1\152"+
    "\13\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\15\46\1\153\15\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\6\46\1\154\1\155\11\46\1\156\1\46"+
    "\1\157\7\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\160\23\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\161\15\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\33\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\7\46\1\162\1\163"+
    "\7\46\1\164\4\46\1\165\5\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\4\46\1\166\2\46\1\167"+
    "\14\46\1\170\6\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\17\46\1\171\13\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\1\172\32\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\1\173\3\46\1\174"+
    "\26\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\1\175\11\46\1\176\4\46\1\177\13\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\7\46\1\200\23\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\201\27\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\15\46\1\202\15\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\203\15\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\2\0\111\106\1\204\1\205"+
    "\13\106\30\0\1\206\1\207\17\206\1\210\11\206\1\0"+
    "\1\206\24\0\1\206\2\0\1\206\1\111\2\206\2\111"+
    "\34\0\33\206\1\0\1\206\24\0\1\206\2\0\1\206"+
    "\1\111\2\206\2\111\4\0\113\114\1\107\10\114\1\107"+
    "\1\114\12\0\1\211\113\0\6\212\1\213\117\212\12\0"+
    "\1\214\143\0\2\46\1\215\30\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\2\46\1\216\30\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\6\46\1\217"+
    "\23\46\1\220\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\10\46\1\221\22\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\222\27\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\25\46\1\223\5\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\224\27\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\225\23\46\1\226\3\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\20\46\1\227\12\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\230\20\46\1\231\2\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\20\46\1\232\12\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\15\46\1\233\15\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\15\46"+
    "\1\234\15\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\6\46\1\235\24\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\236\23\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\11\46\1\237\21\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\240\27\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\241\23\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\242\3\46\1\243\23\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\2\46"+
    "\1\244\30\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\245\30\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\12\46\1\246\20\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\1\247\2\46\1\250"+
    "\7\46\1\251\10\46\1\252\6\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\253\21\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\3\46\1\254"+
    "\11\46\1\255\15\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\2\46\1\256\30\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\257\27\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\11\46\1\260"+
    "\21\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\24\46\1\261\6\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\25\46\1\262\5\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\5\46\1\263\3\46\1\264"+
    "\21\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\265\21\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\10\46\1\266\22\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\4\46\1\267\26\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\4\46\1\270"+
    "\26\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\271\3\46\1\272\15\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\5\46\1\273\25\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\7\46\1\274"+
    "\23\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\4\46\1\275\26\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\276\27\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\4\46\1\277\26\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\3\46\1\300"+
    "\27\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\20\46\1\301\12\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\33\302\1\0\1\302\24\0\1\302\2\0"+
    "\6\302\4\0\113\106\1\0\12\106\30\0\33\206\1\0"+
    "\1\206\24\0\1\206\2\0\6\206\34\0\33\206\1\0"+
    "\1\206\24\0\1\206\2\0\1\206\2\303\1\206\1\303"+
    "\1\206\34\0\2\304\3\206\1\304\2\206\2\304\13\206"+
    "\1\304\5\206\1\0\1\206\24\0\1\206\2\0\1\206"+
    "\1\304\1\305\3\304\4\0\6\212\1\306\125\212\1\306"+
    "\5\212\1\307\111\212\30\0\3\46\1\310\27\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\11\46\1\311"+
    "\21\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\1\312\32\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\313\21\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\314\13\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\5\46\1\315\25\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\316\21\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\30\46\1\317\2\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\320\30\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\11\46\1\321\21\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\322\25\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\323\21\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\324\21\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\16\46\1\325\14\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\326\21\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\327\12\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\330\25\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\11\46\1\331\21\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\1\332"+
    "\32\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\333\21\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\7\46\1\334\23\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\15\46\1\335\15\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\23\46\1\336"+
    "\7\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\337\27\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\7\46\1\340\23\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\6\46\1\341\24\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\11\46\1\342"+
    "\21\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\343\23\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\12\46\1\344\20\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\345\27\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\10\46\1\346"+
    "\22\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\23\46\1\347\7\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\350\27\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\15\46\1\351\15\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\13\46\1\352"+
    "\17\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\353\21\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\2\305\3\206\1\305\2\206\2\305\13\206"+
    "\1\305\5\206\1\0\1\206\24\0\1\206\2\0\1\206"+
    "\1\305\1\206\3\305\4\0\6\212\1\306\5\212\1\107"+
    "\111\212\30\0\4\46\1\354\26\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\4\46\1\355\26\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\22\46\1\356"+
    "\10\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\4\46\1\357\26\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\4\46\1\360\26\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\361\21\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\30\46\1\362"+
    "\2\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\1\363\32\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\14\46\1\364\16\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\365\13\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\3\46\1\366\27\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\367\23\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\12\46\1\370\20\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\371\25\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\3\46\1\372\27\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\6\46"+
    "\1\373\24\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\17\46\1\374\13\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\375\15\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\6\46\1\376\24\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\15\46"+
    "\1\377\15\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\1\u0100\32\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\7\46\1\u0101\23\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\1\u0102\32\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\3\46\1\u0103\27\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\2\46"+
    "\1\u0104\30\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\u0105\21\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\u0106\21\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\2\46\1\u0107\30\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\15\46"+
    "\1\u0108\15\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\6\46\1\u0109\24\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\10\46\1\u010a\22\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\2\46\1\u010b\30\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\u010c\27\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\12\46\1\u010d\20\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\u010e\26\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\11\46\1\u010f\21\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\u0110\21\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\u0111\27\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\u0112\27\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\30\46\1\u0113\2\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\u0114\25\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\4\46\1\u0115\26\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\u0116\21\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\7\46\1\u0117\23\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\22\46"+
    "\1\u0118\10\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\u0119\30\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\u011a\27\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\1\u011b\32\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\15\46\1\u011c"+
    "\15\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\2\46\1\u011d\30\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\15\46\1\u011e\15\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\u011f\21\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\3\46\1\u0120"+
    "\27\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\u0121\21\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\2\46\1\u0122\30\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\u0123\27\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\15\46\1\u0124"+
    "\15\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\6\46\1\u0125\24\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\5\46\1\u0126\25\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\17\46\1\u0127\13\46\1\0"+
    "\1\46\24\0\1\46\2\0\10\46\32\0\10\46\1\u0128"+
    "\22\46\1\0\1\46\24\0\1\46\2\0\10\46\32\0"+
    "\23\46\1\u0129\7\46\1\0\1\46\24\0\1\46\2\0"+
    "\10\46\32\0\6\46\1\u012a\24\46\1\0\1\46\24\0"+
    "\1\46\2\0\10\46\32\0\1\u012b\32\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\7\46\1\u012c\23\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\u012d\21\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\32\0\22\46\1\u012e\10\46\1\0\1\46\24\0\1\46"+
    "\2\0\10\46\32\0\6\46\1\u012f\24\46\1\0\1\46"+
    "\24\0\1\46\2\0\10\46\32\0\6\46\1\u0130\24\46"+
    "\1\0\1\46\24\0\1\46\2\0\10\46\32\0\22\46"+
    "\1\u0131\10\46\1\0\1\46\24\0\1\46\2\0\10\46"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17114];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\26\1\1\11\1\1\24\11"+
    "\1\1\1\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\0\3\11\1\1\3\11\55\1\1\0\3\1\1\11"+
    "\2\0\1\11\71\1\1\0\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currently only supports\nthree escape sequences: \\\\, \\n, and \\\""); // [HASLab] protect primes
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2310) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 120: break;
        case 84: 
          { return alloy_binarynum (yytext());
          }
        case 121: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 122: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 123: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 124: break;
        case 119: 
          { return alloy_sym(yytext(), CompSym.HISTORICALLY);
          }
        case 125: break;
        case 117: 
          { return alloy_sym(yytext(), CompSym.TRIGGERED   );
          }
        case 126: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.VAR         );
          }
        case 127: break;
        case 112: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 128: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 129: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 130: break;
        case 29: 
          { return alloy_sym(yytext(), CompSym.PFEAT2      );
          }
        case 131: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 132: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 133: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 134: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.PFEAT0      );
          }
        case 135: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 136: break;
        case 116: 
          { return alloy_sym(yytext(), CompSym.RELEASES    );
          }
        case 137: break;
        case 101: 
          { return alloy_sym(yytext(), CompSym.TIME        );
          }
        case 138: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 139: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 140: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 141: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 142: break;
        case 45: 
          { return alloy_sym(yytext(), CompSym.NFEAT8      );
          }
        case 143: break;
        case 111: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 144: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 145: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 146: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 147: break;
        case 98: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 148: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 149: break;
        case 103: 
          { return alloy_sym(yytext(), CompSym.SINCE       );
          }
        case 150: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 151: break;
        case 62: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 152: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 153: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 154: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 155: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.NFEAT6      );
          }
        case 156: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 157: break;
        case 102: 
          { return alloy_sym(yytext(), CompSym.AFTER       );
          }
        case 158: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 159: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.NFEAT4      );
          }
        case 160: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 161: break;
        case 64: 
          { return alloy_string(yytext());
          }
        case 162: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.PFEAT9      );
          }
        case 163: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 164: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.NFEAT2      );
          }
        case 165: break;
        case 27: 
          { return alloy_sym(yytext(), CompSym.PRIME       );
          }
        case 166: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 167: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.PFEAT7      );
          }
        case 168: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.PFEAT5      );
          }
        case 169: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 170: break;
        case 114: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 171: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 172: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 173: break;
        case 100: 
          { return alloy_sym(yytext(), CompSym.WITH        );
          }
        case 174: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 175: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 176: break;
        case 26: 
          { return alloy_sym(yytext(), CompSym.TRCSEQ      );
          }
        case 177: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 178: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 179: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 180: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 181: break;
        case 109: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 182: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 183: break;
        case 105: 
          { return alloy_sym(yytext(), CompSym.UNTIL       );
          }
        case 184: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 185: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 186: break;
        case 30: 
          { return alloy_sym(yytext(), CompSym.PFEAT3      );
          }
        case 187: break;
        case 96: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 188: break;
        case 107: 
          { return alloy_sym(yytext(), CompSym.ALWAYS      );
          }
        case 189: break;
        case 85: 
          { return alloy_hexnum (yytext());
          }
        case 190: break;
        case 28: 
          { return alloy_sym(yytext(), CompSym.PFEAT1      );
          }
        case 191: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 192: break;
        case 110: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 193: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 194: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 195: break;
        case 97: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 196: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 197: break;
        case 113: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 198: break;
        case 47: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 199: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 200: break;
        case 49: 
          { return alloy_num (yytext());
          }
        case 201: break;
        case 46: 
          { return alloy_sym(yytext(), CompSym.NFEAT9      );
          }
        case 202: break;
        case 95: 
          { return alloy_sym(yytext(), CompSym.ONCE        );
          }
        case 203: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 204: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 205: break;
        case 44: 
          { return alloy_sym(yytext(), CompSym.NFEAT7      );
          }
        case 206: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 207: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 208: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 209: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 210: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 211: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 212: break;
        case 108: 
          { return alloy_sym(yytext(), CompSym.BEFORE      );
          }
        case 213: break;
        case 118: 
          { return alloy_sym(yytext(), CompSym.EVENTUALLY  );
          }
        case 214: break;
        case 63: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 215: break;
        case 104: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 216: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 217: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.NFEAT5      );
          }
        case 218: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 219: break;
        case 99: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 220: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.NFEAT3      );
          }
        case 221: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 222: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 223: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 224: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 225: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 226: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 227: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.PFEAT8      );
          }
        case 228: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 229: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.NFEAT1      );
          }
        case 230: break;
        case 115: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 231: break;
        case 106: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 232: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.PFEAT6      );
          }
        case 233: break;
        case 83: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 234: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 235: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.PFEAT4      );
          }
        case 236: break;
        case 48: 
          { 
          }
        case 237: break;
        case 65: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 238: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
