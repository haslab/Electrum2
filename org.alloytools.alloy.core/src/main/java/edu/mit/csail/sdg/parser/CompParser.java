
//----------------------------------------------------
// The following code was generated by CUP v0.11a czt01 beta
// Thu Nov 21 23:28:01 WET 2019
//----------------------------------------------------

package edu.mit.csail.sdg.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import org.alloytools.alloy.core.AlloyCore;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.Attr.AttrType;
import edu.mit.csail.sdg.ast.Browsable;
import edu.mit.csail.sdg.ast.CommandScope;
import edu.mit.csail.sdg.ast.Decl;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.ast.ExprBadJoin;
import edu.mit.csail.sdg.ast.ExprITE;
import edu.mit.csail.sdg.ast.ExprLet;
import edu.mit.csail.sdg.ast.ExprBinary;
import edu.mit.csail.sdg.ast.ExprList;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprQt;
import edu.mit.csail.sdg.ast.ExprUnary;
import edu.mit.csail.sdg.ast.ExprVar;
import edu.mit.csail.sdg.ast.FeatureScope;
import edu.mit.csail.sdg.ast.Func;
import edu.mit.csail.sdg.ast.Sig;
import edu.mit.csail.sdg.ast.Sig.PrimSig;

/** CUP v0.11a czt01 beta generated parser.
  * @version Thu Nov 21 23:28:01 WET 2019
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\002\106\003\000\002\002\004\000\002\107" +
    "\005\000\002\107\010\000\002\107\006\000\002\107\010" +
    "\000\002\107\011\000\002\107\013\000\002\107\011\000" +
    "\002\107\010\000\002\107\005\000\002\107\006\000\002" +
    "\107\006\000\002\107\005\000\002\107\006\000\002\107" +
    "\006\000\002\107\004\000\002\107\004\000\002\107\004" +
    "\000\002\107\004\000\002\107\004\000\002\107\002\000" +
    "\002\013\003\000\002\013\003\000\002\012\010\000\002" +
    "\012\007\000\002\012\012\000\002\012\011\000\002\012" +
    "\010\000\002\012\007\000\002\012\012\000\002\012\011" +
    "\000\002\027\002\000\002\027\004\000\002\115\005\000" +
    "\002\115\004\000\002\115\002\000\002\075\004\000\002" +
    "\075\006\000\002\075\004\000\002\075\002\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\114\005\000\002\114\005\000\002\114\005\000\002\114" +
    "\005\000\002\114\005\000\002\114\005\000\002\114\005" +
    "\000\002\114\005\000\002\114\005\000\002\114\005\000" +
    "\002\114\005\000\002\114\005\000\002\114\005\000\002" +
    "\114\005\000\002\114\005\000\002\113\003\000\002\113" +
    "\005\000\002\112\004\000\002\112\004\000\002\112\004" +
    "\000\002\112\004\000\002\112\004\000\002\112\004\000" +
    "\002\112\004\000\002\111\004\000\002\111\007\000\002" +
    "\111\011\000\002\111\006\000\002\111\003\000\002\111" +
    "\006\000\002\111\010\000\002\111\005\000\002\051\011" +
    "\000\002\051\010\000\002\051\011\000\002\051\010\000" +
    "\002\051\006\000\002\052\003\000\002\052\004\000\002" +
    "\037\013\000\002\037\013\000\002\037\010\000\002\037" +
    "\015\000\002\037\015\000\002\037\012\000\002\067\011" +
    "\000\002\067\011\000\002\067\006\000\002\067\013\000" +
    "\002\067\013\000\002\067\010\000\002\126\002\000\002" +
    "\126\003\000\002\076\011\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\101\003\000\002\101\004\000\002\077\004\000" +
    "\002\077\004\000\002\077\004\000\002\077\002\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\005\000\002\102\003\000\002\104\002" +
    "\000\002\104\003\000\002\103\003\000\002\103\005\000" +
    "\002\105\003\000\002\105\005\000\002\053\003\000\002" +
    "\053\005\000\002\053\005\000\002\054\003\000\002\054" +
    "\005\000\002\055\003\000\002\055\005\000\002\056\003" +
    "\000\002\056\004\000\002\056\005\000\002\056\006\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\014\007\000\002\014\006" +
    "\000\002\014\005\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\010\000\002\014\007\000\002" +
    "\014\006\000\002\015\003\000\002\015\006\000\002\015" +
    "\006\000\002\015\006\000\002\015\007\000\002\015\006" +
    "\000\002\015\005\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\010\000\002\015\007\000\002" +
    "\015\006\000\002\020\005\000\002\020\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\002\000\002\017\003" +
    "\000\002\017\005\000\002\017\004\000\002\050\006\000" +
    "\002\050\007\000\002\032\002\000\002\032\003\000\002" +
    "\031\005\000\002\031\004\000\002\033\003\000\002\033" +
    "\004\000\002\034\004\000\002\034\003\000\002\035\002" +
    "\000\002\035\003\000\002\036\003\000\002\036\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\063\003\000\002\063\005\000\002\064\003\000" +
    "\002\064\005\000\002\025\003\000\002\025\005\000\002" +
    "\026\003\000\002\026\005\000\002\040\003\000\002\040" +
    "\003\000\002\042\003\000\002\042\007\000\002\044\007" +
    "\000\002\044\005\000\002\042\007\000\002\044\005\000" +
    "\002\041\003\000\002\041\003\000\002\043\003\000\002" +
    "\043\007\000\002\045\007\000\002\045\005\000\002\002" +
    "\003\000\002\002\005\000\002\003\003\000\002\003\005" +
    "\000\002\057\003\000\002\057\004\000\002\057\004\000" +
    "\002\060\003\000\002\060\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\003\000\002" +
    "\116\003\000\002\116\005\000\002\116\005\000\002\116" +
    "\005\000\002\117\003\000\002\117\005\000\002\117\005" +
    "\000\002\117\005\000\002\122\003\000\002\122\005\000" +
    "\002\122\005\000\002\122\005\000\002\122\005\000\002" +
    "\123\003\000\002\123\005\000\002\123\005\000\002\123" +
    "\005\000\002\123\005\000\002\120\003\000\002\120\005" +
    "\000\002\120\005\000\002\120\005\000\002\121\003\000" +
    "\002\121\005\000\002\121\005\000\002\121\005\000\002" +
    "\061\003\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\062\003\000\002\062\004\000\002\062\004\000" +
    "\002\062\004\000\002\065\003\000\002\065\005\000\002" +
    "\066\003\000\002\066\005\000\002\046\003\000\002\046" +
    "\005\000\002\047\003\000\002\047\005\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\073\003\000" +
    "\002\073\005\000\002\074\003\000\002\074\005\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\070\003\000\002\070\005\000\002\071\003" +
    "\000\002\071\005\000\002\006\003\000\002\007\003\000" +
    "\002\007\006\000\002\007\006\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\124\004\000\002\124\004\000\002\124\004\000\002" +
    "\124\004\000\002\124\004\000\002\124\004\000\002\125" +
    "\003\000\002\125\004\000\002\125\004\000\002\125\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\006\000\002\004\005" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0365\000\002\001\uffec\000\004\002\u0367\001\002\000" +
    "\032\002\001\035\026\043\010\050\017\065\016\104\006" +
    "\111\021\125\027\134\012\141\024\147\013\153\030\001" +
    "\uff8e\000\002\001\uff8a\000\002\001\uffef\000\014\100\305" +
    "\142\053\160\046\207\043\211\u0363\001\002\000\002\001" +
    "\uffee\000\014\057\uff8d\067\uff8d\102\uff8d\126\uff8d\133\uff8d" +
    "\001\uff87\000\002\001\uff86\000\012\100\305\142\053\160" +
    "\046\207\043\001\002\000\002\001\ufff0\000\014\100\305" +
    "\142\053\160\046\207\043\211\u034e\001\002\000\002\001" +
    "\uffeb\000\002\001\ufff1\000\010\142\053\160\046\207\043" +
    "\001\002\000\016\035\026\104\006\125\027\134\u0341\147" +
    "\013\153\030\001\002\000\010\142\053\160\046\207\043" +
    "\001\002\000\002\001\uffea\000\004\075\u02d0\001\uffed\000" +
    "\002\001\uff8b\000\002\001\uff89\000\002\001\uff88\000\014" +
    "\057\032\067\036\102\033\126\035\133\034\001\002\000" +
    "\010\142\053\160\046\207\043\001\002\000\010\142\053" +
    "\160\046\207\043\001\002\000\020\114\045\142\041\150" +
    "\047\155\040\160\046\162\044\207\043\001\002\000\010" +
    "\142\053\160\046\207\043\001\002\000\020\114\045\142" +
    "\041\150\047\155\040\160\046\162\044\207\043\001\002" +
    "\000\010\051\u0289\101\u028b\105\u028a\001\uff80\000\002\001" +
    "\uff7e\000\004\151\u0149\001\002\000\004\151\056\001\uff74" +
    "\000\002\001\uff71\000\002\001\uff7f\000\002\001\uff7b\000" +
    "\004\151\u0153\001\002\000\002\001\uff7d\000\004\055\051" +
    "\001\002\000\010\142\053\160\046\207\043\001\002\000" +
    "\010\051\060\101\062\105\061\001\002\000\004\151\054" +
    "\001\002\000\004\207\043\001\002\000\004\151\056\001" +
    "\uff72\000\004\207\057\001\002\000\002\001\uff70\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\066\052" +
    "\106\053\065\062\111\130\116\134\064\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\uff3a\000\066\052\106\053\065\062\111\130\116\134\064" +
    "\142\053\160\046\164\114\165\113\166\112\167\110\170" +
    "\107\171\105\172\104\173\103\174\101\175\077\176\076" +
    "\177\075\200\074\201\073\202\072\203\071\204\070\205" +
    "\066\207\043\001\uff3a\000\004\137\u027e\001\002\000\012" +
    "\053\u0273\142\053\160\046\207\043\001\002\000\010\142" +
    "\053\160\046\207\043\001\002\000\064\053\u0217\062\u01e0" +
    "\130\u01e1\134\u01f0\142\053\160\046\164\114\165\113\166" +
    "\112\167\110\170\107\171\105\172\104\173\103\174\101" +
    "\175\077\176\076\177\075\200\074\201\073\202\072\203" +
    "\071\204\070\205\066\207\043\001\002\000\002\001\uff6f" +
    "\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053\160" +
    "\046\164\114\165\113\166\112\167\110\170\107\171\105" +
    "\172\104\173\103\174\101\175\077\176\076\177\075\200" +
    "\074\201\073\202\072\203\071\204\070\205\066\207\043" +
    "\001\002\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142" +
    "\053\160\046\164\114\165\113\166\112\167\110\170\107" +
    "\171\105\172\104\173\103\174\101\175\077\176\076\177" +
    "\075\200\074\201\073\202\072\203\071\204\070\205\066" +
    "\207\043\001\002\000\064\053\u0217\062\u01e0\130\u01e1\134" +
    "\u01f0\142\053\160\046\164\114\165\113\166\112\167\110" +
    "\170\107\171\105\172\104\173\103\174\101\175\077\176" +
    "\076\177\075\200\074\201\073\202\072\203\071\204\070" +
    "\205\066\207\043\001\002\000\064\053\u0217\062\u01e0\130" +
    "\u01e1\134\u01f0\142\053\160\046\164\114\165\113\166\112" +
    "\167\110\170\107\171\105\172\104\173\103\174\101\175" +
    "\077\176\076\177\075\200\074\201\073\202\072\203\071" +
    "\204\070\205\066\207\043\001\002\000\064\053\u0217\062" +
    "\u01e0\130\u01e1\134\u01f0\142\053\160\046\164\114\165\113" +
    "\166\112\167\110\170\107\171\105\172\104\173\103\174" +
    "\101\175\077\176\076\177\075\200\074\201\073\202\072" +
    "\203\071\204\070\205\066\207\043\001\002\000\064\053" +
    "\u0217\062\u01e0\130\u01e1\134\u01f0\142\053\160\046\164\114" +
    "\165\113\166\112\167\110\170\107\171\105\172\104\173" +
    "\103\174\101\175\077\176\076\177\075\200\074\201\073" +
    "\202\072\203\071\204\070\205\066\207\043\001\002\000" +
    "\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\002\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053" +
    "\160\046\164\114\165\113\166\112\167\110\170\107\171" +
    "\105\172\104\173\103\174\101\175\077\176\076\177\075" +
    "\200\074\201\073\202\072\203\071\204\070\205\066\207" +
    "\043\001\002\000\004\052\u026c\001\uff39\000\064\053\u0217" +
    "\062\u01e0\130\u01e1\134\u01f0\142\053\160\046\164\114\165" +
    "\113\166\112\167\110\170\107\171\105\172\104\173\103" +
    "\174\101\175\077\176\076\177\075\200\074\201\073\202" +
    "\072\203\071\204\070\205\066\207\043\001\002\000\002" +
    "\001\uff4b\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142" +
    "\053\160\046\164\114\165\113\166\112\167\110\170\107" +
    "\171\105\172\104\173\103\174\101\175\077\176\076\177" +
    "\075\200\074\201\073\202\072\203\071\204\070\205\066" +
    "\207\043\001\002\000\064\053\u0217\062\u01e0\130\u01e1\134" +
    "\u01f0\142\053\160\046\164\114\165\113\166\112\167\110" +
    "\170\107\171\105\172\104\173\103\174\101\175\077\176" +
    "\076\177\075\200\074\201\073\202\072\203\071\204\070" +
    "\205\066\207\043\001\002\000\064\053\u0217\062\u01e0\130" +
    "\u01e1\134\u01f0\142\053\160\046\164\114\165\113\166\112" +
    "\167\110\170\107\171\105\172\104\173\103\174\101\175" +
    "\077\176\076\177\075\200\074\201\073\202\072\203\071" +
    "\204\070\205\066\207\043\001\002\000\066\052\106\053" +
    "\065\062\111\130\116\134\064\142\053\160\046\164\114" +
    "\165\113\166\112\167\110\170\107\171\105\172\104\173" +
    "\103\174\101\175\077\176\076\177\075\200\074\201\073" +
    "\202\072\203\071\204\070\205\066\207\043\001\uff3a\000" +
    "\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\002\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053" +
    "\160\046\164\114\165\113\166\112\167\110\170\107\171" +
    "\105\172\104\173\103\174\101\175\077\176\076\177\075" +
    "\200\074\201\073\202\072\203\071\204\070\205\066\207" +
    "\043\001\002\000\010\142\053\160\046\207\043\001\002" +
    "\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142\053\160" +
    "\046\164\114\165\113\166\112\167\110\170\107\171\105" +
    "\172\104\173\103\174\101\175\077\176\076\177\075\200" +
    "\074\201\073\202\072\203\071\204\070\205\066\207\043" +
    "\001\002\000\064\053\u0217\062\u01e0\130\u01e1\134\u01f0\142" +
    "\053\160\046\164\114\165\113\166\112\167\110\170\107" +
    "\171\105\172\104\173\103\174\101\175\077\176\076\177" +
    "\075\200\074\201\073\202\072\203\071\204\070\205\066" +
    "\207\043\001\002\000\064\053\u0217\062\u01e0\130\u01e1\134" +
    "\u01f0\142\053\160\046\164\114\165\113\166\112\167\110" +
    "\170\107\171\105\172\104\173\103\174\101\175\077\176" +
    "\076\177\075\200\074\201\073\202\072\203\071\204\070" +
    "\205\066\207\043\001\002\000\010\051\u0219\052\120\060" +
    "\u0262\001\002\000\010\142\053\160\046\207\043\001\002" +
    "\000\010\051\122\052\120\060\121\001\002\000\010\142" +
    "\053\160\046\207\043\001\002\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\u025f\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\162\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\221" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\010\142\053\160\046\207\043" +
    "\001\002\000\002\001\uff18\000\002\001\uff1a\000\002\001" +
    "\uff26\000\162\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\006\041\u0254\075\u0253\001\uff0c\000\162\031\152\032" +
    "\176\033\202\034\203\036\156\037\226\044\123\047\253" +
    "\053\267\072\263\073\150\077\217\100\157\102\260\103" +
    "\247\104\205\105\161\112\204\113\255\114\045\115\166" +
    "\124\145\125\207\142\232\143\231\150\047\152\213\153" +
    "\250\154\214\155\040\156\230\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\002\001\uff14\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\162\031" +
    "\152\032\176\033\202\034\203\036\156\037\226\044\123" +
    "\047\253\053\267\072\263\073\150\077\217\100\157\102" +
    "\260\103\247\104\205\105\161\112\204\113\255\114\045" +
    "\115\166\124\145\125\207\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\162\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\162\031\152\032" +
    "\176\033\202\034\203\036\156\037\226\044\123\047\253" +
    "\053\267\072\263\073\150\077\217\100\157\102\260\103" +
    "\247\104\205\105\161\112\204\113\255\114\045\115\166" +
    "\124\145\125\207\142\232\143\231\150\047\152\213\153" +
    "\250\154\214\155\040\156\230\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\162\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\044\004\u010b\005\u0100\006\u010c\007" +
    "\u0106\010\u0107\011\u010e\012\u0109\013\u0103\014\u010f\015\u0105" +
    "\016\u0102\017\u0108\020\u0101\021\u010a\022\u0104\023\u0110\054" +
    "\u024f\001\ufe98\000\002\001\ufe9a\000\002\001\ufec1\000\064" +
    "\053\065\062\111\130\116\134\064\142\053\160\046\164" +
    "\114\165\113\166\112\167\110\170\107\171\105\172\104" +
    "\173\103\174\101\175\077\176\076\177\075\200\074\201" +
    "\073\202\072\203\071\204\070\205\066\207\043\001\002" +
    "\000\002\001\ufec5\000\004\132\u024b\001\ufeb6\000\002\001" +
    "\ufe73\000\002\001\ufebd\000\002\001\ufe71\000\146\031\152" +
    "\032\176\033\202\034\203\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\101\344\102\260" +
    "\103\247\105\161\112\204\114\045\124\145\142\041\150" +
    "\047\152\213\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\002\001\uff06" +
    "\000\002\001\uff08\000\126\031\152\032\176\033\202\034" +
    "\203\044\123\047\253\053\267\072\263\073\150\077\217" +
    "\100\157\105\161\114\045\142\041\150\047\154\214\155" +
    "\040\157\153\160\223\161\167\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\172\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\u01e4\062\u01e0\072\263\073" +
    "\150\077\217\100\157\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\130" +
    "\u01e1\134\u01f0\136\311\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db" +
    "\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177" +
    "\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6" +
    "\207\043\210\201\211\171\001\002\000\002\001\uff57\000" +
    "\162\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\102\260\103\247\104\205\105\161\112\204\113\255" +
    "\114\045\115\166\124\145\125\207\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\004" +
    "\135\u01d3\001\ufe94\000\002\001\ufe96\000\006\055\u01d1\101" +
    "\347\001\ufe90\000\002\001\ufe92\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\132\031\152\032\176\033" +
    "\202\037\226\044\123\047\253\073\150\100\157\102\260" +
    "\103\247\105\161\112\204\114\045\124\145\142\041\150" +
    "\047\152\213\154\214\155\040\156\230\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\002\001\ufe5b\000\002" +
    "\001\ufe74\000\010\144\u0120\145\u011e\146\u011f\001\ufed8\000" +
    "\002\001\ufeec\000\032\060\u01b3\070\u01b1\071\u01ac\076\u01ab" +
    "\106\u01b4\107\u01ad\116\u01aa\117\u01af\120\u01ae\121\u01a9\122" +
    "\u01b2\123\u01b0\001\uff01\000\002\001\uff04\000\002\001\ufe70" +
    "\000\004\127\u01a5\001\uff27\000\002\001\uff28\000\002\001" +
    "\ufe75\000\002\001\ufe6f\000\004\101\u01a2\001\002\000\064" +
    "\053\065\062\111\130\116\134\064\142\053\160\046\164" +
    "\114\165\113\166\112\167\110\170\107\171\105\172\104" +
    "\173\103\174\101\175\077\176\076\177\075\200\074\201" +
    "\073\202\072\203\071\204\070\205\066\207\043\001\002" +
    "\000\126\031\152\032\176\033\202\034\203\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\105\161" +
    "\114\045\142\041\150\047\154\214\155\040\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\004\074" +
    "\u0164\001\uff1c\000\126\031\152\032\176\033\202\034\203" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\105\161\114\045\142\041\150\047\154\214\155\040" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\002\001\uff1e\000\002\001\ufeac\000\002\001\ufeae\000" +
    "\064\053\065\062\111\130\116\134\064\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\002\000\132\031\152\032\176\033\202\037\226\044\123" +
    "\047\253\073\150\100\157\102\260\103\247\105\161\112" +
    "\204\114\045\124\145\142\041\150\047\152\213\154\214" +
    "\155\040\156\230\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\002\001\ufe85\000\002\001\ufe87\000\146\031" +
    "\152\032\176\033\202\034\203\037\226\044\123\047\253" +
    "\053\267\072\263\073\150\077\217\100\157\101\360\102" +
    "\260\103\247\105\161\112\204\114\045\124\145\142\041" +
    "\150\047\152\213\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\ufe79\000\164\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\101\270\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\142" +
    "\232\143\231\150\047\152\213\153\250\154\214\155\040" +
    "\156\230\157\153\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\010\026\u0155\027\u0157\030\u0156\001\ufeca\000" +
    "\004\151\u0153\001\ufe72\000\002\001\ufecf\000\004\040\u0151" +
    "\001\ufeb0\000\064\053\065\062\111\130\116\134\064\142" +
    "\053\160\046\164\114\165\113\166\112\167\110\170\107" +
    "\171\105\172\104\173\103\174\101\175\077\176\076\177" +
    "\075\200\074\201\073\202\072\203\071\204\070\205\066" +
    "\207\043\001\002\000\002\001\ufeb2\000\064\053\065\062" +
    "\111\130\116\134\064\142\053\160\046\164\114\165\113" +
    "\166\112\167\110\170\107\171\105\172\104\173\103\174" +
    "\101\175\077\176\076\177\075\200\074\201\073\202\072" +
    "\203\071\204\070\205\066\207\043\001\002\000\126\031" +
    "\152\032\176\033\202\034\203\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\105\161\114\045\142" +
    "\041\150\047\154\214\155\040\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\130\031\152\032\176" +
    "\033\202\034\203\044\123\047\253\053\267\072\263\073" +
    "\150\077\217\100\157\105\161\114\045\142\041\150\047" +
    "\151\u0149\154\214\155\040\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\162\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\002\001\uff80\000\162\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\162\031\152\032" +
    "\176\033\202\034\203\036\156\037\226\044\123\047\253" +
    "\053\267\072\263\073\150\077\217\100\157\102\260\103" +
    "\247\104\205\105\161\112\204\113\255\114\045\115\166" +
    "\124\145\125\207\142\232\143\231\150\047\152\213\153" +
    "\250\154\214\155\040\156\230\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\162\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\162\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\267\072\263" +
    "\073\150\077\217\100\157\102\260\103\247\104\205\105" +
    "\161\112\204\113\255\114\045\115\166\124\145\125\207" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\002\001\ufe8d\000\002\001\ufe8e\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\162\031" +
    "\152\032\176\033\202\034\203\036\156\037\226\044\123" +
    "\047\253\053\267\072\263\073\150\077\217\100\157\102" +
    "\260\103\247\104\205\105\161\112\204\113\255\114\045" +
    "\115\166\124\145\125\207\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\064\053\065" +
    "\062\111\130\116\134\064\142\053\160\046\164\114\165" +
    "\113\166\112\167\110\170\107\171\105\172\104\173\103" +
    "\174\101\175\077\176\076\177\075\200\074\201\073\202" +
    "\072\203\071\204\070\205\066\207\043\001\002\000\126" +
    "\031\152\032\176\033\202\034\203\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\105\161\114\045" +
    "\142\041\150\047\154\214\155\040\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\002\001\uff0e\000" +
    "\002\001\uff16\000\132\031\152\032\176\033\202\037\226" +
    "\044\123\047\253\073\150\100\157\102\260\103\247\105" +
    "\161\112\204\114\045\124\145\142\041\150\047\152\213" +
    "\154\214\155\040\156\230\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\002\001\ufe59\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\253\053\267\072\263" +
    "\073\150\077\217\100\157\105\161\114\045\142\041\150" +
    "\047\154\214\155\040\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\012\024\322\025\320\110\321" +
    "\131\317\001\ufed3\000\002\001\ufed7\000\010\142\053\160" +
    "\046\207\043\001\002\000\002\001\uff0d\000\002\001\uff15" +
    "\000\144\031\152\032\176\033\202\034\203\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\105\161\112\204\114\045\124\145\142" +
    "\041\150\047\152\213\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\002" +
    "\001\ufebc\000\002\001\ufeb5\000\002\001\ufeb9\000\004\101" +
    "\270\001\002\000\162\031\152\032\176\033\202\034\203" +
    "\036\156\037\226\044\123\047\253\053\267\072\263\073" +
    "\150\077\217\100\157\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\142" +
    "\232\143\231\150\047\152\213\153\250\154\214\155\040" +
    "\156\230\157\153\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\uff2c\000\002\001\uff2a\000\004\137\276\001\002\000" +
    "\004\052\274\001\uff2b\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\002\001\uff29\000\002\001\ufe8b\000" +
    "\004\060\301\001\002\000\002\001\uff25\000\162\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\010\045\306\052" +
    "\303\100\305\001\002\000\010\142\053\160\046\207\043" +
    "\001\002\000\002\001\uff36\000\164\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\136\311\142\232\143\231\150\047\152\213\153" +
    "\250\154\214\155\040\156\230\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\uff2d\000\002\001" +
    "\uff2e\000\002\001\uff31\000\002\001\uff30\000\164\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\136\314\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\uff32\000\002\001\uff2f\000\002\001\uff35\000\144\031\152" +
    "\032\176\033\202\034\203\037\226\044\123\047\332\053" +
    "\267\072\324\073\150\077\325\100\157\102\260\103\247" +
    "\105\161\112\204\114\045\124\145\142\041\150\047\152" +
    "\213\154\327\155\040\156\230\157\335\160\223\161\326" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\144\031\152\032\176" +
    "\033\202\034\203\037\226\044\123\047\332\053\267\072" +
    "\324\073\150\077\325\100\157\102\260\103\247\105\161" +
    "\112\204\114\045\124\145\142\041\150\047\152\213\154" +
    "\327\155\040\156\230\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\144\031\152\032\176\033\202" +
    "\034\203\037\226\044\123\047\332\053\267\072\324\073" +
    "\150\077\325\100\157\102\260\103\247\105\161\112\204" +
    "\114\045\124\145\142\041\150\047\152\213\154\327\155" +
    "\040\156\230\157\335\160\223\161\326\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\144\031\152\032\176\033\202\034\203" +
    "\037\226\044\123\047\332\053\267\072\324\073\150\077" +
    "\325\100\157\102\260\103\247\105\161\112\204\114\045" +
    "\124\145\142\041\150\047\152\213\154\327\155\040\156" +
    "\230\157\335\160\223\161\326\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\004\040\375\001\ufeb0\000\126\031\152\032\176" +
    "\033\202\034\203\044\123\047\332\053\267\072\324\073" +
    "\150\077\325\100\157\105\161\114\045\142\041\150\047" +
    "\154\327\155\040\157\335\160\223\161\326\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\130\031\152\032\176\033\202\034" +
    "\203\044\123\047\332\053\267\072\324\073\150\077\325" +
    "\100\157\101\360\105\161\114\045\142\041\150\047\154" +
    "\327\155\040\157\335\160\223\161\326\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\114\031\152\032\176\033\202\044\123" +
    "\047\332\073\150\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\160\223\161\326\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\114\031\152\032\176\033\202\044\123" +
    "\047\332\073\150\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\160\223\161\326\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\044\004\u010b\005\u0100\006\u010c\007\u0106" +
    "\010\u0107\011\u010e\012\u0109\013\u0103\014\u010f\015\u0105\016" +
    "\u0102\017\u0108\020\u0101\021\u010a\022\u0104\023\u0110\054\377" +
    "\001\ufe98\000\004\132\373\001\ufeb6\000\114\031\152\032" +
    "\176\033\202\044\123\047\332\073\150\100\157\105\161" +
    "\114\045\142\041\150\047\154\327\155\040\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\010\026\364\027" +
    "\365\030\366\001\ufec7\000\006\055\350\101\347\001\ufe90" +
    "\000\130\031\152\032\176\033\202\034\203\044\123\047" +
    "\332\053\267\072\324\073\150\077\325\100\157\101\344" +
    "\105\161\114\045\142\041\150\047\154\327\155\040\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\004\135\340\001\ufe94\000\002\001\ufecc\000\124\031\152" +
    "\032\176\033\202\034\203\044\123\047\332\053\267\073" +
    "\150\077\341\100\157\105\161\114\045\142\041\150\047" +
    "\154\327\155\040\157\343\160\223\161\326\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\004\101\360\001\002\000\006\055" +
    "\350\101\347\001\ufe8f\000\004\101\344\001\002\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\uff2c\000\004\137" +
    "\346\001\002\000\002\001\ufe88\000\162\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\uff2c\000\124\031\152\032\176\033" +
    "\202\034\354\044\123\047\332\053\353\073\150\077\351" +
    "\100\157\105\161\114\045\142\041\150\047\154\327\155" +
    "\040\157\355\160\223\161\326\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\002\001\ufe81\000\002\001\ufe84\000\002\001\ufe83" +
    "\000\002\001\ufe82\000\002\001\ufe80\000\004\137\357\001" +
    "\002\000\002\001\ufe8c\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\uff2c\000\004\137\362\001\002\000\002\001" +
    "\ufe89\000\002\001\ufeb4\000\126\031\152\032\176\033\202" +
    "\034\203\044\123\047\332\053\267\072\324\073\150\077" +
    "\325\100\157\105\161\114\045\142\041\150\047\154\327" +
    "\155\040\157\335\160\223\161\326\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\126\031\152\032\176\033\202\034\203\044" +
    "\123\047\332\053\267\072\324\073\150\077\325\100\157" +
    "\105\161\114\045\142\041\150\047\154\327\155\040\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\126\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\105\161\114" +
    "\045\142\041\150\047\154\327\155\040\157\335\160\223" +
    "\161\326\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\002\001\ufebe" +
    "\000\002\001\ufebf\000\002\001\ufec0\000\002\001\ufe76\000" +
    "\124\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\073\150\077\341\100\157\105\161\114\045\142" +
    "\041\150\047\154\327\155\040\157\343\160\223\161\326" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\004\040\375\001\ufeaf" +
    "\000\124\031\152\032\176\033\202\034\203\044\123\047" +
    "\332\053\267\073\150\077\341\100\157\105\161\114\045" +
    "\142\041\150\047\154\327\155\040\157\343\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\002\001\ufeab\000" +
    "\124\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\073\150\077\341\100\157\105\161\114\045\142" +
    "\041\150\047\154\327\155\040\157\343\160\223\161\326" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\002\001\ufea9\000\002" +
    "\001\ufe9e\000\002\001\ufea0\000\002\001\ufea3\000\002\001" +
    "\ufe9c\000\002\001\ufea1\000\002\001\ufea7\000\002\001\ufea6" +
    "\000\002\001\ufe9f\000\002\001\ufea4\000\002\001\ufe9d\000" +
    "\002\001\ufeaa\000\002\001\ufea8\000\124\031\152\032\176" +
    "\033\202\034\203\044\123\047\332\053\267\073\150\077" +
    "\341\100\157\105\161\114\045\142\041\150\047\154\327" +
    "\155\040\157\343\160\223\161\326\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\002\001\ufea5\000\002\001\ufea2\000\002\001" +
    "\ufe9b\000\002\001\ufe97\000\004\135\340\001\ufe93\000\002" +
    "\001\ufe77\000\002\001\ufe78\000\002\001\ufeb3\000\010\026" +
    "\364\027\365\030\366\001\ufec8\000\002\001\ufecd\000\010" +
    "\026\364\027\365\030\366\001\ufec6\000\002\001\ufecb\000" +
    "\010\026\364\027\365\030\366\001\ufec9\000\002\001\ufece" +
    "\000\010\144\u0120\145\u011e\146\u011f\001\ufede\000\002\001" +
    "\ufef2\000\144\031\152\032\176\033\202\034\203\037\226" +
    "\044\123\047\332\053\267\072\324\073\150\077\325\100" +
    "\157\102\260\103\247\105\161\112\204\114\045\124\145" +
    "\142\041\150\047\152\213\154\327\155\040\156\230\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\144\031\152\032\176\033\202\034\203\037\226\044\123" +
    "\047\332\053\267\072\324\073\150\077\325\100\157\102" +
    "\260\103\247\105\161\112\204\114\045\124\145\142\041" +
    "\150\047\152\213\154\327\155\040\156\230\157\335\160" +
    "\223\161\326\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\144\031" +
    "\152\032\176\033\202\034\203\037\226\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\102\260\103" +
    "\247\105\161\112\204\114\045\124\145\142\041\150\047" +
    "\152\213\154\327\155\040\156\230\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\010\026\364\027" +
    "\365\030\366\001\ufeca\000\012\024\u0127\025\u0125\110\u0126" +
    "\131\u0124\001\ufed2\000\002\001\ufed6\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\126\031\152\032\176\033\202" +
    "\034\203\044\123\047\332\053\267\072\324\073\150\077" +
    "\325\100\157\105\161\114\045\142\041\150\047\154\327" +
    "\155\040\157\335\160\223\161\326\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\126\031\152\032\176\033\202\034\203\044" +
    "\123\047\332\053\267\072\324\073\150\077\325\100\157" +
    "\105\161\114\045\142\041\150\047\154\327\155\040\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\126\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\105\161\114" +
    "\045\142\041\150\047\154\327\155\040\157\335\160\223" +
    "\161\326\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\012\024\u0127" +
    "\025\u0125\110\u0126\131\u0124\001\ufed0\000\002\001\ufed4\000" +
    "\012\024\u0127\025\u0125\110\u0126\131\u0124\001\ufed1\000\002" +
    "\001\ufed5\000\002\001\ufe7a\000\002\001\ufe7d\000\010\144" +
    "\u0120\145\u011e\146\u011f\001\ufedd\000\002\001\ufef1\000\010" +
    "\045\306\052\u0132\100\305\001\002\000\002\001\uff3b\000" +
    "\064\053\065\062\111\130\116\134\064\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\002\000\002\001\uff21\000\002\001\uff3c\000\004\175\u0136" +
    "\001\002\000\002\001\ufe64\000\004\176\u0138\001\002\000" +
    "\002\001\ufe63\000\004\177\u013a\001\002\000\002\001\ufe62" +
    "\000\004\200\u013c\001\002\000\002\001\ufe61\000\004\201" +
    "\u013e\001\002\000\002\001\ufe60\000\004\202\u0140\001\002" +
    "\000\002\001\ufe5f\000\004\203\u0142\001\002\000\002\001" +
    "\ufe5e\000\004\204\u0144\001\002\000\002\001\ufe5d\000\004" +
    "\205\u0146\001\002\000\002\001\ufe5c\000\010\144\u0120\145" +
    "\u011e\146\u011f\001\ufed9\000\002\001\ufeed\000\006\150\u014a" +
    "\207\043\001\002\000\002\001\uff7c\000\010\144\u0120\145" +
    "\u011e\146\u011f\001\ufeda\000\002\001\ufeee\000\010\045\306" +
    "\052\u0132\100\305\001\002\000\002\001\uff1f\000\010\045" +
    "\306\052\u0132\100\305\001\002\000\002\001\uff24\000\142" +
    "\031\152\032\176\033\202\034\203\037\226\044\123\047" +
    "\332\053\267\073\150\077\341\100\157\102\260\103\247" +
    "\105\161\112\204\114\045\124\145\142\041\150\047\152" +
    "\213\154\327\155\040\156\230\157\343\160\223\161\326" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\002\001\ufead\000\004" +
    "\207\043\001\002\000\004\151\056\001\uff73\000\144\031" +
    "\152\032\176\033\202\034\203\037\226\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\102\260\103" +
    "\247\105\161\112\204\114\045\124\145\142\041\150\047" +
    "\152\213\154\327\155\040\156\230\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\144\031\152\032" +
    "\176\033\202\034\203\037\226\044\123\047\332\053\267" +
    "\072\324\073\150\077\325\100\157\102\260\103\247\105" +
    "\161\112\204\114\045\124\145\142\041\150\047\152\213" +
    "\154\327\155\040\156\230\157\335\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\144\031\152\032\176\033" +
    "\202\034\203\037\226\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\102\260\103\247\105\161\112" +
    "\204\114\045\124\145\142\041\150\047\152\213\154\327" +
    "\155\040\156\230\157\335\160\223\161\326\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\002\001\ufec3\000\002\001\ufec2\000" +
    "\002\001\ufec4\000\002\001\uff51\000\002\001\ufeba\000\002" +
    "\001\ufeb7\000\002\001\ufe7b\000\002\001\ufe7e\000\010\045" +
    "\306\052\u0132\100\305\001\002\000\002\001\uff22\000\010" +
    "\144\u0120\145\u011e\146\u011f\001\ufedb\000\002\001\ufeef\000" +
    "\162\031\152\032\176\033\202\034\203\036\u0168\037\226" +
    "\044\123\047\332\053\267\072\324\073\150\077\325\100" +
    "\157\102\260\103\247\104\u016c\105\161\112\204\113\u0171" +
    "\114\045\115\u0169\124\145\125\u016d\142\u016f\143\u016e\150" +
    "\047\152\213\153\u0170\154\327\155\040\156\230\157\335" +
    "\160\223\161\326\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\002" +
    "\001\uff17\000\002\001\uff19\000\006\041\u0197\075\u0196\001" +
    "\uff0c\000\126\031\152\032\176\033\202\034\203\044\123" +
    "\047\332\053\267\072\324\073\150\077\325\100\157\105" +
    "\161\114\045\142\041\150\047\154\327\155\040\157\335" +
    "\160\223\161\326\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\144" +
    "\031\152\032\176\033\202\034\203\036\u0168\044\123\047" +
    "\332\053\267\072\324\073\150\077\325\100\157\104\u016c" +
    "\105\161\113\u0171\114\045\115\u0169\125\u016d\142\u016f\143" +
    "\u016e\150\047\153\u0170\154\327\155\040\157\335\160\223" +
    "\161\326\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\010\144\u0176" +
    "\145\u0174\146\u0175\001\ufed8\000\032\060\u0186\070\u0184\071" +
    "\u017f\076\u017e\106\u0187\107\u0180\116\u017d\117\u0183\120\u0181" +
    "\121\u017c\122\u0185\123\u0182\001\uff01\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\126\031\152\032\176\033\202" +
    "\034\203\044\123\047\332\053\267\072\324\073\150\077" +
    "\325\100\157\105\161\114\045\142\041\150\047\154\327" +
    "\155\040\157\335\160\223\161\326\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\126\031\152\032\176\033\202\034\203\044" +
    "\123\047\332\053\267\072\324\073\150\077\325\100\157" +
    "\105\161\114\045\142\041\150\047\154\327\155\040\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\130\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\105\161\114" +
    "\045\142\041\150\047\151\u0149\154\327\155\040\157\335" +
    "\160\223\161\326\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\126" +
    "\031\152\032\176\033\202\034\203\044\123\047\332\053" +
    "\267\072\324\073\150\077\325\100\157\105\161\114\045" +
    "\142\041\150\047\154\327\155\040\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\012\024\u0127\025\u0125\110\u0126" +
    "\131\u0124\001\ufed3\000\010\144\u0176\145\u0174\146\u0175\001" +
    "\ufede\000\126\031\152\032\176\033\202\034\203\044\123" +
    "\047\332\053\267\072\324\073\150\077\325\100\157\105" +
    "\161\114\045\142\041\150\047\154\327\155\040\157\335" +
    "\160\223\161\326\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\126" +
    "\031\152\032\176\033\202\034\203\044\123\047\332\053" +
    "\267\072\324\073\150\077\325\100\157\105\161\114\045" +
    "\142\041\150\047\154\327\155\040\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\010\144\u0176\145\u0174\146\u0175" +
    "\001\ufedd\000\010\144\u0176\145\u0174\146\u0175\001\ufed9\000" +
    "\010\144\u0176\145\u0174\146\u0175\001\ufeda\000\010\144\u0176" +
    "\145\u0174\146\u0175\001\ufedb\000\010\144\u0176\145\u0174\146" +
    "\u0175\001\ufedc\000\126\031\152\032\176\033\202\034\203" +
    "\044\123\047\332\053\267\072\324\073\150\077\325\100" +
    "\157\105\161\114\045\142\041\150\047\154\327\155\040" +
    "\157\335\160\223\161\326\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\126\031\152\032\176\033\202\034\203\044\123\047" +
    "\332\053\267\072\324\073\150\077\325\100\157\105\161" +
    "\114\045\142\041\150\047\154\327\155\040\157\335\160" +
    "\223\161\326\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\126\031" +
    "\152\032\176\033\202\034\203\044\123\047\332\053\267" +
    "\072\324\073\150\077\325\100\157\105\161\114\045\142" +
    "\041\150\047\154\327\155\040\157\335\160\223\161\326" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\126\031\152\032\176" +
    "\033\202\034\203\044\123\047\332\053\267\072\324\073" +
    "\150\077\325\100\157\105\161\114\045\142\041\150\047" +
    "\154\327\155\040\157\335\160\223\161\326\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\126\031\152\032\176\033\202\034" +
    "\203\044\123\047\332\053\267\072\324\073\150\077\325" +
    "\100\157\105\161\114\045\142\041\150\047\154\327\155" +
    "\040\157\335\160\223\161\326\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\126\031\152\032\176\033\202\034\203\044\123" +
    "\047\332\053\267\072\324\073\150\077\325\100\157\105" +
    "\161\114\045\142\041\150\047\154\327\155\040\157\335" +
    "\160\223\161\326\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\126" +
    "\031\152\032\176\033\202\034\203\044\123\047\332\053" +
    "\267\072\324\073\150\077\325\100\157\105\161\114\045" +
    "\142\041\150\047\154\327\155\040\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\126\031\152\032" +
    "\176\033\202\034\203\044\123\047\332\053\267\072\324" +
    "\073\150\077\325\100\157\105\161\114\045\142\041\150" +
    "\047\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\126\031\152\032\176\033\202" +
    "\034\203\044\123\047\332\053\267\072\324\073\150\077" +
    "\325\100\157\105\161\114\045\142\041\150\047\154\327" +
    "\155\040\157\335\160\223\161\326\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\126\031\152\032\176\033\202\034\203\044" +
    "\123\047\332\053\267\072\324\073\150\077\325\100\157" +
    "\105\161\114\045\142\041\150\047\154\327\155\040\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\126\031\152\032\176\033\202\034\203\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\105\161\114" +
    "\045\142\041\150\047\154\327\155\040\157\335\160\223" +
    "\161\326\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\126\031\152" +
    "\032\176\033\202\034\203\044\123\047\332\053\267\072" +
    "\324\073\150\077\325\100\157\105\161\114\045\142\041" +
    "\150\047\154\327\155\040\157\335\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\010\144\u0176\145\u0174\146" +
    "\u0175\001\ufee9\000\010\144\u0176\145\u0174\146\u0175\001\ufeea" +
    "\000\010\144\u0176\145\u0174\146\u0175\001\ufee3\000\010\144" +
    "\u0176\145\u0174\146\u0175\001\ufee8\000\010\144\u0176\145\u0174" +
    "\146\u0175\001\ufee2\000\010\144\u0176\145\u0174\146\u0175\001" +
    "\ufee1\000\010\144\u0176\145\u0174\146\u0175\001\ufee0\000\010" +
    "\144\u0176\145\u0174\146\u0175\001\ufee7\000\010\144\u0176\145" +
    "\u0174\146\u0175\001\ufee6\000\010\144\u0176\145\u0174\146\u0175" +
    "\001\ufeeb\000\010\144\u0176\145\u0174\146\u0175\001\ufee4\000" +
    "\010\144\u0176\145\u0174\146\u0175\001\ufee5\000\002\001\uff00" +
    "\000\010\144\u0176\145\u0174\146\u0175\001\ufedf\000\144\031" +
    "\152\032\176\033\202\034\203\036\u0168\044\123\047\332" +
    "\053\267\072\324\073\150\077\325\100\157\104\u016c\105" +
    "\161\113\u0171\114\045\115\u0169\125\u016d\142\u016f\143\u016e" +
    "\150\047\153\u0170\154\327\155\040\157\335\160\223\161" +
    "\326\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\144\031\152\032" +
    "\176\033\202\034\203\036\u0168\044\123\047\332\053\267" +
    "\072\324\073\150\077\325\100\157\104\u016c\105\161\113" +
    "\u0171\114\045\115\u0169\125\u016d\142\u016f\143\u016e\150\047" +
    "\153\u0170\154\327\155\040\157\335\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\uff05\000\002\001" +
    "\uff09\000\004\056\u019b\001\uff0e\000\144\031\152\032\176" +
    "\033\202\034\203\036\u0168\044\123\047\332\053\267\072" +
    "\324\073\150\077\325\100\157\104\u016c\105\161\113\u0171" +
    "\114\045\115\u0169\125\u016d\142\u016f\143\u016e\150\047\153" +
    "\u0170\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\002\001\uff0a\000\002\001\uff0b" +
    "\000\010\144\u0120\145\u011e\146\u011f\001\ufedc\000\002\001" +
    "\ufef0\000\010\045\306\052\u0132\100\305\001\002\000\002" +
    "\001\uff23\000\162\031\152\032\176\033\202\034\203\036" +
    "\156\037\226\044\123\047\253\053\267\072\263\073\150" +
    "\077\217\100\157\102\260\103\247\104\205\105\161\112" +
    "\204\113\255\114\045\115\166\124\145\125\207\142\232" +
    "\143\231\150\047\152\213\153\250\154\214\155\040\156" +
    "\230\157\153\160\223\161\167\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\uff2c\000\004\137\u01a4\001\002\000\002\001\ufe8a\000\162" +
    "\031\152\032\176\033\202\034\203\036\u0168\037\226\044" +
    "\123\047\332\053\267\072\324\073\150\077\325\100\157" +
    "\102\260\103\247\104\u016c\105\161\112\204\113\u0171\114" +
    "\045\115\u0169\124\145\125\u016d\142\u016f\143\u016e\150\047" +
    "\152\213\153\u0170\154\327\155\040\156\230\157\335\160" +
    "\223\161\326\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\uff1d\000\004\074\u01a8\001\uff1b\000\144\031\152\032\176" +
    "\033\202\034\203\036\u0168\044\123\047\332\053\267\072" +
    "\324\073\150\077\325\100\157\104\u016c\105\161\113\u0171" +
    "\114\045\115\u0169\125\u016d\142\u016f\143\u016e\150\047\153" +
    "\u0170\154\327\155\040\157\335\160\223\161\326\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\126\031\152\032\176\033\202" +
    "\034\203\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\105\161\114\045\142\041\150\047\154\214" +
    "\155\040\157\153\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\126\031\152\032\176\033\202\034\203\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\105\161\114\045\142\041\150\047\154\214\155\040\157" +
    "\153\160\223\161\167\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\126\031\152\032\176\033\202\034\203\044\123\047\253" +
    "\053\267\072\263\073\150\077\217\100\157\105\161\114" +
    "\045\142\041\150\047\154\214\155\040\157\153\160\223" +
    "\161\167\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\126\031\152" +
    "\032\176\033\202\034\203\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\105\161\114\045\142\041" +
    "\150\047\154\214\155\040\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\126\031\152\032\176\033" +
    "\202\034\203\044\123\047\253\053\267\072\263\073\150" +
    "\077\217\100\157\105\161\114\045\142\041\150\047\154" +
    "\214\155\040\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\126\031\152\032\176\033\202\034\203" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\105\161\114\045\142\041\150\047\154\214\155\040" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\126\031\152\032\176\033\202\034\203\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\105\161" +
    "\114\045\142\041\150\047\154\214\155\040\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\126\031" +
    "\152\032\176\033\202\034\203\044\123\047\253\053\267" +
    "\072\263\073\150\077\217\100\157\105\161\114\045\142" +
    "\041\150\047\154\214\155\040\157\153\160\223\161\167" +
    "\162\044\164\141\165\140\166\137\167\136\170\135\171" +
    "\134\172\133\173\131\174\127\175\246\176\245\177\242" +
    "\200\241\201\240\202\237\203\236\204\235\205\233\207" +
    "\043\210\201\211\171\001\002\000\126\031\152\032\176" +
    "\033\202\034\203\044\123\047\253\053\267\072\263\073" +
    "\150\077\217\100\157\105\161\114\045\142\041\150\047" +
    "\154\214\155\040\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\126\031\152\032\176\033\202\034" +
    "\203\044\123\047\253\053\267\072\263\073\150\077\217" +
    "\100\157\105\161\114\045\142\041\150\047\154\214\155" +
    "\040\157\153\160\223\161\167\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\126\031\152\032\176\033\202\034\203\044\123" +
    "\047\253\053\267\072\263\073\150\077\217\100\157\105" +
    "\161\114\045\142\041\150\047\154\214\155\040\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\126" +
    "\031\152\032\176\033\202\034\203\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\105\161\114\045" +
    "\142\041\150\047\154\214\155\040\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\010\144\u0120\145" +
    "\u011e\146\u011f\001\ufee9\000\002\001\ufefd\000\010\144\u0120" +
    "\145\u011e\146\u011f\001\ufeea\000\002\001\ufefe\000\010\144" +
    "\u0120\145\u011e\146\u011f\001\ufee3\000\002\001\ufef7\000\010" +
    "\144\u0120\145\u011e\146\u011f\001\ufee8\000\002\001\ufefc\000" +
    "\010\144\u0120\145\u011e\146\u011f\001\ufee1\000\002\001\ufef5" +
    "\000\010\144\u0120\145\u011e\146\u011f\001\ufee2\000\002\001" +
    "\ufef6\000\010\144\u0120\145\u011e\146\u011f\001\ufee0\000\002" +
    "\001\ufef4\000\010\144\u0120\145\u011e\146\u011f\001\ufee7\000" +
    "\002\001\ufefb\000\010\144\u0120\145\u011e\146\u011f\001\ufee6" +
    "\000\002\001\ufefa\000\010\144\u0120\145\u011e\146\u011f\001" +
    "\ufeeb\000\002\001\ufeff\000\010\144\u0120\145\u011e\146\u011f" +
    "\001\ufee4\000\002\001\ufef8\000\010\144\u0120\145\u011e\146" +
    "\u011f\001\ufee5\000\002\001\ufef9\000\002\001\ufe7c\000\002" +
    "\001\ufe7f\000\002\001\uff03\000\002\001\uff02\000\142\031" +
    "\152\032\176\033\202\034\354\037\226\044\123\047\332" +
    "\053\353\073\150\077\351\100\157\102\260\103\247\105" +
    "\161\112\204\114\045\124\145\142\041\150\047\152\213" +
    "\154\327\155\040\156\230\157\355\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\ufe86\000\142\031" +
    "\152\032\176\033\202\034\203\037\226\044\123\047\332" +
    "\053\267\073\150\077\341\100\157\102\260\103\247\105" +
    "\161\112\204\114\045\124\145\142\041\150\047\152\213" +
    "\154\327\155\040\156\230\157\343\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\ufe91\000\004\140" +
    "\u01d6\001\002\000\002\001\ufe6e\000\170\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\u01e4\062\u01e0\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\130\u01e1\134\u01f0\142\232\143\231" +
    "\150\047\152\213\153\250\154\214\155\040\156\230\157" +
    "\153\160\223\161\167\162\044\164\u01df\165\u01de\166\u01dd" +
    "\167\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175" +
    "\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9" +
    "\204\u01e8\205\u01e6\207\043\210\201\211\171\001\002\000" +
    "\170\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\u01e4\062\u01e0\072\263\073\150\077" +
    "\217\100\157\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\130\u01e1\134" +
    "\u01f0\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9" +
    "\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201" +
    "\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043\210\201" +
    "\211\171\001\002\000\170\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\u01e4\062\u01e0" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\130\u01e1\134\u01f0\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170" +
    "\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee" +
    "\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205" +
    "\u01e6\207\043\210\201\211\171\001\002\000\170\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\u01e4\062\u01e0\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\130\u01e1\134\u01f0\142\232" +
    "\143\231\150\047\152\213\153\250\154\214\155\040\156" +
    "\230\157\153\160\223\161\167\162\044\164\u01df\165\u01de" +
    "\166\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174" +
    "\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea" +
    "\203\u01e9\204\u01e8\205\u01e6\207\043\210\201\211\171\001" +
    "\002\000\170\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\u01e4\062\u01e0\072\263\073" +
    "\150\077\217\100\157\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\130" +
    "\u01e1\134\u01f0\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da" +
    "\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200" +
    "\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043" +
    "\210\201\211\171\001\002\000\170\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\u01e4" +
    "\062\u01e0\072\263\073\150\077\217\100\157\102\260\103" +
    "\247\104\205\105\161\112\204\113\255\114\045\115\166" +
    "\124\145\125\207\130\u01e1\134\u01f0\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\u01df\165\u01de\166\u01dd\167" +
    "\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef" +
    "\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204" +
    "\u01e8\205\u01e6\207\043\210\201\211\171\001\002\000\170" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\u01e4\062\u01e0\072\263\073\150\077\217" +
    "\100\157\102\260\103\247\104\205\105\161\112\204\113" +
    "\255\114\045\115\166\124\145\125\207\130\u01e1\134\u01f0" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\u01df" +
    "\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173" +
    "\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb" +
    "\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043\210\201\211" +
    "\171\001\002\000\170\031\152\032\176\033\202\034\203" +
    "\036\156\037\226\044\123\047\253\053\u01e4\062\u01e0\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\130\u01e1\134\u01f0\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db" +
    "\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177" +
    "\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6" +
    "\207\043\210\201\211\171\001\002\000\170\031\152\032" +
    "\176\033\202\034\203\036\156\037\226\044\123\047\253" +
    "\053\u01e4\062\u01e0\072\263\073\150\077\217\100\157\102" +
    "\260\103\247\104\205\105\161\112\204\113\255\114\045" +
    "\115\166\124\145\125\207\130\u01e1\134\u01f0\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\u01df\165\u01de\166" +
    "\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7" +
    "\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203" +
    "\u01e9\204\u01e8\205\u01e6\207\043\210\201\211\171\001\002" +
    "\000\010\142\053\160\046\207\043\001\002\000\010\142" +
    "\053\160\046\207\043\001\002\000\006\051\u0219\052\120" +
    "\001\002\000\012\045\306\052\u0213\100\305\136\u0215\001" +
    "\002\000\012\101\270\142\053\160\046\207\043\001\002" +
    "\000\002\001\uff3d\000\170\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\u01e4\062\u01e0" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\130\u01e1\134\u01f0\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170" +
    "\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee" +
    "\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205" +
    "\u01e6\207\043\210\201\211\171\001\002\000\006\051\uff6f" +
    "\052\uff6f\001\uff80\000\170\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\u01e4\062\u01e0" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\130\u01e1\134\u01f0\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170" +
    "\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee" +
    "\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205" +
    "\u01e6\207\043\210\201\211\171\001\002\000\170\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\u01e4\062\u01e0\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\130\u01e1\134\u01f0\142\232" +
    "\143\231\150\047\152\213\153\250\154\214\155\040\156" +
    "\230\157\153\160\223\161\167\162\044\164\u01df\165\u01de" +
    "\166\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174" +
    "\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea" +
    "\203\u01e9\204\u01e8\205\u01e6\207\043\210\201\211\171\001" +
    "\002\000\170\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\u01e4\062\u01e0\072\263\073" +
    "\150\077\217\100\157\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\130" +
    "\u01e1\134\u01f0\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da" +
    "\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200" +
    "\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043" +
    "\210\201\211\171\001\002\000\170\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\u01e4" +
    "\062\u01e0\072\263\073\150\077\217\100\157\102\260\103" +
    "\247\104\205\105\161\112\204\113\255\114\045\115\166" +
    "\124\145\125\207\130\u01e1\134\u01f0\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\u01df\165\u01de\166\u01dd\167" +
    "\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef" +
    "\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204" +
    "\u01e8\205\u01e6\207\043\210\201\211\171\001\002\000\170" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\u01e4\062\u01e0\072\263\073\150\077\217" +
    "\100\157\102\260\103\247\104\205\105\161\112\204\113" +
    "\255\114\045\115\166\124\145\125\207\130\u01e1\134\u01f0" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\u01df" +
    "\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173" +
    "\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb" +
    "\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043\210\201\211" +
    "\171\001\002\000\170\031\152\032\176\033\202\034\203" +
    "\036\156\037\226\044\123\047\253\053\u01e4\062\u01e0\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\130\u01e1\134\u01f0\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db" +
    "\171\u01da\172\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177" +
    "\u01ed\200\u01ec\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6" +
    "\207\043\210\201\211\171\001\002\000\170\031\152\032" +
    "\176\033\202\034\203\036\156\037\226\044\123\047\253" +
    "\053\u01e4\062\u01e0\072\263\073\150\077\217\100\157\102" +
    "\260\103\247\104\205\105\161\112\204\113\255\114\045" +
    "\115\166\124\145\125\207\130\u01e1\134\u01f0\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\u01df\165\u01de\166" +
    "\u01dd\167\u01dc\170\u01db\171\u01da\172\u01d9\173\u01d8\174\u01d7" +
    "\175\u01ef\176\u01ee\177\u01ed\200\u01ec\201\u01eb\202\u01ea\203" +
    "\u01e9\204\u01e8\205\u01e6\207\043\210\201\211\171\001\002" +
    "\000\170\031\152\032\176\033\202\034\203\036\156\037" +
    "\226\044\123\047\253\053\u01e4\062\u01e0\072\263\073\150" +
    "\077\217\100\157\102\260\103\247\104\205\105\161\112" +
    "\204\113\255\114\045\115\166\124\145\125\207\130\u01e1" +
    "\134\u01f0\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\u01df\165\u01de\166\u01dd\167\u01dc\170\u01db\171\u01da\172" +
    "\u01d9\173\u01d8\174\u01d7\175\u01ef\176\u01ee\177\u01ed\200\u01ec" +
    "\201\u01eb\202\u01ea\203\u01e9\204\u01e8\205\u01e6\207\043\210" +
    "\201\211\171\001\002\000\012\053\u01f1\142\053\160\046" +
    "\207\043\001\002\000\010\142\053\160\046\207\043\001" +
    "\002\000\006\051\u01f3\052\120\001\002\000\162\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\u01f5\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\002\001\uff53\000" +
    "\164\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\101\270\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\002\001\uff4d\000\006\051\u01f8\052\120\001\002\000" +
    "\162\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\u01fa\072\263\073\150\077\217\100" +
    "\157\102\260\103\247\104\205\105\161\112\204\113\255" +
    "\114\045\115\166\124\145\125\207\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\002" +
    "\001\uff54\000\164\031\152\032\176\033\202\034\203\036" +
    "\156\037\226\044\123\047\253\053\267\072\263\073\150" +
    "\077\217\100\157\101\270\102\260\103\247\104\205\105" +
    "\161\112\204\113\255\114\045\115\166\124\145\125\207" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\002\001\uff4e\000\004\175\u01fd\001\002" +
    "\000\002\001\uff60\000\004\176\u01ff\001\002\000\002\001" +
    "\uff5f\000\004\177\u0201\001\002\000\002\001\uff5e\000\004" +
    "\200\u0203\001\002\000\002\001\uff5d\000\004\201\u0205\001" +
    "\002\000\002\001\uff5c\000\004\202\u0207\001\002\000\002" +
    "\001\uff5b\000\004\203\u0209\001\002\000\002\001\uff5a\000" +
    "\004\204\u020b\001\002\000\002\001\uff59\000\004\205\u020d" +
    "\001\002\000\002\001\uff58\000\006\051\u020f\052\120\001" +
    "\002\000\162\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\u0211\072\263\073\150\077" +
    "\217\100\157\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\002\001\uff55\000\164\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\267\072\263" +
    "\073\150\077\217\100\157\101\270\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\002\001\uff4f\000\064\053\u0217" +
    "\062\u01e0\130\u01e1\134\u01f0\142\053\160\046\164\114\165" +
    "\113\166\112\167\110\170\107\171\105\172\104\173\103" +
    "\174\101\175\077\176\076\177\075\200\074\201\073\202" +
    "\072\203\071\204\070\205\066\207\043\001\002\000\004" +
    "\136\u0216\001\002\000\002\001\ufe57\000\002\001\ufe58\000" +
    "\010\142\053\160\046\207\043\001\002\000\002\001\uff3e" +
    "\000\162\031\152\032\176\033\202\034\203\036\156\037" +
    "\226\044\123\047\253\053\u021b\072\263\073\150\077\217" +
    "\100\157\102\260\103\247\104\205\105\161\112\204\113" +
    "\255\114\045\115\166\124\145\125\207\142\232\143\231" +
    "\150\047\152\213\153\250\154\214\155\040\156\230\157" +
    "\153\160\223\161\167\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\002\001\uff52\000\164\031\152\032\176\033\202\034\203" +
    "\036\156\037\226\044\123\047\253\053\267\072\263\073" +
    "\150\077\217\100\157\101\270\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\002\001\uff4c\000\006\051\122\052" +
    "\120\001\002\000\006\051\u021f\052\120\001\002\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\u0221\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\uff56\000\164\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\101\270\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\142" +
    "\232\143\231\150\047\152\213\153\250\154\214\155\040" +
    "\156\230\157\153\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\002\001\uff50\000\004\164\u0226\001\002\000" +
    "\004\164\u0225\001\002\000\002\001\uff69\000\002\001\ufe6d" +
    "\000\004\165\u022a\001\002\000\004\165\u0229\001\002\000" +
    "\002\001\uff68\000\002\001\ufe6c\000\004\166\u022e\001\002" +
    "\000\004\166\u022d\001\002\000\002\001\uff67\000\002\001" +
    "\ufe6b\000\004\167\u0232\001\002\000\004\167\u0231\001\002" +
    "\000\002\001\uff66\000\002\001\ufe6a\000\004\170\u0236\001" +
    "\002\000\004\170\u0235\001\002\000\002\001\uff65\000\002" +
    "\001\ufe69\000\004\171\u023a\001\002\000\004\171\u0239\001" +
    "\002\000\002\001\uff64\000\002\001\ufe68\000\004\172\u023e" +
    "\001\002\000\004\172\u023d\001\002\000\002\001\uff63\000" +
    "\002\001\ufe67\000\004\173\u0242\001\002\000\004\173\u0241" +
    "\001\002\000\002\001\uff62\000\002\001\ufe66\000\004\174" +
    "\u0246\001\002\000\004\174\u0245\001\002\000\002\001\uff61" +
    "\000\002\001\ufe65\000\010\144\u0120\145\u011e\146\u011f\001" +
    "\ufedf\000\002\001\ufef3\000\002\001\ufebb\000\002\001\ufeb8" +
    "\000\142\031\152\032\176\033\202\034\203\037\226\044" +
    "\123\047\332\053\267\073\150\077\341\100\157\102\260" +
    "\103\247\105\161\112\204\114\045\124\145\142\041\150" +
    "\047\152\213\154\327\155\040\156\230\157\343\160\223" +
    "\161\326\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\002\001\ufeb1" +
    "\000\010\045\306\052\u0132\100\305\001\002\000\002\001" +
    "\uff20\000\142\031\152\032\176\033\202\034\203\037\226" +
    "\044\123\047\332\053\267\073\150\077\341\100\157\102" +
    "\260\103\247\105\161\112\204\114\045\124\145\142\041" +
    "\150\047\152\213\154\327\155\040\156\230\157\343\160" +
    "\223\161\326\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\142\031" +
    "\152\032\176\033\202\034\203\037\226\044\123\047\332" +
    "\053\267\073\150\077\341\100\157\102\260\103\247\105" +
    "\161\112\204\114\045\124\145\142\041\150\047\152\213" +
    "\154\327\155\040\156\230\157\343\160\223\161\326\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\ufe99\000\002\001" +
    "\ufe95\000\162\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\162\031\152\032\176\033\202\034\203\036\u0168\037" +
    "\226\044\123\047\332\053\267\072\324\073\150\077\325" +
    "\100\157\102\260\103\247\104\u016c\105\161\112\204\113" +
    "\u0171\114\045\115\u0169\124\145\125\u016d\142\u016f\143\u016e" +
    "\150\047\152\213\153\u0170\154\327\155\040\156\230\157" +
    "\335\160\223\161\326\162\044\164\141\165\140\166\137" +
    "\167\136\170\135\171\134\172\133\173\131\174\127\175" +
    "\246\176\245\177\242\200\241\201\240\202\237\203\236" +
    "\204\235\205\233\207\043\210\201\211\171\001\002\000" +
    "\002\001\uff07\000\002\001\uff11\000\002\001\uff0f\000\004" +
    "\056\u0259\001\uff0e\000\162\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\267\072\263" +
    "\073\150\077\217\100\157\102\260\103\247\104\205\105" +
    "\161\112\204\113\255\114\045\115\166\124\145\125\207" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\002\001\uff10\000\002\001\uff13\000\002" +
    "\001\uff12\000\002\001\ufe5a\000\002\001\uff4a\000\164\031" +
    "\152\032\176\033\202\034\203\036\156\037\226\044\123" +
    "\047\253\053\267\072\263\073\150\077\217\100\157\101" +
    "\270\102\260\103\247\104\205\105\161\112\204\113\255" +
    "\114\045\115\166\124\145\125\207\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\002" +
    "\001\uff44\000\002\001\uff6e\000\162\031\152\032\176\033" +
    "\202\034\203\036\156\037\226\044\123\047\253\053\u0264" +
    "\072\263\073\150\077\217\100\157\102\260\103\247\104" +
    "\205\105\161\112\204\113\255\114\045\115\166\124\145" +
    "\125\207\142\232\143\231\150\047\152\213\153\250\154" +
    "\214\155\040\156\230\157\153\160\223\161\167\162\044" +
    "\164\141\165\140\166\137\167\136\170\135\171\134\172" +
    "\133\173\131\174\127\175\246\176\245\177\242\200\241" +
    "\201\240\202\237\203\236\204\235\205\233\207\043\210" +
    "\201\211\171\001\002\000\002\001\uff45\000\164\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\267\072\263\073\150\077\217\100\157\101\270" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\uff3f\000\010\051\u021f\052\120\060\u0267\001\002\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\u0269\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\002\001" +
    "\uff49\000\164\031\152\032\176\033\202\034\203\036\156" +
    "\037\226\044\123\047\253\053\267\072\263\073\150\077" +
    "\217\100\157\101\270\102\260\103\247\104\205\105\161" +
    "\112\204\113\255\114\045\115\166\124\145\125\207\142" +
    "\232\143\231\150\047\152\213\153\250\154\214\155\040" +
    "\156\230\157\153\160\223\161\167\162\044\164\141\165" +
    "\140\166\137\167\136\170\135\171\134\172\133\173\131" +
    "\174\127\175\246\176\245\177\242\200\241\201\240\202" +
    "\237\203\236\204\235\205\233\207\043\210\201\211\171" +
    "\001\002\000\002\001\uff43\000\002\001\uff37\000\066\052" +
    "\106\053\065\062\111\130\116\134\064\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\uff3a\000\002\001\uff38\000\010\051\u020f\052\120\060\u026f" +
    "\001\002\000\162\031\152\032\176\033\202\034\203\036" +
    "\156\037\226\044\123\047\253\053\u0271\072\263\073\150" +
    "\077\217\100\157\102\260\103\247\104\205\105\161\112" +
    "\204\113\255\114\045\115\166\124\145\125\207\142\232" +
    "\143\231\150\047\152\213\153\250\154\214\155\040\156" +
    "\230\157\153\160\223\161\167\162\044\164\141\165\140" +
    "\166\137\167\136\170\135\171\134\172\133\173\131\174" +
    "\127\175\246\176\245\177\242\200\241\201\240\202\237" +
    "\203\236\204\235\205\233\207\043\210\201\211\171\001" +
    "\002\000\002\001\uff48\000\164\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\101\270\102\260\103\247" +
    "\104\205\105\161\112\204\113\255\114\045\115\166\124" +
    "\145\125\207\142\232\143\231\150\047\152\213\153\250" +
    "\154\214\155\040\156\230\157\153\160\223\161\167\162" +
    "\044\164\141\165\140\166\137\167\136\170\135\171\134" +
    "\172\133\173\131\174\127\175\246\176\245\177\242\200" +
    "\241\201\240\202\237\203\236\204\235\205\233\207\043" +
    "\210\201\211\171\001\002\000\002\001\uff42\000\010\142" +
    "\053\160\046\207\043\001\002\000\010\051\u01f3\052\120" +
    "\060\u0275\001\002\000\162\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\u0277\072\263" +
    "\073\150\077\217\100\157\102\260\103\247\104\205\105" +
    "\161\112\204\113\255\114\045\115\166\124\145\125\207" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\002\001\uff46\000\164\031\152\032\176" +
    "\033\202\034\203\036\156\037\226\044\123\047\253\053" +
    "\267\072\263\073\150\077\217\100\157\101\270\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\002\001\uff40\000" +
    "\010\051\u01f8\052\120\060\u027a\001\002\000\162\031\152" +
    "\032\176\033\202\034\203\036\156\037\226\044\123\047" +
    "\253\053\u027c\072\263\073\150\077\217\100\157\102\260" +
    "\103\247\104\205\105\161\112\204\113\255\114\045\115" +
    "\166\124\145\125\207\142\232\143\231\150\047\152\213" +
    "\153\250\154\214\155\040\156\230\157\153\160\223\161" +
    "\167\162\044\164\141\165\140\166\137\167\136\170\135" +
    "\171\134\172\133\173\131\174\127\175\246\176\245\177" +
    "\242\200\241\201\240\202\237\203\236\204\235\205\233" +
    "\207\043\210\201\211\171\001\002\000\002\001\uff47\000" +
    "\164\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\101\270\102\260\103\247\104\205\105\161\112\204" +
    "\113\255\114\045\115\166\124\145\125\207\142\232\143" +
    "\231\150\047\152\213\153\250\154\214\155\040\156\230" +
    "\157\153\160\223\161\167\162\044\164\141\165\140\166" +
    "\137\167\136\170\135\171\134\172\133\173\131\174\127" +
    "\175\246\176\245\177\242\200\241\201\240\202\237\203" +
    "\236\204\235\205\233\207\043\210\201\211\171\001\002" +
    "\000\002\001\uff41\000\004\051\u027f\001\002\000\162\031" +
    "\152\032\176\033\202\034\203\036\156\037\226\044\123" +
    "\047\253\053\267\072\263\073\150\077\217\100\157\102" +
    "\260\103\247\104\205\105\161\112\204\113\255\114\045" +
    "\115\166\124\145\125\207\142\232\143\231\150\047\152" +
    "\213\153\250\154\214\155\040\156\230\157\153\160\223" +
    "\161\167\162\044\164\141\165\140\166\137\167\136\170" +
    "\135\171\134\172\133\173\131\174\127\175\246\176\245" +
    "\177\242\200\241\201\240\202\237\203\236\204\235\205" +
    "\233\207\043\210\201\211\171\001\002\000\004\100\305" +
    "\001\002\000\002\001\uff96\000\004\140\u0283\001\002\000" +
    "\004\051\u0284\001\002\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\004\100\305\001\002\000\002\001" +
    "\uff97\000\004\100\305\001\002\000\002\001\uff95\000\162" +
    "\031\152\032\176\033\202\034\203\036\156\037\226\044" +
    "\123\047\253\053\267\072\263\073\150\077\217\100\157" +
    "\102\260\103\247\104\205\105\161\112\204\113\255\114" +
    "\045\115\166\124\145\125\207\142\232\143\231\150\047" +
    "\152\213\153\250\154\214\155\040\156\230\157\153\160" +
    "\223\161\167\162\044\164\141\165\140\166\137\167\136" +
    "\170\135\171\134\172\133\173\131\174\127\175\246\176" +
    "\245\177\242\200\241\201\240\202\237\203\236\204\235" +
    "\205\233\207\043\210\201\211\171\001\002\000\066\052" +
    "\106\053\065\062\111\130\116\134\064\142\053\160\046" +
    "\164\114\165\113\166\112\167\110\170\107\171\105\172" +
    "\104\173\103\174\101\175\077\176\076\177\075\200\074" +
    "\201\073\202\072\203\071\204\070\205\066\207\043\001" +
    "\uff3a\000\066\052\106\053\065\062\111\130\116\134\064" +
    "\142\053\160\046\164\114\165\113\166\112\167\110\170" +
    "\107\171\105\172\104\173\103\174\101\175\077\176\076" +
    "\177\075\200\074\201\073\202\072\203\071\204\070\205" +
    "\066\207\043\001\uff3a\000\004\137\u028d\001\002\000\004" +
    "\051\u028e\001\002\000\162\031\152\032\176\033\202\034" +
    "\203\036\156\037\226\044\123\047\253\053\267\072\263" +
    "\073\150\077\217\100\157\102\260\103\247\104\205\105" +
    "\161\112\204\113\255\114\045\115\166\124\145\125\207" +
    "\142\232\143\231\150\047\152\213\153\250\154\214\155" +
    "\040\156\230\157\153\160\223\161\167\162\044\164\141" +
    "\165\140\166\137\167\136\170\135\171\134\172\133\173" +
    "\131\174\127\175\246\176\245\177\242\200\241\201\240" +
    "\202\237\203\236\204\235\205\233\207\043\210\201\211" +
    "\171\001\002\000\004\100\305\001\002\000\002\001\uff99" +
    "\000\004\140\u0292\001\002\000\004\051\u0293\001\002\000" +
    "\162\031\152\032\176\033\202\034\203\036\156\037\226" +
    "\044\123\047\253\053\267\072\263\073\150\077\217\100" +
    "\157\102\260\103\247\104\205\105\161\112\204\113\255" +
    "\114\045\115\166\124\145\125\207\142\232\143\231\150" +
    "\047\152\213\153\250\154\214\155\040\156\230\157\153" +
    "\160\223\161\167\162\044\164\141\165\140\166\137\167" +
    "\136\170\135\171\134\172\133\173\131\174\127\175\246" +
    "\176\245\177\242\200\241\201\240\202\237\203\236\204" +
    "\235\205\233\207\043\210\201\211\171\001\002\000\004" +
    "\100\305\001\002\000\002\001\uff9a\000\004\100\305\001" +
    "\002\000\002\001\uff98\000\006\042\u0299\101\u029a\001\ufffd" +
    "\000\010\142\053\160\046\207\043\001\002\000\020\114" +
    "\045\142\041\150\047\155\040\160\046\162\044\207\043" +
    "\001\uff7a\000\004\137\u02a0\001\002\000\004\052\u029e\001" +
    "\uff79\000\002\001\uff78\000\020\114\045\142\041\150\047" +
    "\155\040\160\046\162\044\207\043\001\002\000\002\001" +
    "\uff77\000\004\042\u02a1\001\ufffb\000\010\142\053\160\046" +
    "\207\043\001\002\000\002\001\ufffa\000\002\001\ufffc\000" +
    "\010\100\305\101\u02b3\105\u02b2\001\uff80\000\004\055\u02a6" +
    "\001\002\000\010\142\053\160\046\207\043\001\002\000" +
    "\010\100\305\101\u02aa\105\u02a9\001\002\000\002\001\uff8f" +
    "\000\066\052\106\053\065\062\111\130\116\134\064\142" +
    "\053\160\046\164\114\165\113\166\112\167\110\170\107" +
    "\171\105\172\104\173\103\174\101\175\077\176\076\177" +
    "\075\200\074\201\073\202\072\203\071\204\070\205\066" +
    "\207\043\001\uff3a\000\066\052\106\053\065\062\111\130" +
    "\116\134\064\142\053\160\046\164\114\165\113\166\112" +
    "\167\110\170\107\171\105\172\104\173\103\174\101\175" +
    "\077\176\076\177\075\200\074\201\073\202\072\203\071" +
    "\204\070\205\066\207\043\001\uff3a\000\004\137\u02ac\001" +
    "\002\000\004\100\305\001\002\000\002\001\uff90\000\004" +
    "\140\u02af\001\002\000\004\100\305\001\002\000\002\001" +
    "\uff91\000\002\001\uff92\000\066\052\106\053\065\062\111" +
    "\130\116\134\064\142\053\160\046\164\114\165\113\166" +
    "\112\167\110\170\107\171\105\172\104\173\103\174\101" +
    "\175\077\176\076\177\075\200\074\201\073\202\072\203" +
    "\071\204\070\205\066\207\043\001\uff3a\000\066\052\106" +
    "\053\065\062\111\130\116\134\064\142\053\160\046\164" +
    "\114\165\113\166\112\167\110\170\107\171\105\172\104" +
    "\173\103\174\101\175\077\176\076\177\075\200\074\201" +
    "\073\202\072\203\071\204\070\205\066\207\043\001\uff3a" +
    "\000\004\137\u02b5\001\002\000\004\100\305\001\002\000" +
    "\002\001\uff93\000\004\140\u02b8\001\002\000\004\100\305" +
    "\001\002\000\002\001\uff94\000\012\060\u02bb\100\305\101" +
    "\u02bf\105\u02be\001\002\000\162\031\152\032\176\033\202" +
    "\034\203\036\156\037\226\044\123\047\253\053\267\072" +
    "\263\073\150\077\217\100\157\102\260\103\247\104\205" +
    "\105\161\112\204\113\255\114\045\115\166\124\145\125" +
    "\207\142\232\143\231\150\047\152\213\153\250\154\214" +
    "\155\040\156\230\157\153\160\223\161\167\162\044\164" +
    "\141\165\140\166\137\167\136\170\135\171\134\172\133" +
    "\173\131\174\127\175\246\176\245\177\242\200\241\201" +
    "\240\202\237\203\236\204\235\205\233\207\043\210\201" +
    "\211\171\001\002\000\002\001\uff9d\000\002\001\uff9c\000" +
    "\012\140\u02c5\142\053\160\046\207\043\001\002\000\012" +
    "\137\u02c1\142\053\160\046\207\043\001\002\000\006\052" +
    "\120\137\u02c3\001\002\000\006\060\u02bb\100\305\001\002" +
    "\000\002\001\uff9e\000\006\060\u02bb\100\305\001\002\000" +
    "\002\001\uff9f\000\006\060\u02bb\100\305\001\002\000\006" +
    "\052\120\140\u02c7\001\002\000\006\060\u02bb\100\305\001" +
    "\002\000\002\001\uffa1\000\002\001\uffa0\000\002\001\uff9b" +
    "\000\004\100\u02cc\001\002\000\012\136\u02ce\142\053\160" +
    "\046\207\043\001\002\000\006\052\120\136\u02cf\001\002" +
    "\000\002\001\ufff8\000\002\001\ufff9\000\006\050\017\141" +
    "\024\001\002\000\012\100\305\142\053\160\046\207\043" +
    "\001\002\000\014\100\305\142\053\160\046\163\u02d4\207" +
    "\043\001\uffdd\000\004\163\u02d4\001\uffdd\000\052\061\u030f" +
    "\164\u030d\165\u030c\166\u030b\167\u030a\170\u0309\171\u0308\172" +
    "\u0307\173\u0306\174\u0305\175\u0304\176\u0303\177\u0302\200\u0301" +
    "\201\u0300\202\u02ff\203\u02fe\204\u02fd\205\u02fc\206\u030e\001" +
    "\002\000\004\066\u02d7\001\uffd9\000\004\063\u02f9\001\uffe1" +
    "\000\006\061\u02d8\210\u02db\001\002\000\004\210\u02f0\001" +
    "\002\000\022\077\u02e9\114\u02ee\142\u02ec\150\u02ef\155\u02eb" +
    "\160\046\162\u02ed\207\043\001\002\000\004\052\u02e6\001" +
    "\uffda\000\030\046\u02de\051\u02dd\055\u02df\077\uffa5\114\uffa5" +
    "\142\uffa5\150\uffa5\155\uffa5\160\uffa5\162\uffa5\207\uffa5\001" +
    "\uffdc\000\002\001\uffb2\000\004\210\u02e8\001\002\000\006" +
    "\061\u02d8\210\u02e5\001\002\000\004\055\u02e0\001\002\000" +
    "\004\210\u02e1\001\002\000\004\051\u02e2\001\uffa4\000\004" +
    "\210\u02e3\001\002\000\002\001\uffa3\000\004\052\u02e6\001" +
    "\uffdb\000\006\051\u02dd\055\u02df\001\uffa5\000\006\061\u02d8" +
    "\210\u02e5\001\002\000\002\001\uffb1\000\002\001\uffa2\000" +
    "\002\001\uffae\000\002\001\uffb0\000\002\001\uffab\000\004" +
    "\151\054\001\uffad\000\002\001\uffac\000\002\001\uffaa\000" +
    "\002\001\uffaf\000\006\051\u02f1\055\u02f2\001\uffa9\000\004" +
    "\210\u02f7\001\002\000\004\055\u02f3\001\002\000\004\210" +
    "\u02f4\001\002\000\004\051\u02f5\001\uffa8\000\004\210\u02f6" +
    "\001\002\000\002\001\uffa7\000\002\001\uffa6\000\002\001" +
    "\uffe6\000\004\210\u02fa\001\002\000\002\001\uffe0\000\004" +
    "\052\u0311\001\uffde\000\002\001\uffc6\000\002\001\uffc7\000" +
    "\002\001\uffc8\000\002\001\uffc9\000\002\001\uffca\000\002" +
    "\001\uffcb\000\002\001\uffcc\000\002\001\uffcd\000\002\001" +
    "\uffce\000\002\001\uffd0\000\002\001\uffd1\000\002\001\uffd2" +
    "\000\002\001\uffd3\000\002\001\uffd4\000\002\001\uffd5\000" +
    "\002\001\uffd6\000\002\001\uffd7\000\002\001\uffd8\000\002" +
    "\001\uffcf\000\050\164\u030d\165\u030c\166\u030b\167\u030a\170" +
    "\u0309\171\u0308\172\u0307\173\u0306\174\u0305\175\u0304\176\u0303" +
    "\177\u0302\200\u0301\201\u0300\202\u02ff\203\u02fe\204\u02fd\205" +
    "\u02fc\206\u030e\001\002\000\004\052\u0311\001\uffdf\000\050" +
    "\164\u0323\165\u0322\166\u0321\167\u0320\170\u031f\171\u031e\172" +
    "\u031d\173\u031c\174\u031b\175\u031a\176\u0319\177\u0318\200\u0317" +
    "\201\u0316\202\u0315\203\u0314\204\u0313\205\u0312\206\u0324\001" +
    "\002\000\002\001\uffb3\000\002\001\uffb4\000\002\001\uffb5" +
    "\000\002\001\uffb6\000\002\001\uffb7\000\002\001\uffb8\000" +
    "\002\001\uffb9\000\002\001\uffba\000\002\001\uffbb\000\002" +
    "\001\uffbd\000\002\001\uffbe\000\002\001\uffbf\000\002\001" +
    "\uffc0\000\002\001\uffc1\000\002\001\uffc2\000\002\001\uffc3" +
    "\000\002\001\uffc4\000\002\001\uffc5\000\002\001\uffbc\000" +
    "\004\163\u02d4\001\uffdd\000\004\163\u02d4\001\uffdd\000\004" +
    "\066\u02d7\001\uffd9\000\004\063\u02f9\001\uffe1\000\002\001" +
    "\uffe2\000\004\066\u02d7\001\uffd9\000\004\063\u02f9\001\uffe1" +
    "\000\002\001\uffe7\000\004\066\u02d7\001\uffd9\000\004\063" +
    "\u02f9\001\uffe1\000\002\001\uffe3\000\012\052\120\060\u0333" +
    "\064\u0332\076\u0331\001\uff81\000\020\114\045\142\041\150" +
    "\047\155\040\160\046\162\044\207\043\001\002\000\020" +
    "\114\045\142\041\150\047\155\040\160\046\162\044\207" +
    "\043\001\002\000\020\114\045\142\041\150\047\155\040" +
    "\160\046\162\044\207\043\001\002\000\004\100\u0335\001" +
    "\002\000\066\052\106\053\065\062\111\130\116\134\064" +
    "\142\053\160\046\164\114\165\113\166\112\167\110\170" +
    "\107\171\105\172\104\173\103\174\101\175\077\176\076" +
    "\177\075\200\074\201\073\202\072\203\071\204\070\205" +
    "\066\207\043\001\uff3a\000\004\136\u0337\001\002\000\004" +
    "\100\305\001\uff34\000\002\001\uff8c\000\002\001\uff33\000" +
    "\004\131\u033c\001\uff82\000\002\001\uff76\000\020\114\045" +
    "\142\041\150\047\155\040\160\046\162\044\207\043\001" +
    "\002\000\002\001\uff75\000\002\001\uff84\000\004\131\u033c" +
    "\001\uff83\000\002\001\uff85\000\002\001\uff87\000\004\101" +
    "\u0343\001\uffff\000\012\061\u0345\142\053\160\046\207\043" +
    "\001\002\000\002\001\uff6d\000\010\142\053\160\046\207" +
    "\043\001\002\000\006\052\u0347\137\u0348\001\002\000\012" +
    "\061\u034a\142\053\160\046\207\043\001\002\000\002\001" +
    "\ufffe\000\002\001\uff6b\000\010\142\053\160\046\207\043" +
    "\001\002\000\002\001\uff6a\000\002\001\uff6c\000\004\100" +
    "\305\001\002\000\004\100\305\001\002\000\002\001\ufff7" +
    "\000\002\001\ufff5\000\002\001\ufff6\000\014\100\305\142" +
    "\053\160\046\163\u02d4\207\043\001\uffdd\000\004\163\u02d4" +
    "\001\uffdd\000\004\066\u02d7\001\uffd9\000\004\063\u02f9\001" +
    "\uffe1\000\002\001\uffe8\000\004\163\u02d4\001\uffdd\000\004" +
    "\163\u02d4\001\uffdd\000\004\066\u02d7\001\uffd9\000\004\063" +
    "\u02f9\001\uffe1\000\002\001\uffe4\000\004\066\u02d7\001\uffd9" +
    "\000\004\063\u02f9\001\uffe1\000\002\001\uffe9\000\004\066" +
    "\u02d7\001\uffd9\000\004\063\u02f9\001\uffe1\000\002\001\uffe5" +
    "\000\004\100\305\001\002\000\004\100\305\001\002\000" +
    "\002\001\ufff4\000\002\001\ufff2\000\002\001\ufff3\000\002" +
    "\001\000" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0365\000\006\106\003\107\004\001\001\000\002\001" +
    "\001\000\024\012\024\013\013\037\014\051\010\067\006" +
    "\076\017\100\021\101\022\126\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\031\u0363\053\u0361\054\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\u0352\053\u0351\054\041\001\001\000\002" +
    "\001\001\000\010\031\u034e\053\u034c\054\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\u0341\054\041" +
    "\001\001\000\006\100\021\101\u033f\001\001\000\010\053" +
    "\066\054\041\055\u032f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\053\u02ca\054\041\001\001" +
    "\000\006\053\u02b9\054\041\001\001\000\010\053\u02a3\054" +
    "\041\102\u02a4\001\001\000\006\053\u0297\054\041\001\001" +
    "\000\010\053\036\054\041\102\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\051\054\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u0286\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\233\054\041\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\016\014\101\015\077\017\u0281\053\066\054\041\055" +
    "\114\001\001\000\016\014\101\015\077\017\062\053\066" +
    "\054\041\055\114\001\001\000\002\001\001\000\010\053" +
    "\066\054\041\055\u0273\001\001\000\010\053\066\054\041" +
    "\055\u026d\001\001\000\012\014\u020b\053\066\054\041\055" +
    "\u01e1\001\001\000\002\001\001\000\012\014\u0209\053\066" +
    "\054\041\055\u01e1\001\001\000\012\014\u0207\053\066\054" +
    "\041\055\u01e1\001\001\000\012\014\u0205\053\066\054\041" +
    "\055\u01e1\001\001\000\012\014\u0203\053\066\054\041\055" +
    "\u01e1\001\001\000\012\014\u0201\053\066\054\041\055\u01e1" +
    "\001\001\000\012\014\u01ff\053\066\054\041\055\u01e1\001" +
    "\001\000\012\014\u01fd\053\066\054\041\055\u01e1\001\001" +
    "\000\012\014\u01fb\053\066\054\041\055\u01e1\001\001\000" +
    "\002\001\001\000\012\014\u0243\053\066\054\041\055\u01e1" +
    "\001\001\000\002\001\001\000\012\014\u023f\053\066\054" +
    "\041\055\u01e1\001\001\000\012\014\u023b\053\066\054\041" +
    "\055\u01e1\001\001\000\012\014\u0237\053\066\054\041\055" +
    "\u01e1\001\001\000\016\014\101\015\077\017\u026a\053\066" +
    "\054\041\055\114\001\001\000\012\014\u0233\053\066\054" +
    "\041\055\u01e1\001\001\000\012\014\u022f\053\066\054\041" +
    "\055\u01e1\001\001\000\010\053\066\054\041\055\u0265\001" +
    "\001\000\012\014\u022b\053\066\054\041\055\u01e1\001\001" +
    "\000\012\014\u0227\053\066\054\041\055\u01e1\001\001\000" +
    "\012\014\u0223\053\066\054\041\055\u01e1\001\001\000\002" +
    "\001\001\000\010\053\066\054\041\055\116\001\001\000" +
    "\002\001\001\000\006\053\u0260\054\041\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u025d\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\157\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\006\053\u025c\054\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u0242\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\233\054\041\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\002\001\001\000\140\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u023e\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\233\054\041\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\002" +
    "\001\001\000\140\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u023a\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\140\002\131" +
    "\003\127\004\217\005\125\006\164\007\163\010\174\011" +
    "\173\021\142\022\141\023\243\024\242\025\207\026\205" +
    "\030\u0236\031\253\040\124\041\123\042\251\043\250\044" +
    "\261\045\260\046\226\047\224\053\233\054\041\057\154" +
    "\060\153\061\145\062\143\063\177\064\176\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\172" +
    "\117\171\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\140\002\131\003\127\004\217\005\125" +
    "\006\164\007\163\010\174\011\173\021\142\022\141\023" +
    "\243\024\242\025\207\026\205\030\u0232\031\253\040\124" +
    "\041\123\042\251\043\250\044\261\045\260\046\226\047" +
    "\224\053\233\054\041\057\154\060\153\061\145\062\143" +
    "\063\177\064\176\065\150\066\146\070\162\071\161\073" +
    "\211\074\210\102\167\116\172\117\171\120\223\121\221" +
    "\122\256\123\255\124\215\125\214\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u022e\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\140\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u022a\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\233\054\041\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u0226\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u0222\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\004\072\u024f\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\101\015\u0130\016\u024c\053\066\054\041\055" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\004" +
    "\217\005\u0248\006\164\007\163\021\142\022\141\023\243" +
    "\024\242\031\253\046\226\047\224\053\233\054\041\061" +
    "\u0249\062\362\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\124\215\125\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\004\217\006\164\007\163" +
    "\021\142\022\141\023\243\024\242\031\253\046\226\047" +
    "\224\053\233\054\041\061\145\062\143\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\u0247\117" +
    "\u0246\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\150\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\014\u01e4\020\u01e2\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\311\031" +
    "\253\033\312\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\u01e6\054\041\055\u01e1\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\002\001\001\000\140\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u01d4\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\233\054\041\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\004\217\005\u01ce\006\164" +
    "\007\163\010\174\011\173\021\142\022\141\023\243\024" +
    "\242\031\253\046\226\047\224\053\233\054\041\057\u01cf" +
    "\060\u0193\061\145\062\143\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\022\004\217\005\u01cd\031\253\053\233\054\041\102\167" +
    "\124\u01cc\125\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\101\015\u0130\016\u019f\053\066\054" +
    "\041\055\114\001\001\000\074\004\217\006\164\007\163" +
    "\021\142\022\141\023\243\024\242\031\253\046\226\047" +
    "\224\053\233\054\041\061\145\062\143\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\u019e\117" +
    "\u019d\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\074\004\217\006\164\007" +
    "\163\021\142\022\141\023\243\024\242\031\253\046\226" +
    "\047\224\053\233\054\041\061\145\062\143\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\u0162" +
    "\117\u0161\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\101\015\u0130\016\u015f\053\066\054" +
    "\041\055\114\001\001\000\022\004\217\005\u015e\031\253" +
    "\053\233\054\041\102\167\124\u015d\125\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\004\217\005\u015b" +
    "\006\164\007\163\021\142\022\141\023\243\024\242\031" +
    "\253\046\226\047\224\053\233\054\041\061\u015c\062\u0114" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\124\215\125\214\001\001\000\002\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u015a\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\101\015" +
    "\u0130\016\u014e\053\066\054\041\055\114\001\001\000\002" +
    "\001\001\000\016\014\101\015\u0130\016\u014c\053\066\054" +
    "\041\055\114\001\001\000\074\004\217\006\164\007\163" +
    "\021\142\022\141\023\243\024\242\031\253\046\226\047" +
    "\224\053\233\054\041\061\145\062\143\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\u014b\117" +
    "\u014a\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\074\004\217\006\164\007\163\021\142\022" +
    "\141\023\243\024\242\031\253\046\226\047\224\053\233" +
    "\054\041\061\145\062\143\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\u0147\117\u0146\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\140\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\u0144\031\253\040\124\041\123\042\251" +
    "\043\250\044\261\045\260\046\226\047\224\053\233\054" +
    "\041\057\154\060\153\061\145\062\143\063\177\064\176" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\002\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u0142\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\140\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u0140\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\233\054\041\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u013e\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u013c\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\140\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\u013a\031\253\040\124\041\123\042\251" +
    "\043\250\044\261\045\260\046\226\047\224\053\233\054" +
    "\041\057\154\060\153\061\145\062\143\063\177\064\176" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\140\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u0138\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\233\054\041\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\140\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u0136\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\233\054\041\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\140\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u0134\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\016\014\101" +
    "\015\u0130\016\u012f\053\066\054\041\055\114\001\001\000" +
    "\074\004\217\006\164\007\163\021\142\022\141\023\243" +
    "\024\242\031\253\046\226\047\224\053\233\054\041\061" +
    "\145\062\143\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\u012e\117\u012d\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\217\005\u012c\031\253\053" +
    "\233\054\041\102\167\124\u012b\125\371\001\001\000\002" +
    "\001\001\000\074\004\217\006\164\007\163\021\142\022" +
    "\141\023\243\024\242\031\253\046\226\047\224\053\233" +
    "\054\041\061\145\062\143\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\u011c\117\u011b\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\277\053\276" +
    "\054\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\217\005\263\006\164\007\163\021\142\022\141" +
    "\023\243\024\242\031\253\046\226\047\224\053\233\054" +
    "\041\061\265\062\264\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\124\215\125\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\144\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\270\031\253\035\271\036" +
    "\272\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\233\054\041\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\140\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\274\031\253\040\124\041\123\042\251" +
    "\043\250\044\261\045\260\046\226\047\224\053\233\054" +
    "\041\057\154\060\153\061\145\062\143\063\177\064\176" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\131" +
    "\003\127\004\217\005\125\006\164\007\163\010\174\011" +
    "\173\021\142\022\141\023\243\024\242\025\207\026\205" +
    "\030\301\031\253\040\124\041\123\042\251\043\250\044" +
    "\261\045\260\046\226\047\224\053\233\054\041\057\154" +
    "\060\153\061\145\062\143\063\177\064\176\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\172" +
    "\117\171\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\006\031\306\034\303\001\001\000\010" +
    "\050\315\053\276\054\041\001\001\000\002\001\001\000" +
    "\142\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\311\031\253\033\312\040\124\041\123" +
    "\042\251\043\250\044\261\045\260\046\226\047\224\053" +
    "\233\054\041\057\154\060\153\061\145\062\143\063\177" +
    "\064\176\065\150\066\146\070\162\071\161\073\211\074" +
    "\210\102\167\116\172\117\171\120\223\121\221\122\256" +
    "\123\255\124\215\125\214\001\001\000\140\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\307\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\233\054\041\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\314\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\217\005\u011a\007\333\022\327\024\242\031\253\047" +
    "\322\053\233\054\041\062\143\066\330\071\335\074\210" +
    "\102\167\121\u0119\125\214\001\001\000\042\004\217\005" +
    "\u0118\007\333\022\327\024\242\031\253\047\322\053\233" +
    "\054\041\062\143\066\330\071\335\074\210\102\167\121" +
    "\u0117\125\214\001\001\000\042\004\217\005\u0116\007\333" +
    "\022\327\024\242\031\253\047\322\053\233\054\041\062" +
    "\143\066\330\071\335\074\210\102\167\121\u0115\125\214" +
    "\001\001\000\042\004\217\005\336\007\333\022\327\024" +
    "\242\031\253\047\322\053\233\054\041\062\143\066\330" +
    "\071\335\074\210\102\167\121\332\125\214\001\001\000" +
    "\002\001\001\000\036\004\217\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\264\066\330\071" +
    "\335\074\210\102\167\125\214\001\001\000\036\004\217" +
    "\007\333\022\327\024\242\031\253\047\322\053\233\054" +
    "\041\062\u0114\066\330\071\335\074\210\102\167\125\214" +
    "\001\001\000\016\004\217\031\253\053\233\054\041\102" +
    "\167\125\u0113\001\001\000\016\004\217\031\253\053\233" +
    "\054\041\102\167\125\u0112\001\001\000\004\072\u010c\001" +
    "\001\000\002\001\001\000\016\004\217\031\253\053\233" +
    "\054\041\102\167\125\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\217\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\362\066\330\071" +
    "\335\074\210\102\167\125\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\217\007\341\024\242\031" +
    "\253\053\233\054\041\102\167\125\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\144\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\270\031\253\035\344\036\272\040\124\041\123" +
    "\042\251\043\250\044\261\045\260\046\226\047\224\053" +
    "\233\054\041\057\154\060\153\061\145\062\143\063\177" +
    "\064\176\065\150\066\146\070\162\071\161\073\211\074" +
    "\210\102\167\116\172\117\171\120\223\121\221\122\256" +
    "\123\255\124\215\125\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\144\002\131\003\127\004\217\005\125" +
    "\006\164\007\163\010\174\011\173\021\142\022\141\023" +
    "\243\024\242\025\207\026\205\030\270\031\253\035\355" +
    "\036\272\040\124\041\123\042\251\043\250\044\261\045" +
    "\260\046\226\047\224\053\233\054\041\057\154\060\153" +
    "\061\145\062\143\063\177\064\176\065\150\066\146\070" +
    "\162\071\161\073\211\074\210\102\167\116\172\117\171" +
    "\120\223\121\221\122\256\123\255\124\215\125\214\001" +
    "\001\000\016\004\217\031\253\053\233\054\041\102\167" +
    "\125\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\144\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\270\031" +
    "\253\035\360\036\272\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\217\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\370\066\330\071" +
    "\335\074\210\102\167\125\214\001\001\000\036\004\217" +
    "\007\333\022\327\024\242\031\253\047\322\053\233\054" +
    "\041\062\367\066\330\071\335\074\210\102\167\125\214" +
    "\001\001\000\036\004\217\007\333\022\327\024\242\031" +
    "\253\047\322\053\233\054\041\062\366\066\330\071\335" +
    "\074\210\102\167\125\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\004\217\007\333\022\327\024\242\031\253\047\373\053" +
    "\233\054\041\071\335\074\210\102\167\125\214\001\001" +
    "\000\002\001\001\000\030\004\217\007\333\022\327\024" +
    "\242\031\253\053\233\054\041\071\335\074\375\102\167" +
    "\125\214\001\001\000\002\001\001\000\024\004\217\007" +
    "\333\024\242\031\253\053\233\054\041\071\u0111\102\167" +
    "\125\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\004\217\007\333\022\327\024" +
    "\242\031\253\053\233\054\041\071\335\074\u0110\102\167" +
    "\125\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\217\005\u012a\007\333\022\327" +
    "\024\242\031\253\047\322\053\233\054\041\062\143\066" +
    "\330\071\335\074\210\102\167\121\u0120\123\u0129\125\214" +
    "\001\001\000\044\004\217\005\u0128\007\333\022\327\024" +
    "\242\031\253\047\322\053\233\054\041\062\143\066\330" +
    "\071\335\074\210\102\167\121\u0120\123\u0127\125\214\001" +
    "\001\000\044\004\217\005\u0122\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\143\066\330\071" +
    "\335\074\210\102\167\121\u0120\123\u0121\125\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\004\217\007\333\022\327\024\242\031\253\047\322" +
    "\053\233\054\041\062\143\066\330\071\335\074\210\102" +
    "\167\121\u0119\125\214\001\001\000\040\004\217\007\333" +
    "\022\327\024\242\031\253\047\322\053\233\054\041\062" +
    "\143\066\330\071\335\074\210\102\167\121\u0117\125\214" +
    "\001\001\000\040\004\217\007\333\022\327\024\242\031" +
    "\253\047\322\053\233\054\041\062\143\066\330\071\335" +
    "\074\210\102\167\121\u0115\125\214\001\001\000\040\004" +
    "\217\007\333\022\327\024\242\031\253\047\322\053\233" +
    "\054\041\062\143\066\330\071\335\074\210\102\167\121" +
    "\332\125\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\306\034\u0132\001\001\000\002\001\001\000\014\014" +
    "\101\015\u0133\053\066\054\041\055\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\306\034\u014d\001\001\000\002\001\001\000" +
    "\006\031\306\034\u014f\001\001\000\002\001\001\000\032" +
    "\004\217\005\u0151\007\333\022\327\024\242\031\253\053" +
    "\233\054\041\071\335\074\375\102\167\125\214\001\001" +
    "\000\002\001\001\000\004\054\u0153\001\001\000\002\001" +
    "\001\000\040\004\217\005\u0159\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\370\066\330\071" +
    "\335\074\210\102\167\125\214\001\001\000\040\004\217" +
    "\005\u0158\007\333\022\327\024\242\031\253\047\322\053" +
    "\233\054\041\062\366\066\330\071\335\074\210\102\167" +
    "\125\214\001\001\000\040\004\217\005\u0157\007\333\022" +
    "\327\024\242\031\253\047\322\053\233\054\041\062\367" +
    "\066\330\071\335\074\210\102\167\125\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\306\034\u0160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0166\004\217\005\u0165\007\333\011\u016a\022\327" +
    "\024\242\031\253\041\u0164\043\250\045\260\047\322\053" +
    "\233\054\041\060\153\062\143\066\330\071\335\074\210" +
    "\102\167\117\u0169\121\u0120\123\u0171\125\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\217\007\333\022\327\024\242\031\253\047\322\053" +
    "\233\054\041\062\143\066\330\071\335\074\210\102\167" +
    "\117\u0194\121\u0120\123\u0171\125\214\001\001\000\050\004" +
    "\217\007\333\011\u016a\022\327\024\242\031\253\047\322" +
    "\053\233\054\041\060\u0193\062\143\066\330\071\335\074" +
    "\210\102\167\117\u0169\121\u0120\123\u0171\125\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\217\007" +
    "\333\022\327\024\242\031\253\047\322\053\233\054\041" +
    "\062\143\066\330\071\335\074\210\102\167\117\u017a\121" +
    "\u0120\123\u0171\125\214\001\001\000\044\004\217\007\333" +
    "\022\327\024\242\031\253\047\322\053\233\054\041\062" +
    "\143\066\330\071\335\074\210\102\167\117\u0179\121\u0120" +
    "\123\u0171\125\214\001\001\000\044\004\217\007\333\022" +
    "\327\024\242\031\253\047\322\053\233\054\041\062\143" +
    "\066\330\071\335\074\210\102\167\117\u0178\121\u0120\123" +
    "\u0171\125\214\001\001\000\044\004\217\007\333\022\327" +
    "\024\242\031\253\047\322\053\233\054\041\062\143\066" +
    "\330\071\335\074\210\102\167\117\u0177\121\u0120\123\u0171" +
    "\125\214\001\001\000\044\004\217\007\333\022\327\024" +
    "\242\031\253\047\322\053\233\054\041\062\143\066\330" +
    "\071\335\074\210\102\167\117\u0176\121\u0120\123\u0171\125" +
    "\214\001\001\000\044\004\217\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\143\066\330\071" +
    "\335\074\210\102\167\117\u0172\121\u0120\123\u0171\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\217\007\333\022\327\024\242\031\253\047\322\053\233" +
    "\054\041\062\143\066\330\071\335\074\210\102\167\121" +
    "\u0120\123\u0129\125\214\001\001\000\042\004\217\007\333" +
    "\022\327\024\242\031\253\047\322\053\233\054\041\062" +
    "\143\066\330\071\335\074\210\102\167\121\u0120\123\u0127" +
    "\125\214\001\001\000\042\004\217\007\333\022\327\024" +
    "\242\031\253\047\322\053\233\054\041\062\143\066\330" +
    "\071\335\074\210\102\167\121\u0120\123\u0121\125\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\217\007" +
    "\333\022\327\024\242\031\253\047\322\053\233\054\041" +
    "\062\143\066\330\071\335\074\210\102\167\117\u0192\121" +
    "\u0120\123\u0171\125\214\001\001\000\044\004\217\007\333" +
    "\022\327\024\242\031\253\047\322\053\233\054\041\062" +
    "\143\066\330\071\335\074\210\102\167\117\u0191\121\u0120" +
    "\123\u0171\125\214\001\001\000\044\004\217\007\333\022" +
    "\327\024\242\031\253\047\322\053\233\054\041\062\143" +
    "\066\330\071\335\074\210\102\167\117\u0190\121\u0120\123" +
    "\u0171\125\214\001\001\000\044\004\217\007\333\022\327" +
    "\024\242\031\253\047\322\053\233\054\041\062\143\066" +
    "\330\071\335\074\210\102\167\117\u018f\121\u0120\123\u0171" +
    "\125\214\001\001\000\044\004\217\007\333\022\327\024" +
    "\242\031\253\047\322\053\233\054\041\062\143\066\330" +
    "\071\335\074\210\102\167\117\u018e\121\u0120\123\u0171\125" +
    "\214\001\001\000\044\004\217\007\333\022\327\024\242" +
    "\031\253\047\322\053\233\054\041\062\143\066\330\071" +
    "\335\074\210\102\167\117\u018d\121\u0120\123\u0171\125\214" +
    "\001\001\000\044\004\217\007\333\022\327\024\242\031" +
    "\253\047\322\053\233\054\041\062\143\066\330\071\335" +
    "\074\210\102\167\117\u018c\121\u0120\123\u0171\125\214\001" +
    "\001\000\044\004\217\007\333\022\327\024\242\031\253" +
    "\047\322\053\233\054\041\062\143\066\330\071\335\074" +
    "\210\102\167\117\u018b\121\u0120\123\u0171\125\214\001\001" +
    "\000\044\004\217\007\333\022\327\024\242\031\253\047" +
    "\322\053\233\054\041\062\143\066\330\071\335\074\210" +
    "\102\167\117\u018a\121\u0120\123\u0171\125\214\001\001\000" +
    "\044\004\217\007\333\022\327\024\242\031\253\047\322" +
    "\053\233\054\041\062\143\066\330\071\335\074\210\102" +
    "\167\117\u0189\121\u0120\123\u0171\125\214\001\001\000\044" +
    "\004\217\007\333\022\327\024\242\031\253\047\322\053" +
    "\233\054\041\062\143\066\330\071\335\074\210\102\167" +
    "\117\u0188\121\u0120\123\u0171\125\214\001\001\000\044\004" +
    "\217\007\333\022\327\024\242\031\253\047\322\053\233" +
    "\054\041\062\143\066\330\071\335\074\210\102\167\117" +
    "\u0187\121\u0120\123\u0171\125\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\003\u0166\004\217\007\333\011\u016a\022\327\024" +
    "\242\031\253\041\u0198\043\u0199\045\260\047\322\053\233" +
    "\054\041\060\153\062\143\066\330\071\335\074\210\102" +
    "\167\117\u0169\121\u0120\123\u0171\125\214\001\001\000\050" +
    "\004\217\007\333\011\u016a\022\327\024\242\031\253\047" +
    "\322\053\233\054\041\060\u0197\062\143\066\330\071\335" +
    "\074\210\102\167\117\u0169\121\u0120\123\u0171\125\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\u0166\004\217\007\333\011\u016a\022\327\024" +
    "\242\031\253\043\u019c\045\u019b\047\322\053\233\054\041" +
    "\060\153\062\143\066\330\071\335\074\210\102\167\117" +
    "\u0169\121\u0120\123\u0171\125\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\306\034\u01a0\001\001\000\002\001\001\000\144" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\270\031\253\035\u01a2\036\272\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\u0166\004\217\005\u01a5\007" +
    "\333\011\u016a\022\327\024\242\026\u01a6\031\253\041\123" +
    "\043\250\045\260\047\322\053\233\054\041\060\153\062" +
    "\143\066\330\071\335\074\210\102\167\117\u0169\121\u0120" +
    "\123\u0171\125\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\u0166\004\217\007\333\011\u016a\022\327" +
    "\024\242\031\253\041\u0164\043\250\045\260\047\322\053" +
    "\233\054\041\060\153\062\143\066\330\071\335\074\210" +
    "\102\167\117\u0169\121\u0120\123\u0171\125\214\001\001\000" +
    "\074\004\217\006\164\007\163\021\142\022\141\023\243" +
    "\024\242\031\253\046\226\047\224\053\233\054\041\061" +
    "\145\062\143\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\u01cb\117\u01ca\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\074\004\217" +
    "\006\164\007\163\021\142\022\141\023\243\024\242\031" +
    "\253\046\226\047\224\053\233\054\041\061\145\062\143" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\u01c9\117\u01c8\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\074\004\217\006\164\007" +
    "\163\021\142\022\141\023\243\024\242\031\253\046\226" +
    "\047\224\053\233\054\041\061\145\062\143\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\u01c7" +
    "\117\u01c6\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\074\004\217\006\164\007\163\021\142" +
    "\022\141\023\243\024\242\031\253\046\226\047\224\053" +
    "\233\054\041\061\145\062\143\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\u01c5\117\u01c4\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\074\004\217\006\164\007\163\021\142\022\141\023" +
    "\243\024\242\031\253\046\226\047\224\053\233\054\041" +
    "\061\145\062\143\065\150\066\146\070\162\071\161\073" +
    "\211\074\210\102\167\116\u01c3\117\u01c2\120\223\121\221" +
    "\122\256\123\255\124\215\125\214\001\001\000\074\004" +
    "\217\006\164\007\163\021\142\022\141\023\243\024\242" +
    "\031\253\046\226\047\224\053\233\054\041\061\145\062" +
    "\143\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\u01c1\117\u01c0\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\074\004\217\006\164" +
    "\007\163\021\142\022\141\023\243\024\242\031\253\046" +
    "\226\047\224\053\233\054\041\061\145\062\143\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\u01bf\117\u01be\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\074\004\217\006\164\007\163\021" +
    "\142\022\141\023\243\024\242\031\253\046\226\047\224" +
    "\053\233\054\041\061\145\062\143\065\150\066\146\070" +
    "\162\071\161\073\211\074\210\102\167\116\u01bd\117\u01bc" +
    "\120\223\121\221\122\256\123\255\124\215\125\214\001" +
    "\001\000\074\004\217\006\164\007\163\021\142\022\141" +
    "\023\243\024\242\031\253\046\226\047\224\053\233\054" +
    "\041\061\145\062\143\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\u01bb\117\u01ba\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\074" +
    "\004\217\006\164\007\163\021\142\022\141\023\243\024" +
    "\242\031\253\046\226\047\224\053\233\054\041\061\145" +
    "\062\143\065\150\066\146\070\162\071\161\073\211\074" +
    "\210\102\167\116\u01b9\117\u01b8\120\223\121\221\122\256" +
    "\123\255\124\215\125\214\001\001\000\074\004\217\006" +
    "\164\007\163\021\142\022\141\023\243\024\242\031\253" +
    "\046\226\047\224\053\233\054\041\061\145\062\143\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\u01b7\117\u01b6\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\074\004\217\006\164\007\163" +
    "\021\142\022\141\023\243\024\242\031\253\046\226\047" +
    "\224\053\233\054\041\061\145\062\143\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\u01b5\117" +
    "\u01b4\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\217\005\u01d1\031\253\053\233\054\041\102\167\125\351" +
    "\001\001\000\002\001\001\000\024\004\217\005\u01d3\007" +
    "\341\024\242\031\253\053\233\054\041\102\167\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\144\002\131\003\127\004\217\005\125\006\164" +
    "\007\163\010\174\011\173\014\u0243\021\142\022\141\023" +
    "\243\024\242\025\207\026\205\030\u0242\031\253\040\124" +
    "\041\123\042\251\043\250\044\261\045\260\046\226\047" +
    "\224\053\u01e6\054\041\055\u01e1\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\144\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\014\u023f\021\142\022\141\023\243\024" +
    "\242\025\207\026\205\030\u023e\031\253\040\124\041\123" +
    "\042\251\043\250\044\261\045\260\046\226\047\224\053" +
    "\u01e6\054\041\055\u01e1\057\154\060\153\061\145\062\143" +
    "\063\177\064\176\065\150\066\146\070\162\071\161\073" +
    "\211\074\210\102\167\116\172\117\171\120\223\121\221" +
    "\122\256\123\255\124\215\125\214\001\001\000\144\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\014\u023b\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\u023a\031\253\040\124\041\123\042\251" +
    "\043\250\044\261\045\260\046\226\047\224\053\u01e6\054" +
    "\041\055\u01e1\057\154\060\153\061\145\062\143\063\177" +
    "\064\176\065\150\066\146\070\162\071\161\073\211\074" +
    "\210\102\167\116\172\117\171\120\223\121\221\122\256" +
    "\123\255\124\215\125\214\001\001\000\144\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\014\u0237\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u0236\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\u01e6\054\041\055" +
    "\u01e1\057\154\060\153\061\145\062\143\063\177\064\176" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\144\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\014\u0233" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u0232\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\u01e6\054\041\055\u01e1\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\144\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\014\u022f\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u022e\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\u01e6\054\041\055\u01e1\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\144\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\014\u022b\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u022a\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\u01e6\054\041\055\u01e1\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\144\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\014\u0227\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u0226\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\u01e6\054\041\055\u01e1\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\144" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\014\u0223\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u0222\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\u01e6" +
    "\054\041\055\u01e1\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\010\053\066" +
    "\054\041\055\u021d\001\001\000\010\053\066\054\041\055" +
    "\u021c\001\001\000\002\001\001\000\006\031\306\034\u0213" +
    "\001\001\000\010\053\066\054\041\055\u020d\001\001\000" +
    "\002\001\001\000\144\002\131\003\127\004\217\005\125" +
    "\006\164\007\163\010\174\011\173\014\u020b\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u0144\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\u01e6\054\041\055\u01e1\057\154\060\153" +
    "\061\145\062\143\063\177\064\176\065\150\066\146\070" +
    "\162\071\161\073\211\074\210\102\167\116\172\117\171" +
    "\120\223\121\221\122\256\123\255\124\215\125\214\001" +
    "\001\000\002\001\001\000\144\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\014\u0209\021" +
    "\142\022\141\023\243\024\242\025\207\026\205\030\u0142" +
    "\031\253\040\124\041\123\042\251\043\250\044\261\045" +
    "\260\046\226\047\224\053\u01e6\054\041\055\u01e1\057\154" +
    "\060\153\061\145\062\143\063\177\064\176\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\172" +
    "\117\171\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\144\002\131\003\127\004\217\005\125" +
    "\006\164\007\163\010\174\011\173\014\u0207\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u0140\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\u01e6\054\041\055\u01e1\057\154\060\153" +
    "\061\145\062\143\063\177\064\176\065\150\066\146\070" +
    "\162\071\161\073\211\074\210\102\167\116\172\117\171" +
    "\120\223\121\221\122\256\123\255\124\215\125\214\001" +
    "\001\000\144\002\131\003\127\004\217\005\125\006\164" +
    "\007\163\010\174\011\173\014\u0205\021\142\022\141\023" +
    "\243\024\242\025\207\026\205\030\u013e\031\253\040\124" +
    "\041\123\042\251\043\250\044\261\045\260\046\226\047" +
    "\224\053\u01e6\054\041\055\u01e1\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\144\002\131\003\127\004\217\005\125\006\164\007\163" +
    "\010\174\011\173\014\u0203\021\142\022\141\023\243\024" +
    "\242\025\207\026\205\030\u013c\031\253\040\124\041\123" +
    "\042\251\043\250\044\261\045\260\046\226\047\224\053" +
    "\u01e6\054\041\055\u01e1\057\154\060\153\061\145\062\143" +
    "\063\177\064\176\065\150\066\146\070\162\071\161\073" +
    "\211\074\210\102\167\116\172\117\171\120\223\121\221" +
    "\122\256\123\255\124\215\125\214\001\001\000\144\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\014\u0201\021\142\022\141\023\243\024\242\025" +
    "\207\026\205\030\u013a\031\253\040\124\041\123\042\251" +
    "\043\250\044\261\045\260\046\226\047\224\053\u01e6\054" +
    "\041\055\u01e1\057\154\060\153\061\145\062\143\063\177" +
    "\064\176\065\150\066\146\070\162\071\161\073\211\074" +
    "\210\102\167\116\172\117\171\120\223\121\221\122\256" +
    "\123\255\124\215\125\214\001\001\000\144\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\014\u01ff\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u0138\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\u01e6\054\041\055" +
    "\u01e1\057\154\060\153\061\145\062\143\063\177\064\176" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\144\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\014\u01fd" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u0136\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\u01e6\054\041\055\u01e1\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\144\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\014\u01fb\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u0134\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\u01e6\054\041\055\u01e1\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\010\053\066\054\041\055\u01f1\001\001\000" +
    "\010\053\066\054\041\055\u01f6\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u01f3\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u01f5\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u01f8\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u01fa\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\140\002\131\003\127" +
    "\004\217\005\125\006\164\007\163\010\174\011\173\021" +
    "\142\022\141\023\243\024\242\025\207\026\205\030\u020f" +
    "\031\253\040\124\041\123\042\251\043\250\044\261\045" +
    "\260\046\226\047\224\053\233\054\041\057\154\060\153" +
    "\061\145\062\143\063\177\064\176\065\150\066\146\070" +
    "\162\071\161\073\211\074\210\102\167\116\172\117\171" +
    "\120\223\121\221\122\256\123\255\124\215\125\214\001" +
    "\001\000\002\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u0211\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\002\001\001\000\012\014\u0217\053\066\054\041\055\u01e1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\066\054\041\055\u020d\001\001\000\002" +
    "\001\001\000\140\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u0219\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u021b\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\140\002\131\003\127\004" +
    "\217\005\125\006\164\007\163\010\174\011\173\021\142" +
    "\022\141\023\243\024\242\025\207\026\205\030\u021f\031" +
    "\253\040\124\041\123\042\251\043\250\044\261\045\260" +
    "\046\226\047\224\053\233\054\041\057\154\060\153\061" +
    "\145\062\143\063\177\064\176\065\150\066\146\070\162" +
    "\071\161\073\211\074\210\102\167\116\172\117\171\120" +
    "\223\121\221\122\256\123\255\124\215\125\214\001\001" +
    "\000\002\001\001\000\140\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u0221\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\233\054\041\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\217\005\u024b\007" +
    "\333\022\327\024\242\031\253\047\373\053\233\054\041" +
    "\071\335\074\210\102\167\125\214\001\001\000\002\001" +
    "\001\000\006\031\306\034\u024d\001\001\000\002\001\001" +
    "\000\026\004\217\005\u0251\007\333\024\242\031\253\053" +
    "\233\054\041\071\u0111\102\167\125\214\001\001\000\032" +
    "\004\217\005\u0250\007\333\022\327\024\242\031\253\053" +
    "\233\054\041\071\335\074\u0110\102\167\125\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\126\002\131\003" +
    "\127\004\217\005\u0256\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\031\253\040\u0255\041" +
    "\u0198\042\251\043\u0257\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\052\004\217\005\u0254\007\333" +
    "\011\u016a\022\327\024\242\031\253\047\322\053\233\054" +
    "\041\060\u0197\062\143\066\330\071\335\074\210\102\167" +
    "\117\u0169\121\u0120\123\u0171\125\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\122\002\131\003\127\004\217\005\u0259\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\031\253\042\u025a\043\u019c\044\u025b\045\u019b\046\226\047" +
    "\224\053\233\054\041\057\154\060\153\061\145\062\143" +
    "\065\150\066\146\070\162\071\161\073\211\074\210\102" +
    "\167\116\172\117\171\120\223\121\221\122\256\123\255" +
    "\124\215\125\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u025f\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u0262\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u0264\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\140\002\131\003\127\004\217\005\125\006" +
    "\164\007\163\010\174\011\173\021\142\022\141\023\243" +
    "\024\242\025\207\026\205\030\u0267\031\253\040\124\041" +
    "\123\042\251\043\250\044\261\045\260\046\226\047\224" +
    "\053\233\054\041\057\154\060\153\061\145\062\143\063" +
    "\177\064\176\065\150\066\146\070\162\071\161\073\211" +
    "\074\210\102\167\116\172\117\171\120\223\121\221\122" +
    "\256\123\255\124\215\125\214\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u0269\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\101\015\077\017\u026c\053\066\054" +
    "\041\055\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\140\002\131\003\127\004\217\005\125\006\164\007" +
    "\163\010\174\011\173\021\142\022\141\023\243\024\242" +
    "\025\207\026\205\030\u026f\031\253\040\124\041\123\042" +
    "\251\043\250\044\261\045\260\046\226\047\224\053\233" +
    "\054\041\057\154\060\153\061\145\062\143\063\177\064" +
    "\176\065\150\066\146\070\162\071\161\073\211\074\210" +
    "\102\167\116\172\117\171\120\223\121\221\122\256\123" +
    "\255\124\215\125\214\001\001\000\002\001\001\000\140" +
    "\002\131\003\127\004\217\005\125\006\164\007\163\010" +
    "\174\011\173\021\142\022\141\023\243\024\242\025\207" +
    "\026\205\030\u0271\031\253\040\124\041\123\042\251\043" +
    "\250\044\261\045\260\046\226\047\224\053\233\054\041" +
    "\057\154\060\153\061\145\062\143\063\177\064\176\065" +
    "\150\066\146\070\162\071\161\073\211\074\210\102\167" +
    "\116\172\117\171\120\223\121\221\122\256\123\255\124" +
    "\215\125\214\001\001\000\002\001\001\000\010\053\066" +
    "\054\041\055\u0278\001\001\000\002\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u0275\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\002\001\001\000\140\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u0277\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\233\054\041\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u027a\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\002\001\001\000\140\002\131\003" +
    "\127\004\217\005\125\006\164\007\163\010\174\011\173" +
    "\021\142\022\141\023\243\024\242\025\207\026\205\030" +
    "\u027c\031\253\040\124\041\123\042\251\043\250\044\261" +
    "\045\260\046\226\047\224\053\233\054\041\057\154\060" +
    "\153\061\145\062\143\063\177\064\176\065\150\066\146" +
    "\070\162\071\161\073\211\074\210\102\167\116\172\117" +
    "\171\120\223\121\221\122\256\123\255\124\215\125\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u027f\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\004\031\u0280\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\140\002\131" +
    "\003\127\004\217\005\125\006\164\007\163\010\174\011" +
    "\173\021\142\022\141\023\243\024\242\025\207\026\205" +
    "\030\u0284\031\253\040\124\041\123\042\251\043\250\044" +
    "\261\045\260\046\226\047\224\053\233\054\041\057\154" +
    "\060\153\061\145\062\143\063\177\064\176\065\150\066" +
    "\146\070\162\071\161\073\211\074\210\102\167\116\172" +
    "\117\171\120\223\121\221\122\256\123\255\124\215\125" +
    "\214\001\001\000\004\031\u0285\001\001\000\002\001\001" +
    "\000\004\031\u0287\001\001\000\002\001\001\000\140\002" +
    "\131\003\127\004\217\005\125\006\164\007\163\010\174" +
    "\011\173\021\142\022\141\023\243\024\242\025\207\026" +
    "\205\030\u0295\031\253\040\124\041\123\042\251\043\250" +
    "\044\261\045\260\046\226\047\224\053\233\054\041\057" +
    "\154\060\153\061\145\062\143\063\177\064\176\065\150" +
    "\066\146\070\162\071\161\073\211\074\210\102\167\116" +
    "\172\117\171\120\223\121\221\122\256\123\255\124\215" +
    "\125\214\001\001\000\016\014\101\015\077\017\u0290\053" +
    "\066\054\041\055\114\001\001\000\016\014\101\015\077" +
    "\017\u028b\053\066\054\041\055\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\140\002\131\003\127\004\217" +
    "\005\125\006\164\007\163\010\174\011\173\021\142\022" +
    "\141\023\243\024\242\025\207\026\205\030\u028e\031\253" +
    "\040\124\041\123\042\251\043\250\044\261\045\260\046" +
    "\226\047\224\053\233\054\041\057\154\060\153\061\145" +
    "\062\143\063\177\064\176\065\150\066\146\070\162\071" +
    "\161\073\211\074\210\102\167\116\172\117\171\120\223" +
    "\121\221\122\256\123\255\124\215\125\214\001\001\000" +
    "\004\031\u028f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\140\002\131\003\127\004\217\005" +
    "\125\006\164\007\163\010\174\011\173\021\142\022\141" +
    "\023\243\024\242\025\207\026\205\030\u0293\031\253\040" +
    "\124\041\123\042\251\043\250\044\261\045\260\046\226" +
    "\047\224\053\233\054\041\057\154\060\153\061\145\062" +
    "\143\063\177\064\176\065\150\066\146\070\162\071\161" +
    "\073\211\074\210\102\167\116\172\117\171\120\223\121" +
    "\221\122\256\123\255\124\215\125\214\001\001\000\004" +
    "\031\u0294\001\001\000\002\001\001\000\004\031\u0296\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u02a2" +
    "\054\041\001\001\000\014\053\233\054\041\102\u029c\103" +
    "\u029b\104\u029a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\233\054\041\102\u029e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\053\u02a1" +
    "\054\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u02b0\001\001\000\002\001\001\000\006\053\u02a6" +
    "\054\041\001\001\000\004\031\u02a7\001\001\000\002\001" +
    "\001\000\016\014\101\015\077\017\u02ad\053\066\054\041" +
    "\055\114\001\001\000\016\014\101\015\077\017\u02aa\053" +
    "\066\054\041\055\114\001\001\000\002\001\001\000\004" +
    "\031\u02ac\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u02af\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\101\015\077\017\u02b6\053\066\054\041\055" +
    "\114\001\001\000\016\014\101\015\077\017\u02b3\053\066" +
    "\054\041\055\114\001\001\000\002\001\001\000\004\031" +
    "\u02b5\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u02b8\001\001\000\002\001\001\000\006\031\u02bc\052" +
    "\u02bb\001\001\000\140\002\131\003\127\004\217\005\125" +
    "\006\164\007\163\010\174\011\173\021\142\022\141\023" +
    "\243\024\242\025\207\026\205\030\u02c9\031\253\040\124" +
    "\041\123\042\251\043\250\044\261\045\260\046\226\047" +
    "\224\053\233\054\041\057\154\060\153\061\145\062\143" +
    "\063\177\064\176\065\150\066\146\070\162\071\161\073" +
    "\211\074\210\102\167\116\172\117\171\120\223\121\221" +
    "\122\256\123\255\124\215\125\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\066\054\041\055\u02c5" +
    "\001\001\000\010\053\066\054\041\055\u02bf\001\001\000" +
    "\002\001\001\000\006\031\u02bc\052\u02c1\001\001\000\002" +
    "\001\001\000\006\031\u02bc\052\u02c3\001\001\000\002\001" +
    "\001\000\006\031\u02bc\052\u02c8\001\001\000\002\001\001" +
    "\000\006\031\u02bc\052\u02c7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\066\054\041\055\u02cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u02d0\001\001" +
    "\000\010\031\u02d2\053\u02d1\054\041\001\001\000\012\031" +
    "\u0325\053\u0324\054\041\115\u0326\001\001\000\004\115\u02d4" +
    "\001\001\000\004\114\u02fa\001\001\000\004\075\u02d5\001" +
    "\001\000\004\027\u02f7\001\001\000\010\111\u02d8\112\u02db" +
    "\113\u02d9\001\001\000\002\001\001\000\006\053\u02e9\054" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\111\u02d8\112\u02db\113" +
    "\u02e3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u02d8\112\u02e6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\u030f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\u032c\001\001\000\004\115\u0329" +
    "\001\001\000\004\075\u0327\001\001\000\004\027\u0328\001" +
    "\001\000\002\001\001\000\004\075\u032a\001\001\000\004" +
    "\027\u032b\001\001\000\002\001\001\000\004\075\u032d\001" +
    "\001\000\004\027\u032e\001\001\000\002\001\001\000\004" +
    "\077\u0333\001\001\000\012\053\233\054\041\102\u033a\105" +
    "\u033e\001\001\000\010\053\233\054\041\102\u033d\001\001" +
    "\000\012\053\233\054\041\102\u033a\105\u0339\001\001\000" +
    "\002\001\001\000\016\014\101\015\077\017\u0335\053\066" +
    "\054\041\055\114\001\001\000\002\001\001\000\006\031" +
    "\u0338\032\u0337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\233\054" +
    "\041\102\u033c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\053\u0343\054\041\056\u0345\001\001" +
    "\000\002\001\001\000\006\053\u034b\054\041\001\001\000" +
    "\002\001\001\000\006\053\u0348\054\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\053\u034a\054\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0350" +
    "\001\001\000\004\031\u034f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\u0357\053\u0356" +
    "\054\041\115\u0358\001\001\000\004\115\u0353\001\001\000" +
    "\004\075\u0354\001\001\000\004\027\u0355\001\001\000\002" +
    "\001\001\000\004\115\u035e\001\001\000\004\115\u035b\001" +
    "\001\000\004\075\u0359\001\001\000\004\027\u035a\001\001" +
    "\000\002\001\001\000\004\075\u035c\001\001\000\004\027" +
    "\u035d\001\001\000\002\001\001\000\004\075\u035f\001\001" +
    "\000\004\027\u0360\001\001\000\002\001\001\000\004\031" +
    "\u0365\001\001\000\004\031\u0364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = AlloyCore.isDebug();
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
	ch.put(CompSym.WITH, "with"); 		    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT1,"\u2780" );	    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT2,"\u2781" );       // [HASLab] colorful marks
    ch.put(CompSym.PFEAT3,"\u2782" );    	// [HASLab] colorful marks
    ch.put(CompSym.PFEAT4,"\u2783" );   	// [HASLab] colorful marks
    ch.put(CompSym.PFEAT5,"\u2784" );	    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT6,"\u2785" );	    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT7,"\u2786" );	    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT8,"\u2787" );	    // [HASLab] colorful marks
    ch.put(CompSym.PFEAT9,"\u2788" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT1,"\u278A" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT2,"\u278B" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT3,"\u278C" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT4,"\u278D" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT5,"\u278E" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT6,"\u278F" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT7,"\u2790" );	    // [HASLab] colorful marks
    ch.put(CompSym.NFEAT8,"\u2791" );	    // [HASLab] colorful marks
	ch.put(CompSym.NFEAT9,"\u2792" );	    // [HASLab] colorful marks
	ch.put(CompSym.PFEAT0,"\uD83C\uDD0B" ); // [HASLab] colorful marks
	TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";
  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (!filename.endsWith(INT_LIB_NAME + ".als"))
            u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = MarkdownHandler.strip(content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    // [HASLab] colorful feature scope, not yet type checked
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c, FeatureScope f) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f); // [HASLab]
        else
          parser.alloymodule.addCommand(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x, f); // [HASLab]
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // BaseExpr ::= LBRACE Declz RBRACE 
            {
               CUP$CompParser$result = case426(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
               CUP$CompParser$result = case425(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // BaseExpr ::= Super 
            {
               CUP$CompParser$result = case424(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // BaseExpr ::= AT Name 
            {
               CUP$CompParser$result = case423(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // BaseExpr ::= SigRef 
            {
               CUP$CompParser$result = case422(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // BaseExpr ::= NFEAT9 Expr NFEAT9 
            {
               CUP$CompParser$result = case421(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // BaseExpr ::= NFEAT8 Expr NFEAT8 
            {
               CUP$CompParser$result = case420(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // BaseExpr ::= NFEAT7 Expr NFEAT7 
            {
               CUP$CompParser$result = case419(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // BaseExpr ::= NFEAT6 Expr NFEAT6 
            {
               CUP$CompParser$result = case418(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // BaseExpr ::= NFEAT5 Expr NFEAT5 
            {
               CUP$CompParser$result = case417(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // BaseExpr ::= NFEAT4 Expr NFEAT4 
            {
               CUP$CompParser$result = case416(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // BaseExpr ::= NFEAT3 Expr NFEAT3 
            {
               CUP$CompParser$result = case415(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // BaseExpr ::= NFEAT2 Expr NFEAT2 
            {
               CUP$CompParser$result = case414(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // BaseExpr ::= NFEAT1 Expr NFEAT1 
            {
               CUP$CompParser$result = case413(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // BaseExpr ::= PFEAT9 Expr PFEAT9 
            {
               CUP$CompParser$result = case412(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // BaseExpr ::= PFEAT8 Expr PFEAT8 
            {
               CUP$CompParser$result = case411(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // BaseExpr ::= PFEAT7 Expr PFEAT7 
            {
               CUP$CompParser$result = case410(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // BaseExpr ::= PFEAT6 Expr PFEAT6 
            {
               CUP$CompParser$result = case409(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // BaseExpr ::= PFEAT5 Expr PFEAT5 
            {
               CUP$CompParser$result = case408(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // BaseExpr ::= PFEAT4 Expr PFEAT4 
            {
               CUP$CompParser$result = case407(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // BaseExpr ::= PFEAT3 Expr PFEAT3 
            {
               CUP$CompParser$result = case406(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // BaseExpr ::= PFEAT2 Expr PFEAT2 
            {
               CUP$CompParser$result = case405(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // BaseExpr ::= PFEAT1 Expr PFEAT1 
            {
               CUP$CompParser$result = case404(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BaseExpr ::= LPAREN Expr RPAREN 
            {
               CUP$CompParser$result = case403(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BaseExpr ::= INTNEXT 
            {
               CUP$CompParser$result = case402(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BaseExpr ::= INTMAX 
            {
               CUP$CompParser$result = case401(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BaseExpr ::= INTMIN 
            {
               CUP$CompParser$result = case400(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BaseExpr ::= THIS 
            {
               CUP$CompParser$result = case399(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BaseExpr ::= IDEN 
            {
               CUP$CompParser$result = case398(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BaseExpr ::= STR 
            {
               CUP$CompParser$result = case397(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // BaseExpr ::= NUMBER 
            {
               CUP$CompParser$result = case396(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // UnopExprB ::= CARET UnopExprB 
            {
               CUP$CompParser$result = case395(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // UnopExprB ::= STAR UnopExprB 
            {
               CUP$CompParser$result = case394(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // UnopExprB ::= TILDE UnopExprB 
            {
               CUP$CompParser$result = case393(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // UnopExprB ::= BaseExpr 
            {
               CUP$CompParser$result = case392(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // UnopExprA ::= CARET UnopExprA 
            {
               CUP$CompParser$result = case391(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // UnopExprA ::= STAR UnopExprA 
            {
               CUP$CompParser$result = case390(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // UnopExprA ::= TILDE UnopExprA 
            {
               CUP$CompParser$result = case389(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // UnopExprA ::= CARET Bind 
            {
               CUP$CompParser$result = case388(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // UnopExprA ::= STAR Bind 
            {
               CUP$CompParser$result = case387(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // UnopExprA ::= TILDE Bind 
            {
               CUP$CompParser$result = case386(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // DotExprB ::= BracketExprB DOT SUM 
            {
               CUP$CompParser$result = case385(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // DotExprB ::= BracketExprB DOT INT 
            {
               CUP$CompParser$result = case384(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
               CUP$CompParser$result = case383(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // DotExprB ::= BracketExprB DOT DISJ 
            {
               CUP$CompParser$result = case382(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
               CUP$CompParser$result = case381(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // DotExprB ::= UnopExprB 
            {
               CUP$CompParser$result = case380(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // DotExprA ::= BracketExprB DOT Bind 
            {
               CUP$CompParser$result = case379(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // DotExprA ::= UnopExprA 
            {
               CUP$CompParser$result = case378(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
               CUP$CompParser$result = case377(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
               CUP$CompParser$result = case376(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
               CUP$CompParser$result = case375(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
               CUP$CompParser$result = case374(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
               CUP$CompParser$result = case373(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // BracketExprB ::= DotExprB 
            {
               CUP$CompParser$result = case372(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // BracketExprA ::= DotExprA 
            {
               CUP$CompParser$result = case371(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
               CUP$CompParser$result = case370(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // RangeExprB ::= BracketExprB 
            {
               CUP$CompParser$result = case369(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // RangeExprA ::= RangeExprB RANGE Bind 
            {
               CUP$CompParser$result = case368(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // RangeExprA ::= BracketExprA 
            {
               CUP$CompParser$result = case367(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
               CUP$CompParser$result = case366(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DomainExprB ::= RangeExprB 
            {
               CUP$CompParser$result = case365(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
               CUP$CompParser$result = case364(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DomainExprA ::= RangeExprA 
            {
               CUP$CompParser$result = case363(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
               CUP$CompParser$result = case362(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // RelationExprB ::= DomainExprB 
            {
               CUP$CompParser$result = case361(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // RelationExprA ::= DomainExprB RelOp Bind 
            {
               CUP$CompParser$result = case360(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // RelationExprA ::= DomainExprA 
            {
               CUP$CompParser$result = case359(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // RelOp ::= LONE_ARROW_LONE 
            {
               CUP$CompParser$result = case358(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // RelOp ::= LONE_ARROW_ONE 
            {
               CUP$CompParser$result = case357(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // RelOp ::= LONE_ARROW_SOME 
            {
               CUP$CompParser$result = case356(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // RelOp ::= LONE_ARROW_ANY 
            {
               CUP$CompParser$result = case355(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // RelOp ::= ONE_ARROW_LONE 
            {
               CUP$CompParser$result = case354(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // RelOp ::= ONE_ARROW_ONE 
            {
               CUP$CompParser$result = case353(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // RelOp ::= ONE_ARROW_SOME 
            {
               CUP$CompParser$result = case352(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // RelOp ::= ONE_ARROW_ANY 
            {
               CUP$CompParser$result = case351(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // RelOp ::= SOME_ARROW_LONE 
            {
               CUP$CompParser$result = case350(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // RelOp ::= SOME_ARROW_ONE 
            {
               CUP$CompParser$result = case349(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // RelOp ::= SOME_ARROW_SOME 
            {
               CUP$CompParser$result = case348(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // RelOp ::= SOME_ARROW_ANY 
            {
               CUP$CompParser$result = case347(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // RelOp ::= ANY_ARROW_LONE 
            {
               CUP$CompParser$result = case346(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // RelOp ::= ANY_ARROW_ONE 
            {
               CUP$CompParser$result = case345(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // RelOp ::= ANY_ARROW_SOME 
            {
               CUP$CompParser$result = case344(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // RelOp ::= ARROW 
            {
               CUP$CompParser$result = case343(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
               CUP$CompParser$result = case342(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // IntersectExprB ::= RelationExprB 
            {
               CUP$CompParser$result = case341(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
               CUP$CompParser$result = case340(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // IntersectExprA ::= RelationExprA 
            {
               CUP$CompParser$result = case339(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
               CUP$CompParser$result = case338(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // OverrideExprB ::= IntersectExprB 
            {
               CUP$CompParser$result = case337(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
               CUP$CompParser$result = case336(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // OverrideExprA ::= IntersectExprA 
            {
               CUP$CompParser$result = case335(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NumUnopExprB ::= INT NumUnopExprB 
            {
               CUP$CompParser$result = case334(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // NumUnopExprB ::= SUM NumUnopExprB 
            {
               CUP$CompParser$result = case333(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NumUnopExprB ::= HASH NumUnopExprB 
            {
               CUP$CompParser$result = case332(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // NumUnopExprB ::= OverrideExprB 
            {
               CUP$CompParser$result = case331(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // NumUnopExprA ::= INT NumUnopExprA 
            {
               CUP$CompParser$result = case330(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // NumUnopExprA ::= SUM NumUnopExprA 
            {
               CUP$CompParser$result = case329(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // NumUnopExprA ::= HASH NumUnopExprA 
            {
               CUP$CompParser$result = case328(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // NumUnopExprA ::= INT Bind 
            {
               CUP$CompParser$result = case327(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // NumUnopExprA ::= SUM Bind 
            {
               CUP$CompParser$result = case326(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // NumUnopExprA ::= HASH Bind 
            {
               CUP$CompParser$result = case325(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NumUnopExprA ::= OverrideExprA 
            {
               CUP$CompParser$result = case324(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
               CUP$CompParser$result = case323(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
               CUP$CompParser$result = case322(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
               CUP$CompParser$result = case321(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // MulExprB ::= NumUnopExprB 
            {
               CUP$CompParser$result = case320(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // MulExprA ::= MulExprB INTREM Bind 
            {
               CUP$CompParser$result = case319(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // MulExprA ::= MulExprB INTDIV Bind 
            {
               CUP$CompParser$result = case318(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // MulExprA ::= MulExprB INTMUL Bind 
            {
               CUP$CompParser$result = case317(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // MulExprA ::= NumUnopExprA 
            {
               CUP$CompParser$result = case316(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
               CUP$CompParser$result = case315(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
               CUP$CompParser$result = case314(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
               CUP$CompParser$result = case313(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
               CUP$CompParser$result = case312(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // UnionDiffExprB ::= MulExprB 
            {
               CUP$CompParser$result = case311(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
               CUP$CompParser$result = case310(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
               CUP$CompParser$result = case309(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
               CUP$CompParser$result = case308(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
               CUP$CompParser$result = case307(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // UnionDiffExprA ::= MulExprA 
            {
               CUP$CompParser$result = case306(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
               CUP$CompParser$result = case305(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
               CUP$CompParser$result = case304(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
               CUP$CompParser$result = case303(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ShiftExprB ::= UnionDiffExprB 
            {
               CUP$CompParser$result = case302(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
               CUP$CompParser$result = case301(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
               CUP$CompParser$result = case300(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
               CUP$CompParser$result = case299(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ShiftExprA ::= UnionDiffExprA 
            {
               CUP$CompParser$result = case298(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // CompareExprB ::= ShiftExprB 
            {
               CUP$CompParser$result = case297(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CompareExprB ::= SEQ ShiftExprB 
            {
               CUP$CompParser$result = case296(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CompareExprB ::= SET ShiftExprB 
            {
               CUP$CompParser$result = case295(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CompareExprB ::= ONE ShiftExprB 
            {
               CUP$CompParser$result = case294(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CompareExprB ::= LONE ShiftExprB 
            {
               CUP$CompParser$result = case293(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CompareExprB ::= SOME ShiftExprB 
            {
               CUP$CompParser$result = case292(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // CompareExprB ::= NO ShiftExprB 
            {
               CUP$CompParser$result = case291(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // CompareExprB ::= ALL ShiftExprB 
            {
               CUP$CompParser$result = case290(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
               CUP$CompParser$result = case289(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
               CUP$CompParser$result = case288(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
               CUP$CompParser$result = case287(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
               CUP$CompParser$result = case286(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
               CUP$CompParser$result = case285(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
               CUP$CompParser$result = case284(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
               CUP$CompParser$result = case283(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
               CUP$CompParser$result = case282(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
               CUP$CompParser$result = case281(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
               CUP$CompParser$result = case280(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
               CUP$CompParser$result = case279(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
               CUP$CompParser$result = case278(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CompareExprA ::= ShiftExprA 
            {
               CUP$CompParser$result = case277(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CompareExprA ::= SEQ ShiftExprA 
            {
               CUP$CompParser$result = case276(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CompareExprA ::= SET ShiftExprA 
            {
               CUP$CompParser$result = case275(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CompareExprA ::= ONE ShiftExprA 
            {
               CUP$CompParser$result = case274(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CompareExprA ::= LONE ShiftExprA 
            {
               CUP$CompParser$result = case273(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CompareExprA ::= SOME ShiftExprA 
            {
               CUP$CompParser$result = case272(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CompareExprA ::= NO ShiftExprA 
            {
               CUP$CompParser$result = case271(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CompareExprA ::= ALL ShiftExprA 
            {
               CUP$CompParser$result = case270(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
               CUP$CompParser$result = case269(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
               CUP$CompParser$result = case268(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
               CUP$CompParser$result = case267(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
               CUP$CompParser$result = case266(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
               CUP$CompParser$result = case265(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
               CUP$CompParser$result = case264(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
               CUP$CompParser$result = case263(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
               CUP$CompParser$result = case262(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
               CUP$CompParser$result = case261(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
               CUP$CompParser$result = case260(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
               CUP$CompParser$result = case259(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
               CUP$CompParser$result = case258(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NegExprB ::= NOT NegExprB 
            {
               CUP$CompParser$result = case257(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NegExprB ::= CompareExprB 
            {
               CUP$CompParser$result = case256(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NegExprA ::= NOT NegExprA 
            {
               CUP$CompParser$result = case255(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NegExprA ::= NOT Bind 
            {
               CUP$CompParser$result = case254(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NegExprA ::= CompareExprA 
            {
               CUP$CompParser$result = case253(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // AndExprB ::= AndExprB AND NegExprB 
            {
               CUP$CompParser$result = case252(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // AndExprB ::= NegExprB 
            {
               CUP$CompParser$result = case251(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // AndExprA ::= AndExprB AND Bind 
            {
               CUP$CompParser$result = case250(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // AndExprA ::= NegExprA 
            {
               CUP$CompParser$result = case249(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
               CUP$CompParser$result = case248(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
               CUP$CompParser$result = case247(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
               CUP$CompParser$result = case246(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ImpliesExprCloseB ::= AndExprB 
            {
               CUP$CompParser$result = case245(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // ImpliesExprB ::= ImpliesExprOpenB 
            {
               CUP$CompParser$result = case244(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ImpliesExprB ::= ImpliesExprCloseB 
            {
               CUP$CompParser$result = case243(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
               CUP$CompParser$result = case242(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
               CUP$CompParser$result = case241(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
               CUP$CompParser$result = case240(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
               CUP$CompParser$result = case239(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
               CUP$CompParser$result = case238(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ImpliesExprCloseA ::= AndExprA 
            {
               CUP$CompParser$result = case237(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ImpliesExprA ::= ImpliesExprOpenA 
            {
               CUP$CompParser$result = case236(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ImpliesExprA ::= ImpliesExprCloseA 
            {
               CUP$CompParser$result = case235(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
               CUP$CompParser$result = case234(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // EquivExprB ::= ImpliesExprB 
            {
               CUP$CompParser$result = case233(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // EquivExprA ::= EquivExprB IFF Bind 
            {
               CUP$CompParser$result = case232(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // EquivExprA ::= ImpliesExprA 
            {
               CUP$CompParser$result = case231(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // OrExprB ::= OrExprB OR EquivExprB 
            {
               CUP$CompParser$result = case230(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // OrExprB ::= EquivExprB 
            {
               CUP$CompParser$result = case229(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // OrExprA ::= OrExprB OR Bind 
            {
               CUP$CompParser$result = case228(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // OrExprA ::= EquivExprA 
            {
               CUP$CompParser$result = case227(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Bind ::= SUM2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case226(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Bind ::= ONE2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case225(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Bind ::= LONE2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case224(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Bind ::= SOME2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case223(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Bind ::= NO2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case222(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Bind ::= ALL2 Declp SuperOrBar 
            {
               CUP$CompParser$result = case221(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Bind ::= LET Let 
            {
               CUP$CompParser$result = case220(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Expr ::= Bind 
            {
               CUP$CompParser$result = case219(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Expr ::= OrExprB 
            {
               CUP$CompParser$result = case218(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Expr ::= OrExprA 
            {
               CUP$CompParser$result = case217(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Exprp ::= Exprp COMMA Expr 
            {
               CUP$CompParser$result = case216(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Exprp ::= Expr 
            {
               CUP$CompParser$result = case215(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Exprs ::= Exprp 
            {
               CUP$CompParser$result = case214(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Exprs ::= 
            {
               CUP$CompParser$result = case213(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SuperOrBar ::= Super 
            {
               CUP$CompParser$result = case212(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SuperOrBar ::= BAR Expr 
            {
               CUP$CompParser$result = case211(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SuperP ::= SuperP Expr 
            {
               CUP$CompParser$result = case210(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SuperP ::= Expr 
            {
               CUP$CompParser$result = case209(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Super ::= LBRACE RBRACE 
            {
               CUP$CompParser$result = case208(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Super ::= LBRACE SuperP RBRACE 
            {
               CUP$CompParser$result = case207(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SuperOpt ::= Super 
            {
               CUP$CompParser$result = case206(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SuperOpt ::= 
            {
               CUP$CompParser$result = case205(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Let ::= Name EQUALS Expr COMMA Let 
            {
               CUP$CompParser$result = case204(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Let ::= Name EQUALS Expr SuperOrBar 
            {
               CUP$CompParser$result = case203(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Decls ::= COMMA Decls 
            {
               CUP$CompParser$result = case202(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Decls ::= Declb COMMA Decls 
            {
               CUP$CompParser$result = case201(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Decls ::= Declb 
            {
               CUP$CompParser$result = case200(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Decls ::= 
            {
               CUP$CompParser$result = case199(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Declp ::= Declb 
            {
               CUP$CompParser$result = case198(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Declp ::= Declp COMMA Declb 
            {
               CUP$CompParser$result = case197(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Declz ::= Decla 
            {
               CUP$CompParser$result = case196(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Declz ::= Declz COMMA Decla 
            {
               CUP$CompParser$result = case195(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Declb ::= Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case194(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case193(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case192(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case191(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case190(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Declb ::= PART Names EQUALS DISJ Expr 
            {
               CUP$CompParser$result = case189(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Declb ::= Names EQUALS Expr 
            {
               CUP$CompParser$result = case188(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Declb ::= PRIVATE Names EQUALS Expr 
            {
               CUP$CompParser$result = case187(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
               CUP$CompParser$result = case186(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Declb ::= DISJ Names EQUALS Expr 
            {
               CUP$CompParser$result = case185(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Declb ::= EXH Names EQUALS Expr 
            {
               CUP$CompParser$result = case184(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Declb ::= PART Names EQUALS Expr 
            {
               CUP$CompParser$result = case183(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Declb ::= Decla 
            {
               CUP$CompParser$result = case182(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Decla ::= Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case181(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case180(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case179(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Decla ::= DISJ Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case178(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Decla ::= EXH Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case177(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Decla ::= PART Names COLON DISJ Expr 
            {
               CUP$CompParser$result = case176(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Decla ::= Names COLON Expr 
            {
               CUP$CompParser$result = case175(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Decla ::= PRIVATE Names COLON Expr 
            {
               CUP$CompParser$result = case174(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
               CUP$CompParser$result = case173(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Decla ::= DISJ Names COLON Expr 
            {
               CUP$CompParser$result = case172(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Decla ::= EXH Names COLON Expr 
            {
               CUP$CompParser$result = case171(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Decla ::= PART Names COLON Expr 
            {
               CUP$CompParser$result = case170(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Decla ::= NFEAT9 Decla NFEAT9 
            {
               CUP$CompParser$result = case169(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Decla ::= NFEAT8 Decla NFEAT8 
            {
               CUP$CompParser$result = case168(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Decla ::= NFEAT7 Decla NFEAT7 
            {
               CUP$CompParser$result = case167(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Decla ::= NFEAT6 Decla NFEAT6 
            {
               CUP$CompParser$result = case166(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Decla ::= NFEAT5 Decla NFEAT5 
            {
               CUP$CompParser$result = case165(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Decla ::= NFEAT4 Decla NFEAT4 
            {
               CUP$CompParser$result = case164(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Decla ::= NFEAT3 Decla NFEAT3 
            {
               CUP$CompParser$result = case163(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Decla ::= NFEAT2 Decla NFEAT2 
            {
               CUP$CompParser$result = case162(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Decla ::= NFEAT1 Decla NFEAT1 
            {
               CUP$CompParser$result = case161(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Decla ::= PFEAT9 Decla PFEAT9 
            {
               CUP$CompParser$result = case160(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Decla ::= PFEAT8 Decla PFEAT8 
            {
               CUP$CompParser$result = case159(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Decla ::= PFEAT7 Decla PFEAT7 
            {
               CUP$CompParser$result = case158(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Decla ::= PFEAT6 Decla PFEAT6 
            {
               CUP$CompParser$result = case157(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Decla ::= PFEAT5 Decla PFEAT5 
            {
               CUP$CompParser$result = case156(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Decla ::= PFEAT4 Decla PFEAT4 
            {
               CUP$CompParser$result = case155(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Decla ::= PFEAT3 Decla PFEAT3 
            {
               CUP$CompParser$result = case154(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Decla ::= PFEAT2 Decla PFEAT2 
            {
               CUP$CompParser$result = case153(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Decla ::= PFEAT1 Decla PFEAT1 
            {
               CUP$CompParser$result = case152(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Namex ::= Namex COMMA EXACTLY Name 
            {
               CUP$CompParser$result = case151(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Namex ::= Namex COMMA Name 
            {
               CUP$CompParser$result = case150(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Namex ::= EXACTLY Name 
            {
               CUP$CompParser$result = case149(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Namex ::= Name 
            {
               CUP$CompParser$result = case148(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Names ::= Names COMMA Name 
            {
               CUP$CompParser$result = case147(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Names ::= Name 
            {
               CUP$CompParser$result = case146(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NameHelper ::= NameHelper SLASH ID 
            {
               CUP$CompParser$result = case145(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NameHelper ::= ID 
            {
               CUP$CompParser$result = case144(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Name ::= SEQ SLASH NameHelper 
            {
               CUP$CompParser$result = case143(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Name ::= THIS SLASH NameHelper 
            {
               CUP$CompParser$result = case142(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Name ::= NameHelper 
            {
               CUP$CompParser$result = case141(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SigRefu ::= SigRefu PLUS SigRef 
            {
               CUP$CompParser$result = case140(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SigRefu ::= SigRef 
            {
               CUP$CompParser$result = case139(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SigRefp ::= SigRefp COMMA SigRef 
            {
               CUP$CompParser$result = case138(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SigRefp ::= SigRef 
            {
               CUP$CompParser$result = case137(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SigRefs ::= SigRefp 
            {
               CUP$CompParser$result = case136(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SigRefs ::= 
            {
               CUP$CompParser$result = case135(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SigRef ::= NONE 
            {
               CUP$CompParser$result = case134(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SigRef ::= SEQ SLASH SIGINT 
            {
               CUP$CompParser$result = case133(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SigRef ::= SIGINT 
            {
               CUP$CompParser$result = case132(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SigRef ::= STRING 
            {
               CUP$CompParser$result = case131(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SigRef ::= UNIV 
            {
               CUP$CompParser$result = case130(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SigRef ::= Name 
            {
               CUP$CompParser$result = case129(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SigIn ::= 
            {
               CUP$CompParser$result = case128(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SigIn ::= EQUALS SigRefu 
            {
               CUP$CompParser$result = case127(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SigIn ::= IN SigRefu 
            {
               CUP$CompParser$result = case126(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SigIn ::= EXTENDS SigRef 
            {
               CUP$CompParser$result = case125(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SigQuals ::= SigQual SigQuals 
            {
               CUP$CompParser$result = case124(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SigQuals ::= SIG 
            {
               CUP$CompParser$result = case123(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SigQual ::= PRIVATE 
            {
               CUP$CompParser$result = case122(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SigQual ::= SOME 
            {
               CUP$CompParser$result = case121(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SigQual ::= ONE 
            {
               CUP$CompParser$result = case120(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SigQual ::= LONE 
            {
               CUP$CompParser$result = case119(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SigQual ::= ABSTRACT 
            {
               CUP$CompParser$result = case118(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
               CUP$CompParser$result = case117(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Vis ::= PRIVATE 
            {
               CUP$CompParser$result = case116(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Vis ::= 
            {
               CUP$CompParser$result = case115(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
               CUP$CompParser$result = case114(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
               CUP$CompParser$result = case113(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
               CUP$CompParser$result = case112(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Predicate ::= Vis PRED Name Super 
            {
               CUP$CompParser$result = case111(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
               CUP$CompParser$result = case110(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
               CUP$CompParser$result = case109(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
               CUP$CompParser$result = case108(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
               CUP$CompParser$result = case107(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
               CUP$CompParser$result = case106(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Function ::= Vis FUN Name COLON Expr Super 
            {
               CUP$CompParser$result = case105(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
               CUP$CompParser$result = case104(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
               CUP$CompParser$result = case103(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MacroBody ::= EQUALS Expr 
            {
               CUP$CompParser$result = case102(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MacroBody ::= Super 
            {
               CUP$CompParser$result = case101(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Macro ::= Vis LET Name MacroBody 
            {
               CUP$CompParser$result = case100(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
               CUP$CompParser$result = case99(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
               CUP$CompParser$result = case98(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
               CUP$CompParser$result = case97(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
               CUP$CompParser$result = case96(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TypeNumber ::= NUMBER COLON NUMBER 
            {
               CUP$CompParser$result = case95(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
               CUP$CompParser$result = case94(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
               CUP$CompParser$result = case93(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TypeNumber ::= NUMBER 
            {
               CUP$CompParser$result = case92(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
               CUP$CompParser$result = case91(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
               CUP$CompParser$result = case90(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
               CUP$CompParser$result = case89(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TypeNumber ::= EXACTLY NUMBER 
            {
               CUP$CompParser$result = case88(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Typescope ::= TypeNumber NONE 
            {
               CUP$CompParser$result = case87(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Typescope ::= TypeNumber STRING 
            {
               CUP$CompParser$result = case86(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Typescope ::= TypeNumber UNIV 
            {
               CUP$CompParser$result = case85(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Typescope ::= TypeNumber SEQ 
            {
               CUP$CompParser$result = case84(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Typescope ::= TypeNumber INT 
            {
               CUP$CompParser$result = case83(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Typescope ::= TypeNumber SIGINT 
            {
               CUP$CompParser$result = case82(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Typescope ::= TypeNumber Name 
            {
               CUP$CompParser$result = case81(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Typescopes ::= Typescopes COMMA Typescope 
            {
               CUP$CompParser$result = case80(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Typescopes ::= Typescope 
            {
               CUP$CompParser$result = case79(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Featscope ::= Featscope COMMA NFEAT9 
            {
               CUP$CompParser$result = case78(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Featscope ::= Featscope COMMA NFEAT8 
            {
               CUP$CompParser$result = case77(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Featscope ::= Featscope COMMA NFEAT7 
            {
               CUP$CompParser$result = case76(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Featscope ::= Featscope COMMA NFEAT6 
            {
               CUP$CompParser$result = case75(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Featscope ::= Featscope COMMA NFEAT5 
            {
               CUP$CompParser$result = case74(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Featscope ::= Featscope COMMA NFEAT4 
            {
               CUP$CompParser$result = case73(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Featscope ::= Featscope COMMA NFEAT3 
            {
               CUP$CompParser$result = case72(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Featscope ::= Featscope COMMA NFEAT2 
            {
               CUP$CompParser$result = case71(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Featscope ::= Featscope COMMA NFEAT1 
            {
               CUP$CompParser$result = case70(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Featscope ::= Featscope COMMA PFEAT0 
            {
               CUP$CompParser$result = case69(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Featscope ::= Featscope COMMA PFEAT9 
            {
               CUP$CompParser$result = case68(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Featscope ::= Featscope COMMA PFEAT8 
            {
               CUP$CompParser$result = case67(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Featscope ::= Featscope COMMA PFEAT7 
            {
               CUP$CompParser$result = case66(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Featscope ::= Featscope COMMA PFEAT6 
            {
               CUP$CompParser$result = case65(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Featscope ::= Featscope COMMA PFEAT5 
            {
               CUP$CompParser$result = case64(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Featscope ::= Featscope COMMA PFEAT4 
            {
               CUP$CompParser$result = case63(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Featscope ::= Featscope COMMA PFEAT3 
            {
               CUP$CompParser$result = case62(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Featscope ::= Featscope COMMA PFEAT2 
            {
               CUP$CompParser$result = case61(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Featscope ::= Featscope COMMA PFEAT1 
            {
               CUP$CompParser$result = case60(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Featscope ::= NFEAT9 
            {
               CUP$CompParser$result = case59(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Featscope ::= NFEAT8 
            {
               CUP$CompParser$result = case58(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Featscope ::= NFEAT7 
            {
               CUP$CompParser$result = case57(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Featscope ::= NFEAT6 
            {
               CUP$CompParser$result = case56(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Featscope ::= NFEAT5 
            {
               CUP$CompParser$result = case55(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Featscope ::= NFEAT4 
            {
               CUP$CompParser$result = case54(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Featscope ::= NFEAT3 
            {
               CUP$CompParser$result = case53(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Featscope ::= NFEAT2 
            {
               CUP$CompParser$result = case52(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Featscope ::= NFEAT1 
            {
               CUP$CompParser$result = case51(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Featscope ::= PFEAT0 
            {
               CUP$CompParser$result = case50(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Featscope ::= PFEAT9 
            {
               CUP$CompParser$result = case49(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Featscope ::= PFEAT8 
            {
               CUP$CompParser$result = case48(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Featscope ::= PFEAT7 
            {
               CUP$CompParser$result = case47(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Featscope ::= PFEAT6 
            {
               CUP$CompParser$result = case46(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Featscope ::= PFEAT5 
            {
               CUP$CompParser$result = case45(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Featscope ::= PFEAT4 
            {
               CUP$CompParser$result = case44(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Featscope ::= PFEAT3 
            {
               CUP$CompParser$result = case43(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Featscope ::= PFEAT2 
            {
               CUP$CompParser$result = case42(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Featscope ::= PFEAT1 
            {
               CUP$CompParser$result = case41(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Scope ::= 
            {
               CUP$CompParser$result = case40(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Scope ::= FOR Typescopes 
            {
               CUP$CompParser$result = case39(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Scope ::= FOR NUMBER BUT Typescopes 
            {
               CUP$CompParser$result = case38(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Scope ::= FOR NUMBER 
            {
               CUP$CompParser$result = case37(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Product ::= 
            {
               CUP$CompParser$result = case36(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Product ::= WITH Featscope 
            {
               CUP$CompParser$result = case35(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Product ::= WITH EXACTLY Featscope 
            {
               CUP$CompParser$result = case34(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expects ::= EXPECT NUMBER 
            {
               CUP$CompParser$result = case33(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expects ::= 
            {
               CUP$CompParser$result = case32(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= Command IMPLIES CommandPrefix Name Product Scope Expects 
            {
               CUP$CompParser$result = case31(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= Command IMPLIES CommandPrefix Name Name Product Scope Expects 
            {
               CUP$CompParser$result = case30(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Command ::= CommandPrefix Name Product Scope Expects 
            {
               CUP$CompParser$result = case29(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Command ::= CommandPrefix Name Name Product Scope Expects 
            {
               CUP$CompParser$result = case28(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Command ::= Command IMPLIES CommandPrefix Super Product Scope Expects 
            {
               CUP$CompParser$result = case27(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Command ::= Command IMPLIES CommandPrefix Name Super Product Scope Expects 
            {
               CUP$CompParser$result = case26(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Command ::= CommandPrefix Super Product Scope Expects 
            {
               CUP$CompParser$result = case25(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Command ::= CommandPrefix Name Super Product Scope Expects 
            {
               CUP$CompParser$result = case24(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CommandPrefix ::= RUN 
            {
               CUP$CompParser$result = case23(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CommandPrefix ::= CHECK 
            {
               CUP$CompParser$result = case22(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= 
            {
               CUP$CompParser$result = case21(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec Command 
            {
               CUP$CompParser$result = case20(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec Macro 
            {
               CUP$CompParser$result = case19(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec Predicate 
            {
               CUP$CompParser$result = case18(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec Function 
            {
               CUP$CompParser$result = case17(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec Sig 
            {
               CUP$CompParser$result = case16(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec ASSERT STR Super 
            {
               CUP$CompParser$result = case15(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec ASSERT Name Super 
            {
               CUP$CompParser$result = case14(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec ASSERT Super 
            {
               CUP$CompParser$result = case13(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec FACT STR Super 
            {
               CUP$CompParser$result = case12(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec FACT Name Super 
            {
               CUP$CompParser$result = case11(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec FACT Super 
            {
               CUP$CompParser$result = case10(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
               CUP$CompParser$result = case9(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
               CUP$CompParser$result = case8(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
               CUP$CompParser$result = case7(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
               CUP$CompParser$result = case6(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
               CUP$CompParser$result = case5(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
               CUP$CompParser$result = case4(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
               CUP$CompParser$result = case3(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
               CUP$CompParser$result = case2(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
               CUP$CompParser$result = case1(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
               CUP$CompParser$result = case0(
                 CUP$CompParser$act_num,
                 CUP$CompParser$parser,
                 CUP$CompParser$stack,
                 CUP$CompParser$top);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }/*1*/
    //BaseExpr ::= LBRACE Declz RBRACE 
    java_cup.runtime.Symbol case426(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
    java_cup.runtime.Symbol case425(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= Super 
    java_cup.runtime.Symbol case424(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= AT Name 
    java_cup.runtime.Symbol case423(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= SigRef 
    java_cup.runtime.Symbol case422(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT9 Expr NFEAT9 
    java_cup.runtime.Symbol case421(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-9); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT8 Expr NFEAT8 
    java_cup.runtime.Symbol case420(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-8); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT7 Expr NFEAT7 
    java_cup.runtime.Symbol case419(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-7); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT6 Expr NFEAT6 
    java_cup.runtime.Symbol case418(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-6); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT5 Expr NFEAT5 
    java_cup.runtime.Symbol case417(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-5); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT4 Expr NFEAT4 
    java_cup.runtime.Symbol case416(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-4); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT3 Expr NFEAT3 
    java_cup.runtime.Symbol case415(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-3); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT2 Expr NFEAT2 
    java_cup.runtime.Symbol case414(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-2); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NFEAT1 Expr NFEAT1 
    java_cup.runtime.Symbol case413(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-1); RESULT = x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT9 Expr PFEAT9 
    java_cup.runtime.Symbol case412(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(9); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT8 Expr PFEAT8 
    java_cup.runtime.Symbol case411(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(8); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT7 Expr PFEAT7 
    java_cup.runtime.Symbol case410(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(7); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT6 Expr PFEAT6 
    java_cup.runtime.Symbol case409(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(6); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT5 Expr PFEAT5 
    java_cup.runtime.Symbol case408(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(5); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT4 Expr PFEAT4 
    java_cup.runtime.Symbol case407(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(4); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT3 Expr PFEAT3 
    java_cup.runtime.Symbol case406(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(3); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT2 Expr PFEAT2 
    java_cup.runtime.Symbol case405(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(2); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= PFEAT1 Expr PFEAT1 
    java_cup.runtime.Symbol case404(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(1); RESULT = x;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= LPAREN Expr RPAREN 
    java_cup.runtime.Symbol case403(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT = x;                                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= INTNEXT 
    java_cup.runtime.Symbol case402(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= INTMAX 
    java_cup.runtime.Symbol case401(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= INTMIN 
    java_cup.runtime.Symbol case400(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= THIS 
    java_cup.runtime.Symbol case399(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprVar.make(o, "this");                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= IDEN 
    java_cup.runtime.Symbol case398(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprVar.make(o, "iden");                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= STR 
    java_cup.runtime.Symbol case397(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprConstant x = (ExprConstant) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BaseExpr ::= NUMBER 
    java_cup.runtime.Symbol case396(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprConstant x = (ExprConstant) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprB ::= CARET UnopExprB 
    java_cup.runtime.Symbol case395(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",83, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprB ::= STAR UnopExprB 
    java_cup.runtime.Symbol case394(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",83, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprB ::= TILDE UnopExprB 
    java_cup.runtime.Symbol case393(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",83, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprB ::= BaseExpr 
    java_cup.runtime.Symbol case392(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",83, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= CARET UnopExprA 
    java_cup.runtime.Symbol case391(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= STAR UnopExprA 
    java_cup.runtime.Symbol case390(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= TILDE UnopExprA 
    java_cup.runtime.Symbol case389(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= CARET Bind 
    java_cup.runtime.Symbol case388(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= STAR Bind 
    java_cup.runtime.Symbol case387(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnopExprA ::= TILDE Bind 
    java_cup.runtime.Symbol case386(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",82, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= BracketExprB DOT SUM 
    java_cup.runtime.Symbol case385(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= BracketExprB DOT INT 
    java_cup.runtime.Symbol case384(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= BracketExprB DOT TOTALORDER 
    java_cup.runtime.Symbol case383(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= BracketExprB DOT DISJ 
    java_cup.runtime.Symbol case382(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= BracketExprB DOT UnopExprB 
    java_cup.runtime.Symbol case381(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=t(o, null, a, b,                                  null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprB ::= UnopExprB 
    java_cup.runtime.Symbol case380(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprA ::= BracketExprB DOT Bind 
    java_cup.runtime.Symbol case379(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=t(o, null, a, b,                                  null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DotExprA ::= UnopExprA 
    java_cup.runtime.Symbol case378(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
    java_cup.runtime.Symbol case377(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Expr> b = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= INT LBRACKET Exprs RBRACKET 
    java_cup.runtime.Symbol case376(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Expr> b = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
    java_cup.runtime.Symbol case375(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Expr> b = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
    java_cup.runtime.Symbol case374(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Expr> b = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
    java_cup.runtime.Symbol case373(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Expr> b = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprB ::= DotExprB 
    java_cup.runtime.Symbol case372(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                                                                                             /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //BracketExprA ::= DotExprA 
    java_cup.runtime.Symbol case371(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                                                                                             /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RangeExprB ::= RangeExprB RANGE BracketExprB 
    java_cup.runtime.Symbol case370(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RangeExprB ::= BracketExprB 
    java_cup.runtime.Symbol case369(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",55, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RangeExprA ::= RangeExprB RANGE Bind 
    java_cup.runtime.Symbol case368(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RangeExprA ::= BracketExprA 
    java_cup.runtime.Symbol case367(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",54, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DomainExprB ::= DomainExprB DOMAIN RangeExprB 
    java_cup.runtime.Symbol case366(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DomainExprB ::= RangeExprB 
    java_cup.runtime.Symbol case365(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DomainExprA ::= DomainExprB DOMAIN Bind 
    java_cup.runtime.Symbol case364(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //DomainExprA ::= RangeExprA 
    java_cup.runtime.Symbol case363(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelationExprB ::= DomainExprB RelOp RelationExprB 
    java_cup.runtime.Symbol case362(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=o.b.make(o.a, null, a, b);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelationExprB ::= DomainExprB 
    java_cup.runtime.Symbol case361(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a;                          /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",58, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelationExprA ::= DomainExprB RelOp Bind 
    java_cup.runtime.Symbol case360(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=o.b.make(o.a, null, a, b);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelationExprA ::= DomainExprA 
    java_cup.runtime.Symbol case359(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a;                          /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",57, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= LONE_ARROW_LONE 
    java_cup.runtime.Symbol case358(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= LONE_ARROW_ONE 
    java_cup.runtime.Symbol case357(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= LONE_ARROW_SOME 
    java_cup.runtime.Symbol case356(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= LONE_ARROW_ANY 
    java_cup.runtime.Symbol case355(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ONE_ARROW_LONE 
    java_cup.runtime.Symbol case354(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ONE_ARROW_ONE 
    java_cup.runtime.Symbol case353(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ONE_ARROW_SOME 
    java_cup.runtime.Symbol case352(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ONE_ARROW_ANY 
    java_cup.runtime.Symbol case351(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= SOME_ARROW_LONE 
    java_cup.runtime.Symbol case350(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= SOME_ARROW_ONE 
    java_cup.runtime.Symbol case349(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= SOME_ARROW_SOME 
    java_cup.runtime.Symbol case348(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= SOME_ARROW_ANY 
    java_cup.runtime.Symbol case347(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ANY_ARROW_LONE 
    java_cup.runtime.Symbol case346(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ANY_ARROW_ONE 
    java_cup.runtime.Symbol case345(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ANY_ARROW_SOME 
    java_cup.runtime.Symbol case344(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //RelOp ::= ARROW 
    java_cup.runtime.Symbol case343(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pair<Pos,ExprBinary.Op> RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.peek().left;
		int oright = CUP$CompParser$stack.peek().right;
		Pos o = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",56, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
    java_cup.runtime.Symbol case342(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //IntersectExprB ::= RelationExprB 
    java_cup.runtime.Symbol case341(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //IntersectExprA ::= IntersectExprB AMPERSAND Bind 
    java_cup.runtime.Symbol case340(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //IntersectExprA ::= RelationExprA 
    java_cup.runtime.Symbol case339(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
    java_cup.runtime.Symbol case338(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OverrideExprB ::= IntersectExprB 
    java_cup.runtime.Symbol case337(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",52, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
    java_cup.runtime.Symbol case336(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OverrideExprA ::= IntersectExprA 
    java_cup.runtime.Symbol case335(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",51, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprB ::= INT NumUnopExprB 
    java_cup.runtime.Symbol case334(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprB ::= SUM NumUnopExprB 
    java_cup.runtime.Symbol case333(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprB ::= HASH NumUnopExprB 
    java_cup.runtime.Symbol case332(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprB ::= OverrideExprB 
    java_cup.runtime.Symbol case331(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",48, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= INT NumUnopExprA 
    java_cup.runtime.Symbol case330(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= SUM NumUnopExprA 
    java_cup.runtime.Symbol case329(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= HASH NumUnopExprA 
    java_cup.runtime.Symbol case328(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= INT Bind 
    java_cup.runtime.Symbol case327(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= SUM Bind 
    java_cup.runtime.Symbol case326(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= HASH Bind 
    java_cup.runtime.Symbol case325(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NumUnopExprA ::= OverrideExprA 
    java_cup.runtime.Symbol case324(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",47, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprB ::= MulExprB INTREM NumUnopExprB 
    java_cup.runtime.Symbol case323(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",79, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprB ::= MulExprB INTDIV NumUnopExprB 
    java_cup.runtime.Symbol case322(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",79, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprB ::= MulExprB INTMUL NumUnopExprB 
    java_cup.runtime.Symbol case321(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",79, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprB ::= NumUnopExprB 
    java_cup.runtime.Symbol case320(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",79, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprA ::= MulExprB INTREM Bind 
    java_cup.runtime.Symbol case319(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",78, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprA ::= MulExprB INTDIV Bind 
    java_cup.runtime.Symbol case318(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",78, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprA ::= MulExprB INTMUL Bind 
    java_cup.runtime.Symbol case317(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",78, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MulExprA ::= NumUnopExprA 
    java_cup.runtime.Symbol case316(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",78, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
    java_cup.runtime.Symbol case315(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",81, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
    java_cup.runtime.Symbol case314(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",81, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
    java_cup.runtime.Symbol case313(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",81, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
    java_cup.runtime.Symbol case312(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",81, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprB ::= MulExprB 
    java_cup.runtime.Symbol case311(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",81, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
    java_cup.runtime.Symbol case310(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",80, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
    java_cup.runtime.Symbol case309(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",80, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
    java_cup.runtime.Symbol case308(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",80, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
    java_cup.runtime.Symbol case307(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",80, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //UnionDiffExprA ::= MulExprA 
    java_cup.runtime.Symbol case306(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",80, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
    java_cup.runtime.Symbol case305(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",77, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
    java_cup.runtime.Symbol case304(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",77, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
    java_cup.runtime.Symbol case303(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",77, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprB ::= UnionDiffExprB 
    java_cup.runtime.Symbol case302(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",77, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprA ::= ShiftExprB SHA Bind 
    java_cup.runtime.Symbol case301(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",76, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprA ::= ShiftExprB SHR Bind 
    java_cup.runtime.Symbol case300(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",76, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprA ::= ShiftExprB SHL Bind 
    java_cup.runtime.Symbol case299(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",76, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ShiftExprA ::= UnionDiffExprA 
    java_cup.runtime.Symbol case298(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",76, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= ShiftExprB 
    java_cup.runtime.Symbol case297(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= SEQ ShiftExprB 
    java_cup.runtime.Symbol case296(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= SET ShiftExprB 
    java_cup.runtime.Symbol case295(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= ONE ShiftExprB 
    java_cup.runtime.Symbol case294(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= LONE ShiftExprB 
    java_cup.runtime.Symbol case293(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= SOME ShiftExprB 
    java_cup.runtime.Symbol case292(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= NO ShiftExprB 
    java_cup.runtime.Symbol case291(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= ALL ShiftExprB 
    java_cup.runtime.Symbol case290(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
    java_cup.runtime.Symbol case289(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
    java_cup.runtime.Symbol case288(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTGT ShiftExprB 
    java_cup.runtime.Symbol case287(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTLT ShiftExprB 
    java_cup.runtime.Symbol case286(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
    java_cup.runtime.Symbol case285(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB NOTIN ShiftExprB 
    java_cup.runtime.Symbol case284(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB GTE ShiftExprB 
    java_cup.runtime.Symbol case283(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB LTE ShiftExprB 
    java_cup.runtime.Symbol case282(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB GT ShiftExprB 
    java_cup.runtime.Symbol case281(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB LT ShiftExprB 
    java_cup.runtime.Symbol case280(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB EQUALS ShiftExprB 
    java_cup.runtime.Symbol case279(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprB ::= CompareExprB IN ShiftExprB 
    java_cup.runtime.Symbol case278(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= ShiftExprA 
    java_cup.runtime.Symbol case277(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= SEQ ShiftExprA 
    java_cup.runtime.Symbol case276(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= SET ShiftExprA 
    java_cup.runtime.Symbol case275(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= ONE ShiftExprA 
    java_cup.runtime.Symbol case274(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= LONE ShiftExprA 
    java_cup.runtime.Symbol case273(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= SOME ShiftExprA 
    java_cup.runtime.Symbol case272(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= NO ShiftExprA 
    java_cup.runtime.Symbol case271(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= ALL ShiftExprA 
    java_cup.runtime.Symbol case270(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
    java_cup.runtime.Symbol case269(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
    java_cup.runtime.Symbol case268(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTGT ShiftExprA 
    java_cup.runtime.Symbol case267(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTLT ShiftExprA 
    java_cup.runtime.Symbol case266(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
    java_cup.runtime.Symbol case265(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB NOTIN ShiftExprA 
    java_cup.runtime.Symbol case264(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB GTE ShiftExprA 
    java_cup.runtime.Symbol case263(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB LTE ShiftExprA 
    java_cup.runtime.Symbol case262(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB GT ShiftExprA 
    java_cup.runtime.Symbol case261(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB LT ShiftExprA 
    java_cup.runtime.Symbol case260(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB EQUALS ShiftExprA 
    java_cup.runtime.Symbol case259(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CompareExprA ::= CompareExprB IN ShiftExprA 
    java_cup.runtime.Symbol case258(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NegExprB ::= NOT NegExprB 
    java_cup.runtime.Symbol case257(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NegExprB ::= CompareExprB 
    java_cup.runtime.Symbol case256(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NegExprA ::= NOT NegExprA 
    java_cup.runtime.Symbol case255(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NegExprA ::= NOT Bind 
    java_cup.runtime.Symbol case254(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NegExprA ::= CompareExprA 
    java_cup.runtime.Symbol case253(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //AndExprB ::= AndExprB AND NegExprB 
    java_cup.runtime.Symbol case252(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //AndExprB ::= NegExprB 
    java_cup.runtime.Symbol case251(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //AndExprA ::= AndExprB AND Bind 
    java_cup.runtime.Symbol case250(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //AndExprA ::= NegExprA 
    java_cup.runtime.Symbol case249(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
    java_cup.runtime.Symbol case248(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
    java_cup.runtime.Symbol case247(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Expr c = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprITE.make(o,a,b,c);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
    java_cup.runtime.Symbol case246(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Expr c = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprITE.make(o,a,b,c);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprCloseB ::= AndExprB 
    java_cup.runtime.Symbol case245(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprB ::= ImpliesExprOpenB 
    java_cup.runtime.Symbol case244(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprB ::= ImpliesExprCloseB 
    java_cup.runtime.Symbol case243(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
    java_cup.runtime.Symbol case242(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
    java_cup.runtime.Symbol case241(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Expr c = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprITE.make(o,a,b,c);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
    java_cup.runtime.Symbol case240(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
    java_cup.runtime.Symbol case239(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Expr c = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprITE.make(o,a,b,c);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
    java_cup.runtime.Symbol case238(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Expr c = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprITE.make(o,a,b,c);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprCloseA ::= AndExprA 
    java_cup.runtime.Symbol case237(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprA ::= ImpliesExprOpenA 
    java_cup.runtime.Symbol case236(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //ImpliesExprA ::= ImpliesExprCloseA 
    java_cup.runtime.Symbol case235(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //EquivExprB ::= EquivExprB IFF ImpliesExprB 
    java_cup.runtime.Symbol case234(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //EquivExprB ::= ImpliesExprB 
    java_cup.runtime.Symbol case233(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //EquivExprA ::= EquivExprB IFF Bind 
    java_cup.runtime.Symbol case232(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //EquivExprA ::= ImpliesExprA 
    java_cup.runtime.Symbol case231(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OrExprB ::= OrExprB OR EquivExprB 
    java_cup.runtime.Symbol case230(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OrExprB ::= EquivExprB 
    java_cup.runtime.Symbol case229(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",50, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OrExprA ::= OrExprB OR Bind 
    java_cup.runtime.Symbol case228(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //OrExprA ::= EquivExprA 
    java_cup.runtime.Symbol case227(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a;                                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",49, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= SUM2 Declp SuperOrBar 
    java_cup.runtime.Symbol case226(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.SUM .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= ONE2 Declp SuperOrBar 
    java_cup.runtime.Symbol case225(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.ONE .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= LONE2 Declp SuperOrBar 
    java_cup.runtime.Symbol case224(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.LONE.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= SOME2 Declp SuperOrBar 
    java_cup.runtime.Symbol case223(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.SOME.make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= NO2 Declp SuperOrBar 
    java_cup.runtime.Symbol case222(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.NO  .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= ALL2 Declp SuperOrBar 
    java_cup.runtime.Symbol case221(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Decl> a = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = ExprQt.Op.ALL .make(o, null, a, b); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Bind ::= LET Let 
    java_cup.runtime.Symbol case220(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Expr ::= Bind 
    java_cup.runtime.Symbol case219(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Expr ::= OrExprB 
    java_cup.runtime.Symbol case218(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Expr ::= OrExprA 
    java_cup.runtime.Symbol case217(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT = x;                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Exprp ::= Exprp COMMA Expr 
    java_cup.runtime.Symbol case216(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Expr> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Expr> a = (List<Expr>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 a.add(b); RESULT=a;                          /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Exprp ::= Expr 
    java_cup.runtime.Symbol case215(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Expr> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Exprs ::= Exprp 
    java_cup.runtime.Symbol case214(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Expr> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		List<Expr> x = (List<Expr>) CUP$CompParser$stack.peek().value;
		 RESULT=x;                                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Exprs ::= 
    java_cup.runtime.Symbol case213(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Expr> RESULT =null;/*3*/
		 RESULT=new ArrayList<Expr>();                /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperOrBar ::= Super 
    java_cup.runtime.Symbol case212(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=x; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperOrBar ::= BAR Expr 
    java_cup.runtime.Symbol case211(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=x; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperP ::= SuperP Expr 
    java_cup.runtime.Symbol case210(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr a = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperP ::= Expr 
    java_cup.runtime.Symbol case209(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a;                                         /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Super ::= LBRACE RBRACE 
    java_cup.runtime.Symbol case208(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Super ::= LBRACE SuperP RBRACE 
    java_cup.runtime.Symbol case207(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr x = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperOpt ::= Super 
    java_cup.runtime.Symbol case206(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=x;                                         /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SuperOpt ::= 
    java_cup.runtime.Symbol case205(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		 RESULT=null;                                      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Let ::= Name EQUALS Expr COMMA Let 
    java_cup.runtime.Symbol case204(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Let ::= Name EQUALS Expr SuperOrBar 
    java_cup.runtime.Symbol case203(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr b = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Expr x = (Expr) CUP$CompParser$stack.peek().value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decls ::= COMMA Decls 
    java_cup.runtime.Symbol case202(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		List<Decl> y = (List<Decl>) CUP$CompParser$stack.peek().value;
		 RESULT=y;                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decls ::= Declb COMMA Decls 
    java_cup.runtime.Symbol case201(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		List<Decl> y = (List<Decl>) CUP$CompParser$stack.peek().value;
		 RESULT=y; RESULT.add(0,x);                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decls ::= Declb 
    java_cup.runtime.Symbol case200(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Decl x = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decls ::= 
    java_cup.runtime.Symbol case199(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		 RESULT=new ArrayList<Decl>();                 /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declp ::= Declb 
    java_cup.runtime.Symbol case198(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		Decl y = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declp ::= Declp COMMA Declb 
    java_cup.runtime.Symbol case197(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> x = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		Decl y = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=x; RESULT.add(y);                      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declz ::= Decla 
    java_cup.runtime.Symbol case196(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		Decl y = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declz ::= Declz COMMA Decla 
    java_cup.runtime.Symbol case195(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Decl> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> x = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int yleft = CUP$CompParser$stack.peek().left;
		int yright = CUP$CompParser$stack.peek().right;
		Decl y = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=x; RESULT.add(y);                      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case194(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PRIVATE Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case193(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case192(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= DISJ Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case191(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= EXH Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case190(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PART Names EQUALS DISJ Expr 
    java_cup.runtime.Symbol case189(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= Names EQUALS Expr 
    java_cup.runtime.Symbol case188(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(null, null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PRIVATE Names EQUALS Expr 
    java_cup.runtime.Symbol case187(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(p,    null, null,  a, ExprUnary.Op.EXACTLYOF.make(null, b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PRIVATE DISJ Names EQUALS Expr 
    java_cup.runtime.Symbol case186(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= DISJ Names EQUALS Expr 
    java_cup.runtime.Symbol case185(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= EXH Names EQUALS Expr 
    java_cup.runtime.Symbol case184(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= PART Names EQUALS Expr 
    java_cup.runtime.Symbol case183(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Declb ::= Decla 
    java_cup.runtime.Symbol case182(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Decl x = (Decl) CUP$CompParser$stack.peek().value;
		 RESULT=x; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= Names COLON DISJ Expr 
    java_cup.runtime.Symbol case181(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(null, null, d,    a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PRIVATE Names COLON DISJ Expr 
    java_cup.runtime.Symbol case180(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(p,    null, d,    a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
    java_cup.runtime.Symbol case179(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(p,    k,    d,    a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= DISJ Names COLON DISJ Expr 
    java_cup.runtime.Symbol case178(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos d = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(null, k,    d,    a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= EXH Names COLON DISJ Expr 
    java_cup.runtime.Symbol case177(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		 if (1==1) throw CompModule.hint(k, "exh");         /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PART Names COLON DISJ Expr 
    java_cup.runtime.Symbol case176(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		 if (1==1) throw CompModule.hint(k, "part");        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= Names COLON Expr 
    java_cup.runtime.Symbol case175(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(null, null, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PRIVATE Names COLON Expr 
    java_cup.runtime.Symbol case174(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(p,    null, null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PRIVATE DISJ Names COLON Expr 
    java_cup.runtime.Symbol case173(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(p,    k,    null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= DISJ Names COLON Expr 
    java_cup.runtime.Symbol case172(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Expr b = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=new Decl(null, k,    null, a, mult(b)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= EXH Names COLON Expr 
    java_cup.runtime.Symbol case171(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw CompModule.hint(k, "exh");         /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PART Names COLON Expr 
    java_cup.runtime.Symbol case170(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int kleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int kright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos k = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		 if (1==1) throw CompModule.hint(k, "part");        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT9 Decla NFEAT9 
    java_cup.runtime.Symbol case169(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-9); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT8 Decla NFEAT8 
    java_cup.runtime.Symbol case168(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-8); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT7 Decla NFEAT7 
    java_cup.runtime.Symbol case167(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-7); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT6 Decla NFEAT6 
    java_cup.runtime.Symbol case166(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-6); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT5 Decla NFEAT5 
    java_cup.runtime.Symbol case165(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-5); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT4 Decla NFEAT4 
    java_cup.runtime.Symbol case164(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-4); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT3 Decla NFEAT3 
    java_cup.runtime.Symbol case163(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-3); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT2 Decla NFEAT2 
    java_cup.runtime.Symbol case162(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-2); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= NFEAT1 Decla NFEAT1 
    java_cup.runtime.Symbol case161(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(-1); RESULT = x;  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT9 Decla PFEAT9 
    java_cup.runtime.Symbol case160(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(9); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT8 Decla PFEAT8 
    java_cup.runtime.Symbol case159(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(8); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT7 Decla PFEAT7 
    java_cup.runtime.Symbol case158(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(7); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT6 Decla PFEAT6 
    java_cup.runtime.Symbol case157(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(6); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT5 Decla PFEAT5 
    java_cup.runtime.Symbol case156(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(5); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT4 Decla PFEAT4 
    java_cup.runtime.Symbol case155(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(4); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT3 Decla PFEAT3 
    java_cup.runtime.Symbol case154(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(3); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT2 Decla PFEAT2 
    java_cup.runtime.Symbol case153(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(2); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Decla ::= PFEAT1 Decla PFEAT1 
    java_cup.runtime.Symbol case152(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Decl RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Decl x = (Decl) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 x.paint(1); RESULT = x;   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Namex ::= Namex COMMA EXACTLY Name 
    java_cup.runtime.Symbol case151(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Namex ::= Namex COMMA Name 
    java_cup.runtime.Symbol case150(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(b);              a.add(b); RESULT=a;                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Namex ::= EXACTLY Name 
    java_cup.runtime.Symbol case149(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Namex ::= Name 
    java_cup.runtime.Symbol case148(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Names ::= Names COMMA Name 
    java_cup.runtime.Symbol case147(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(b); a.add(b); RESULT=a;                              /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Names ::= Name 
    java_cup.runtime.Symbol case146(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NameHelper ::= NameHelper SLASH ID 
    java_cup.runtime.Symbol case145(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //NameHelper ::= ID 
    java_cup.runtime.Symbol case144(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=x;                                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Name ::= SEQ SLASH NameHelper 
    java_cup.runtime.Symbol case143(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Name ::= THIS SLASH NameHelper 
    java_cup.runtime.Symbol case142(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Name ::= NameHelper 
    java_cup.runtime.Symbol case141(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=x;                                           /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefu ::= SigRefu PLUS SigRef 
    java_cup.runtime.Symbol case140(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 a.add(b); RESULT=a;                             /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefu ::= SigRef 
    java_cup.runtime.Symbol case139(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",67, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefp ::= SigRefp COMMA SigRef 
    java_cup.runtime.Symbol case138(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> a = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		 a.add(b); RESULT=a;                             /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefp ::= SigRef 
    java_cup.runtime.Symbol case137(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",65, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefs ::= SigRefp 
    java_cup.runtime.Symbol case136(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		List<ExprVar> x = (List<ExprVar>) CUP$CompParser$stack.peek().value;
		 RESULT=x;                        /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRefs ::= 
    java_cup.runtime.Symbol case135(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		 RESULT=new ArrayList<ExprVar>(); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",66, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= NONE 
    java_cup.runtime.Symbol case134(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(x, "none");              /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= SEQ SLASH SIGINT 
    java_cup.runtime.Symbol case133(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= SIGINT 
    java_cup.runtime.Symbol case132(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(x, "Int");               /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= STRING 
    java_cup.runtime.Symbol case131(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(x, "String");            /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= UNIV 
    java_cup.runtime.Symbol case130(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=ExprVar.make(x, "univ");              /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigRef ::= Name 
    java_cup.runtime.Symbol case129(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=x;                                    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",64, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigIn ::= 
    java_cup.runtime.Symbol case128(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		 RESULT=null;                                                                             /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigIn ::= EQUALS SigRefu 
    java_cup.runtime.Symbol case127(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		List<ExprVar> x = (List<ExprVar>) CUP$CompParser$stack.peek().value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigIn ::= IN SigRefu 
    java_cup.runtime.Symbol case126(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		List<ExprVar> x = (List<ExprVar>) CUP$CompParser$stack.peek().value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigIn ::= EXTENDS SigRef 
    java_cup.runtime.Symbol case125(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<ExprVar> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos a = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",61, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQuals ::= SigQual SigQuals 
    java_cup.runtime.Symbol case124(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<Pos> a = (List<Pos>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		List<Pos> b = (List<Pos>) CUP$CompParser$stack.peek().value;
		 RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQuals ::= SIG 
    java_cup.runtime.Symbol case123(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",63, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQual ::= PRIVATE 
    java_cup.runtime.Symbol case122(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQual ::= SOME 
    java_cup.runtime.Symbol case121(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQual ::= ONE 
    java_cup.runtime.Symbol case120(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQual ::= LONE 
    java_cup.runtime.Symbol case119(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //SigQual ::= ABSTRACT 
    java_cup.runtime.Symbol case118(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Pos> RESULT =null;/*3*/
		int xleft = CUP$CompParser$stack.peek().left;
		int xright = CUP$CompParser$stack.peek().right;
		Pos x = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<Pos>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",62, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
    java_cup.runtime.Symbol case117(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		List<Pos> a = (List<Pos>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		List<ExprVar> b = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		List<ExprVar> c = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   RESULT = new ArrayList<Browsable>(); // [HASLab] colors
   for(ExprVar bb:b) {
      Sig s = parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)));
      RESULT.add(s); // [HASLab] colors
   }
 /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",60, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Vis ::= PRIVATE 
    java_cup.runtime.Symbol case116(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pos RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.peek().left;
		int pright = CUP$CompParser$stack.peek().right;
		Pos p = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT=p;    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",84, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Vis ::= 
    java_cup.runtime.Symbol case115(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Pos RESULT =null;/*3*/
		 RESULT=null; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",84, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED SigRef DOT Name Super 
    java_cup.runtime.Symbol case114(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
    java_cup.runtime.Symbol case113(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-8), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
    java_cup.runtime.Symbol case112(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-8), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED Name Super 
    java_cup.runtime.Symbol case111(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
    java_cup.runtime.Symbol case110(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
    java_cup.runtime.Symbol case109(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",53, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
    java_cup.runtime.Symbol case108(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-7), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
    java_cup.runtime.Symbol case107(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-10), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
    java_cup.runtime.Symbol case106(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9).value;
		int fleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int fright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		ExprVar f = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-10), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN Name COLON Expr Super 
    java_cup.runtime.Symbol case105(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
    java_cup.runtime.Symbol case104(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-8), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
    java_cup.runtime.Symbol case103(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Browsable> RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		List<Decl> d = (List<Decl>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int rleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int rright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Expr r = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); Func fun = parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); RESULT = Arrays.asList(fun); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, CUP$CompParser$stack.elementAt(CUP$CompParser$top-8), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MacroBody ::= EQUALS Expr 
    java_cup.runtime.Symbol case102(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //MacroBody ::= Super 
    java_cup.runtime.Symbol case101(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Expr RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		Expr a = (Expr) CUP$CompParser$stack.peek().value;
		 RESULT=a; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Macro ::= Vis LET Name MacroBody 
    java_cup.runtime.Symbol case100(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
    java_cup.runtime.Symbol case99(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
    java_cup.runtime.Symbol case98(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> d = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
    java_cup.runtime.Symbol case97(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
    java_cup.runtime.Symbol case96(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int dleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int dright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<ExprVar> d = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int vleft = CUP$CompParser$stack.peek().left;
		int vright = CUP$CompParser$stack.peek().right;
		Expr v = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= NUMBER COLON NUMBER 
    java_cup.runtime.Symbol case95(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int ileft = CUP$CompParser$stack.peek().left;
		int iright = CUP$CompParser$stack.peek().right;
		ExprConstant i = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
    java_cup.runtime.Symbol case94(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprConstant b = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int ileft = CUP$CompParser$stack.peek().left;
		int iright = CUP$CompParser$stack.peek().right;
		ExprConstant i = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= NUMBER DOT DOT NUMBER 
    java_cup.runtime.Symbol case93(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprConstant b = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= NUMBER 
    java_cup.runtime.Symbol case92(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.peek().value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
    java_cup.runtime.Symbol case91(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos e = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int ileft = CUP$CompParser$stack.peek().left;
		int iright = CUP$CompParser$stack.peek().right;
		ExprConstant i = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
    java_cup.runtime.Symbol case90(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos e = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprConstant b = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int ileft = CUP$CompParser$stack.peek().left;
		int iright = CUP$CompParser$stack.peek().right;
		ExprConstant i = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
    java_cup.runtime.Symbol case89(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos e = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprConstant b = (ExprConstant) CUP$CompParser$stack.peek().value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //TypeNumber ::= EXACTLY NUMBER 
    java_cup.runtime.Symbol case88(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos e = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.peek().value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",71, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber NONE 
    java_cup.runtime.Symbol case87(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope e = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int fleft = CUP$CompParser$stack.peek().left;
		int fright = CUP$CompParser$stack.peek().right;
		Pos f = (Pos) CUP$CompParser$stack.peek().value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber STRING 
    java_cup.runtime.Symbol case86(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber UNIV 
    java_cup.runtime.Symbol case85(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope e = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int fleft = CUP$CompParser$stack.peek().left;
		int fright = CUP$CompParser$stack.peek().right;
		Pos f = (Pos) CUP$CompParser$stack.peek().value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber SEQ 
    java_cup.runtime.Symbol case84(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber INT 
    java_cup.runtime.Symbol case83(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber SIGINT 
    java_cup.runtime.Symbol case82(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		Pos b = (Pos) CUP$CompParser$stack.peek().value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescope ::= TypeNumber Name 
    java_cup.runtime.Symbol case81(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      CommandScope RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		ExprVar b = (ExprVar) CUP$CompParser$stack.peek().value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);
/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",72, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescopes ::= Typescopes COMMA Typescope 
    java_cup.runtime.Symbol case80(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<CommandScope> a = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		CommandScope b = (CommandScope) CUP$CompParser$stack.peek().value;
		 RESULT=a; a.add(b);                                  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",73, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Typescopes ::= Typescope 
    java_cup.runtime.Symbol case79(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		CommandScope a = (CommandScope) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",73, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT9 
    java_cup.runtime.Symbol case78(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-9); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT8 
    java_cup.runtime.Symbol case77(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-8); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT7 
    java_cup.runtime.Symbol case76(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-7); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT6 
    java_cup.runtime.Symbol case75(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-6); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT5 
    java_cup.runtime.Symbol case74(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-5); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT4 
    java_cup.runtime.Symbol case73(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-4); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT3 
    java_cup.runtime.Symbol case72(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-3); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT2 
    java_cup.runtime.Symbol case71(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-2); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA NFEAT1 
    java_cup.runtime.Symbol case70(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(-1); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT0 
    java_cup.runtime.Symbol case69(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; 				  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT9 
    java_cup.runtime.Symbol case68(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(9);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT8 
    java_cup.runtime.Symbol case67(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(8);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT7 
    java_cup.runtime.Symbol case66(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(7);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT6 
    java_cup.runtime.Symbol case65(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(6);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT5 
    java_cup.runtime.Symbol case64(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(5);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT4 
    java_cup.runtime.Symbol case63(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(4);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT3 
    java_cup.runtime.Symbol case62(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(3);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT2 
    java_cup.runtime.Symbol case61(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(2);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= Featscope COMMA PFEAT1 
    java_cup.runtime.Symbol case60(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		List<Integer> a = (List<Integer>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int cright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos c = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		 RESULT=a; RESULT.add(1);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT9 
    java_cup.runtime.Symbol case59(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-9); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT8 
    java_cup.runtime.Symbol case58(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-8); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT7 
    java_cup.runtime.Symbol case57(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-7); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT6 
    java_cup.runtime.Symbol case56(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-6); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT5 
    java_cup.runtime.Symbol case55(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-5); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT4 
    java_cup.runtime.Symbol case54(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-4); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT3 
    java_cup.runtime.Symbol case53(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-3); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT2 
    java_cup.runtime.Symbol case52(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-2); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= NFEAT1 
    java_cup.runtime.Symbol case51(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(-1); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT0 
    java_cup.runtime.Symbol case50(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>();                 /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT9 
    java_cup.runtime.Symbol case49(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(9);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT8 
    java_cup.runtime.Symbol case48(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(8);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT7 
    java_cup.runtime.Symbol case47(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(7);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT6 
    java_cup.runtime.Symbol case46(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(6);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT5 
    java_cup.runtime.Symbol case45(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(5);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT4 
    java_cup.runtime.Symbol case44(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(4);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT3 
    java_cup.runtime.Symbol case43(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(3);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT2 
    java_cup.runtime.Symbol case42(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(2);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Featscope ::= PFEAT1 
    java_cup.runtime.Symbol case41(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<Integer> RESULT =null;/*3*/
		 RESULT=new ArrayList<Integer>(); RESULT.add(1);  /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Featscope",74, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Scope ::= 
    java_cup.runtime.Symbol case40(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		 RESULT=new ArrayList<CommandScope>();                                                                                         /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Scope ::= FOR Typescopes 
    java_cup.runtime.Symbol case39(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		List<CommandScope> b = (List<CommandScope>) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                                                                                                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Scope ::= FOR NUMBER BUT Typescopes 
    java_cup.runtime.Symbol case38(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		List<CommandScope> b = (List<CommandScope>) CUP$CompParser$stack.peek().value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Scope ::= FOR NUMBER 
    java_cup.runtime.Symbol case37(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      List<CommandScope> RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.peek().value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",59, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Product ::= 
    java_cup.runtime.Symbol case36(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      FeatureScope RESULT =null;/*3*/
		 RESULT=new FeatureScope(null,false,new ArrayList<Integer>()); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",75, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Product ::= WITH Featscope 
    java_cup.runtime.Symbol case35(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      FeatureScope RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		List<Integer> b = (List<Integer>) CUP$CompParser$stack.peek().value;
		 RESULT=new FeatureScope(o,false,b);                     /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",75, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Product ::= WITH EXACTLY Featscope 
    java_cup.runtime.Symbol case34(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      FeatureScope RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos e = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int bleft = CUP$CompParser$stack.peek().left;
		int bright = CUP$CompParser$stack.peek().right;
		List<Integer> b = (List<Integer>) CUP$CompParser$stack.peek().value;
		 RESULT=new FeatureScope(o,true,b);                      /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Product",75, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Expects ::= EXPECT NUMBER 
    java_cup.runtime.Symbol case33(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprConstant RESULT =null;/*3*/
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		ExprConstant a = (ExprConstant) CUP$CompParser$stack.peek().value;
		 RESULT=a;    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Expects ::= 
    java_cup.runtime.Symbol case32(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprConstant RESULT =null;/*3*/
		 RESULT=null; /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= Command IMPLIES CommandPrefix Name Product Scope Expects 
    java_cup.runtime.Symbol case31(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(true ,o,null,n   ,null,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= Command IMPLIES CommandPrefix Name Name Product Scope Expects 
    java_cup.runtime.Symbol case30(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(true ,o,x   ,n   ,null,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-7), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= CommandPrefix Name Product Scope Expects 
    java_cup.runtime.Symbol case29(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(false,o,null,n   ,null,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= CommandPrefix Name Name Product Scope Expects 
    java_cup.runtime.Symbol case28(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(false,o,x   ,n   ,null,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= Command IMPLIES CommandPrefix Super Product Scope Expects 
    java_cup.runtime.Symbol case27(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Expr e = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(true ,o,null,null,e   ,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= Command IMPLIES CommandPrefix Name Super Product Scope Expects 
    java_cup.runtime.Symbol case26(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Expr e = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(true ,o,x   ,null,e   ,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-7), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= CommandPrefix Super Product Scope Expects 
    java_cup.runtime.Symbol case25(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Expr e = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(false,o,null,null,e   ,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-4), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Command ::= CommandPrefix Name Super Product Scope Expects 
    java_cup.runtime.Symbol case24(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar o = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int xleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int xright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		ExprVar x = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int eleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int eright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Expr e = (Expr) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		FeatureScope p = (FeatureScope) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int sleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int sright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<CommandScope> s = (List<CommandScope>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprConstant c = (ExprConstant) CUP$CompParser$stack.peek().value;
		 c(false,o,x   ,null,e   ,s,c,p); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CommandPrefix ::= RUN 
    java_cup.runtime.Symbol case23(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int rleft = CUP$CompParser$stack.peek().left;
		int rright = CUP$CompParser$stack.peek().right;
		Pos r = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprVar.make(r, "r"); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //CommandPrefix ::= CHECK 
    java_cup.runtime.Symbol case22(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      ExprVar RESULT =null;/*3*/
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 RESULT = ExprVar.make(c, "c"); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= 
    java_cup.runtime.Symbol case21(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Command 
    java_cup.runtime.Symbol case20(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Macro 
    java_cup.runtime.Symbol case19(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Predicate 
    java_cup.runtime.Symbol case18(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Function 
    java_cup.runtime.Symbol case17(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Sig 
    java_cup.runtime.Symbol case16(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec ASSERT STR Super 
    java_cup.runtime.Symbol case15(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprConstant n = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		         parser.alloymodule.addAssertion (o , n.string , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec ASSERT Name Super 
    java_cup.runtime.Symbol case14(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec ASSERT Super 
    java_cup.runtime.Symbol case13(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		         parser.alloymodule.addAssertion (o , ""       , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec FACT STR Super 
    java_cup.runtime.Symbol case12(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprConstant n = (ExprConstant) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		         parser.alloymodule.addFact      (o , n.string , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec FACT Name Super 
    java_cup.runtime.Symbol case11(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec FACT Super 
    java_cup.runtime.Symbol case10(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int eleft = CUP$CompParser$stack.peek().left;
		int eright = CUP$CompParser$stack.peek().right;
		Expr e = (Expr) CUP$CompParser$stack.peek().value;
		         parser.alloymodule.addFact      (o , ""       , e); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
    java_cup.runtime.Symbol case9(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
    java_cup.runtime.Symbol case8(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<ExprVar> n = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
    java_cup.runtime.Symbol case7(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		List<ExprVar> b = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprVar c = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-8), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
    java_cup.runtime.Symbol case6(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<ExprVar> b = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		Pos c = (Pos) CUP$CompParser$stack.peek().value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-6), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis OPEN Name AS Name 
    java_cup.runtime.Symbol case5(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int aleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int aright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int cleft = CUP$CompParser$stack.peek().left;
		int cright = CUP$CompParser$stack.peek().right;
		ExprVar c = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec Vis OPEN Name 
    java_cup.runtime.Symbol case4(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int pleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).left;
		int pright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).right;
		Pos p = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2).value;
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int aleft = CUP$CompParser$stack.peek().left;
		int aright = CUP$CompParser$stack.peek().right;
		ExprVar a = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-3), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
    java_cup.runtime.Symbol case3(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4).value;
		int nleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).left;
		int nright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3).value;
		int bleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int bright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		List<ExprVar> b = (List<ExprVar>) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int rleft = CUP$CompParser$stack.peek().left;
		int rright = CUP$CompParser$stack.peek().right;
		Pos r = (Pos) CUP$CompParser$stack.peek().value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-5), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //Spec ::= Spec MODULE Name 
    java_cup.runtime.Symbol case2(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int oleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int oright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Pos o = (Pos) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		int nleft = CUP$CompParser$stack.peek().left;
		int nright = CUP$CompParser$stack.peek().right;
		ExprVar n = (ExprVar) CUP$CompParser$stack.peek().value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",69, CUP$CompParser$stack.elementAt(CUP$CompParser$top-2), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //$START ::= File EOF 
    java_cup.runtime.Symbol case1(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		int start_valleft = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).left;
		int start_valright = CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).right;
		Object start_val = (Object) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1).value;
		RESULT = start_val;/*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$CompParser$stack.elementAt(CUP$CompParser$top-1), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
    //File ::= Spec 
    java_cup.runtime.Symbol case0(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      java_cup.runtime.Symbol CUP$CompParser$result;
      Object RESULT =null;/*3*/
		 parser.alloymodule.doneParsing(); /*5*/
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",68, CUP$CompParser$stack.peek(), CUP$CompParser$stack.peek(), RESULT); /*6*/
      return CUP$CompParser$result;/*8*/

    }
}

